<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Omar Morando</title>
        <link>https://www.omarmorando.com/posts/</link>
        <description>Recent content in Posts on Omar Morando</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
        <lastBuildDate>Fri, 22 Apr 2022 15:09:35 +0200</lastBuildDate>
        <atom:link href="https://www.omarmorando.com/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Creating a New Theme</title>
            <link>https://www.omarmorando.com/posts/2014/09/creating-a-new-theme/</link>
            <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
            
            <guid>https://www.omarmorando.com/posts/2014/09/creating-a-new-theme/</guid>
            <description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description>
            <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&rsquo;t cover using CSS to style your theme.</p>
<p>We&rsquo;ll start with creating a new site with a very basic template. Then we&rsquo;ll add in a few pages and posts. With small variations on that, you will be able to create many different types of web sites.</p>
<p>In this tutorial, commands that you enter will start with the &ldquo;$&rdquo; prompt. The output will follow. Lines that start with &ldquo;#&rdquo; are comments that I&rsquo;ve added to explain a point. When I show updates to a file, the &ldquo;:wq&rdquo; on the last line means to save the file.</p>
<p>Here&rsquo;s an example:</p>
<pre tabindex="0"><code>## this is a comment
$ echo this is a command
this is a command

## edit the file
$ vi foo.md
+++
date = &quot;2014-09-28&quot;
title = &quot;creating a new theme&quot;
+++

bah and humbug
:wq

## show it
$ cat foo.md
+++
date = &quot;2014-09-28&quot;
title = &quot;creating a new theme&quot;
+++

bah and humbug
$
</code></pre><h2 id="some-definitions">Some Definitions</h2>
<p>There are a few concepts that you need to understand before creating a theme.</p>
<h3 id="skins">Skins</h3>
<p>Skins are the files responsible for the look and feel of your site. It’s the CSS that controls colors and fonts, it’s the Javascript that determines actions and reactions. It’s also the rules that Hugo uses to transform your content into the HTML that the site will serve to visitors.</p>
<p>You have two ways to create a skin. The simplest way is to create it in the <code>layouts/</code> directory. If you do, then you don’t have to worry about configuring Hugo to recognize it. The first place that Hugo will look for rules and files is in the <code>layouts/</code> directory so it will always find the skin.</p>
<p>Your second choice is to create it in a sub-directory of the <code>themes/</code> directory. If you do, then you must always tell Hugo where to search for the skin. It’s extra work, though, so why bother with it?</p>
<p>The difference between creating a skin in <code>layouts/</code> and creating it in <code>themes/</code> is very subtle. A skin in <code>layouts/</code> can’t be customized without updating the templates and static files that it is built from. A skin created in <code>themes/</code>, on the other hand, can be and that makes it easier for other people to use it.</p>
<p>The rest of this tutorial will call a skin created in the <code>themes/</code> directory a theme.</p>
<p>Note that you can use this tutorial to create a skin in the <code>layouts/</code> directory if you wish to. The main difference will be that you won’t need to update the site’s configuration file to use a theme.</p>
<h3 id="the-home-page">The Home Page</h3>
<p>The home page, or landing page, is the first page that many visitors to a site see. It is the index.html file in the root directory of the web site. Since Hugo writes files to the public/ directory, our home page is public/index.html.</p>
<h3 id="site-configuration-file">Site Configuration File</h3>
<p>When Hugo runs, it looks for a configuration file that contains settings that override default values for the entire site. The file can use TOML, YAML, or JSON. I prefer to use TOML for my configuration files. If you prefer to use JSON or YAML, you’ll need to translate my examples. You’ll also need to change the name of the file since Hugo uses the extension to determine how to process it.</p>
<p>Hugo translates Markdown files into HTML. By default, Hugo expects to find Markdown files in your <code>content/</code> directory and template files in your <code>themes/</code> directory. It will create HTML files in your <code>public/</code> directory. You can change this by specifying alternate locations in the configuration file.</p>
<h3 id="content">Content</h3>
<p>Content is stored in text files that contain two sections. The first section is the “front matter,” which is the meta-information on the content. The second section contains Markdown that will be converted to HTML.</p>
<h4 id="front-matter">Front Matter</h4>
<p>The front matter is information about the content. Like the configuration file, it can be written in TOML, YAML, or JSON. Unlike the configuration file, Hugo doesn’t use the file’s extension to know the format. It looks for markers to signal the type. TOML is surrounded by “<code>+++</code>”, YAML by “<code>---</code>”, and JSON is enclosed in curly braces. I prefer to use TOML, so you’ll need to translate my examples if you prefer YAML or JSON.</p>
<p>The information in the front matter is passed into the template before the content is rendered into HTML.</p>
<h4 id="markdown">Markdown</h4>
<p>Content is written in Markdown which makes it easier to create the content. Hugo runs the content through a Markdown engine to create the HTML which will be written to the output file.</p>
<h3 id="template-files">Template Files</h3>
<p>Hugo uses template files to render content into HTML. Template files are a bridge between the content and presentation. Rules in the template define what content is published, where it&rsquo;s published to, and how it will rendered to the HTML file. The template guides the presentation by specifying the style to use.</p>
<p>There are three types of templates: single, list, and partial. Each type takes a bit of content as input and transforms it based on the commands in the template.</p>
<p>Hugo uses its knowledge of the content to find the template file used to render the content. If it can’t find a template that is an exact match for the content, it will shift up a level and search from there. It will continue to do so until it finds a matching template or runs out of templates to try. If it can’t find a template, it will use the default template for the site.</p>
<p>Please note that you can use the front matter to influence Hugo’s choice of templates.</p>
<h4 id="single-template">Single Template</h4>
<p>A single template is used to render a single piece of content. For example, an article or post would be a single piece of content and use a single template.</p>
<h4 id="list-template">List Template</h4>
<p>A list template renders a group of related content. That could be a summary of recent postings or all articles in a category. List templates can contain multiple groups.</p>
<p>The homepage template is a special type of list template. Hugo assumes that the home page of your site will act as the portal for the rest of the content in the site.</p>
<h4 id="partial-template">Partial Template</h4>
<p>A partial template is a template that can be included in other templates. Partial templates must be called using the “partial” template command. They are very handy for rolling up common behavior. For example, your site may have a banner that all pages use. Instead of copying the text of the banner into every single and list template, you could create a partial with the banner in it. That way if you decide to change the banner, you only have to change the partial template.</p>
<h2 id="create-a-new-site">Create a New Site</h2>
<p>Let&rsquo;s use Hugo to create a new web site. I&rsquo;m a Mac user, so I&rsquo;ll create mine in my home directory, in the Sites folder. If you&rsquo;re using Linux, you might have to create the folder first.</p>
<p>The &ldquo;new site&rdquo; command will create a skeleton of a site. It will give you the basic directory structure and a useable configuration file.</p>
<pre tabindex="0"><code>$ hugo new site ~/Sites/zafta
$ cd ~/Sites/zafta
$ ls -l
total 8
drwxr-xr-x  7 quoha  staff  238 Sep 29 16:49 .
drwxr-xr-x  3 quoha  staff  102 Sep 29 16:49 ..
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 archetypes
-rw-r--r--  1 quoha  staff   82 Sep 29 16:49 config.toml
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 content
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 layouts
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 static
$
</code></pre><p>Take a look in the content/ directory to confirm that it is empty.</p>
<p>The other directories (archetypes/, layouts/, and static/) are used when customizing a theme. That&rsquo;s a topic for a different tutorial, so please ignore them for now.</p>
<h3 id="generate-the-html-for-the-new-site">Generate the HTML For the New Site</h3>
<p>Running the <code>hugo</code> command with no options will read all the available content and generate the HTML files. It will also copy all static files (that&rsquo;s everything that&rsquo;s not content). Since we have an empty site, it won&rsquo;t do much, but it will do it very quickly.</p>
<pre tabindex="0"><code>$ hugo --verbose
INFO: 2014/09/29 Using config file: config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]
WARN: 2014/09/29 Unable to locate layout: [404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 2 ms
$
</code></pre><p>The &ldquo;<code>--verbose</code>&rdquo; flag gives extra information that will be helpful when we build the template. Every line of the output that starts with &ldquo;INFO:&rdquo; or &ldquo;WARN:&rdquo; is present because we used that flag. The lines that start with &ldquo;WARN:&rdquo; are warning messages. We&rsquo;ll go over them later.</p>
<p>We can verify that the command worked by looking at the directory again.</p>
<pre tabindex="0"><code>$ ls -l
total 8
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 archetypes
-rw-r--r--  1 quoha  staff   82 Sep 29 16:49 config.toml
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 content
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 layouts
drwxr-xr-x  4 quoha  staff  136 Sep 29 17:02 public
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 static
$
</code></pre><p>See that new public/ directory? Hugo placed all generated content there. When you&rsquo;re ready to publish your web site, that&rsquo;s the place to start. For now, though, let&rsquo;s just confirm that we have what we&rsquo;d expect from a site with no content.</p>
<pre tabindex="0"><code>$ ls -l public
total 16
-rw-r--r--  1 quoha  staff  416 Sep 29 17:02 index.xml
-rw-r--r--  1 quoha  staff  262 Sep 29 17:02 sitemap.xml
$
</code></pre><p>Hugo created two XML files, which is standard, but there are no HTML files.</p>
<h3 id="test-the-new-site">Test the New Site</h3>
<p>Verify that you can run the built-in web server. It will dramatically shorten your development cycle if you do. Start it by running the &ldquo;server&rdquo; command. If it is successful, you will see output similar to the following:</p>
<pre tabindex="0"><code>$ hugo server --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]
WARN: 2014/09/29 Unable to locate layout: [404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 2 ms
Serving pages from /Users/quoha/Sites/zafta/public
Web Server is available at http://localhost:1313
Press Ctrl+C to stop
</code></pre><p>Connect to the listed URL (it&rsquo;s on the line that starts with &ldquo;Web Server&rdquo;). If everything is working correctly, you should get a page that shows the following:</p>
<pre tabindex="0"><code>index.xml
sitemap.xml
</code></pre><p>That&rsquo;s a listing of your public/ directory. Hugo didn&rsquo;t create a home page because our site has no content. When there&rsquo;s no index.html file in a directory, the server lists the files in the directory, which is what you should see in your browser.</p>
<p>Let’s go back and look at those warnings again.</p>
<pre tabindex="0"><code>WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]
WARN: 2014/09/29 Unable to locate layout: [404.html]
</code></pre><p>That second warning is easier to explain. We haven’t created a template to be used to generate “page not found errors.” The 404 message is a topic for a separate tutorial.</p>
<p>Now for the first warning. It is for the home page. You can tell because the first layout that it looked for was “index.html.” That’s only used by the home page.</p>
<p>I like that the verbose flag causes Hugo to list the files that it&rsquo;s searching for. For the home page, they are index.html, _default/list.html, and _default/single.html. There are some rules that we&rsquo;ll cover later that explain the names and paths. For now, just remember that Hugo couldn&rsquo;t find a template for the home page and it told you so.</p>
<p>At this point, you&rsquo;ve got a working installation and site that we can build upon. All that’s left is to add some content and a theme to display it.</p>
<h2 id="create-a-new-theme">Create a New Theme</h2>
<p>Hugo doesn&rsquo;t ship with a default theme. There are a few available (I counted a dozen when I first installed Hugo) and Hugo comes with a command to create new themes.</p>
<p>We&rsquo;re going to create a new theme called &ldquo;zafta.&rdquo; Since the goal of this tutorial is to show you how to fill out the files to pull in your content, the theme will not contain any CSS. In other words, ugly but functional.</p>
<p>All themes have opinions on content and layout. For example, Zafta uses &ldquo;post&rdquo; over &ldquo;blog&rdquo;. Strong opinions make for simpler templates but differing opinions make it tougher to use themes. When you build a theme, consider using the terms that other themes do.</p>
<h3 id="create-a-skeleton">Create a Skeleton</h3>
<p>Use the hugo &ldquo;new&rdquo; command to create the skeleton of a theme. This creates the directory structure and places empty files for you to fill out.</p>
<pre tabindex="0"><code>$ hugo new theme zafta

$ ls -l
total 8
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 archetypes
-rw-r--r--  1 quoha  staff   82 Sep 29 16:49 config.toml
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 content
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 layouts
drwxr-xr-x  4 quoha  staff  136 Sep 29 17:02 public
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 static
drwxr-xr-x  3 quoha  staff  102 Sep 29 17:31 themes

$ find themes -type f | xargs ls -l
-rw-r--r--  1 quoha  staff  1081 Sep 29 17:31 themes/zafta/LICENSE.md
-rw-r--r--  1 quoha  staff     0 Sep 29 17:31 themes/zafta/archetypes/default.md
-rw-r--r--  1 quoha  staff     0 Sep 29 17:31 themes/zafta/layouts/_default/list.html
-rw-r--r--  1 quoha  staff     0 Sep 29 17:31 themes/zafta/layouts/_default/single.html
-rw-r--r--  1 quoha  staff     0 Sep 29 17:31 themes/zafta/layouts/index.html
-rw-r--r--  1 quoha  staff     0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html
-rw-r--r--  1 quoha  staff     0 Sep 29 17:31 themes/zafta/layouts/partials/header.html
-rw-r--r--  1 quoha  staff    93 Sep 29 17:31 themes/zafta/theme.toml
$
</code></pre><p>The skeleton includes templates (the files ending in .html), license file, a description of your theme (the theme.toml file), and an empty archetype.</p>
<p>Please take a minute to fill out the theme.toml and LICENSE.md files. They&rsquo;re optional, but if you&rsquo;re going to be distributing your theme, it tells the world who to praise (or blame). It&rsquo;s also nice to declare the license so that people will know how they can use the theme.</p>
<pre tabindex="0"><code>$ vi themes/zafta/theme.toml
author = &quot;michael d henderson&quot;
description = &quot;a minimal working template&quot;
license = &quot;MIT&quot;
name = &quot;zafta&quot;
source_repo = &quot;&quot;
tags = [&quot;tags&quot;, &quot;categories&quot;]
:wq

## also edit themes/zafta/LICENSE.md and change
## the bit that says &quot;YOUR_NAME_HERE&quot;
</code></pre><p>Note that the the skeleton&rsquo;s template files are empty. Don&rsquo;t worry, we&rsquo;ll be changing that shortly.</p>
<pre tabindex="0"><code>$ find themes/zafta -name '*.html' | xargs ls -l
-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes/zafta/layouts/_default/list.html
-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes/zafta/layouts/_default/single.html
-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes/zafta/layouts/index.html
-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html
-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes/zafta/layouts/partials/header.html
$
</code></pre><h3 id="update-the-configuration-file-to-use-the-theme">Update the Configuration File to Use the Theme</h3>
<p>Now that we&rsquo;ve got a theme to work with, it&rsquo;s a good idea to add the theme name to the configuration file. This is optional, because you can always add &ldquo;-t zafta&rdquo; on all your commands. I like to put it the configuration file because I like shorter command lines. If you don&rsquo;t put it in the configuration file or specify it on the command line, you won&rsquo;t use the template that you&rsquo;re expecting to.</p>
<p>Edit the file to add the theme, add a title for the site, and specify that all of our content will use the TOML format.</p>
<pre tabindex="0"><code>$ vi config.toml
theme = &quot;zafta&quot;
baseurl = &quot;&quot;
languageCode = &quot;en-us&quot;
title = &quot;zafta - totally refreshing&quot;
MetaDataFormat = &quot;toml&quot;
:wq

$
</code></pre><h3 id="generate-the-site">Generate the Site</h3>
<p>Now that we have an empty theme, let&rsquo;s generate the site again.</p>
<pre tabindex="0"><code>$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 2 ms
$
</code></pre><p>Did you notice that the output is different? The warning message for the home page has disappeared and we have an additional information line saying that Hugo is syncing from the theme&rsquo;s directory.</p>
<p>Let&rsquo;s check the public/ directory to see what Hugo&rsquo;s created.</p>
<pre tabindex="0"><code>$ ls -l public
total 16
drwxr-xr-x  2 quoha  staff   68 Sep 29 17:56 css
-rw-r--r--  1 quoha  staff    0 Sep 29 17:56 index.html
-rw-r--r--  1 quoha  staff  407 Sep 29 17:56 index.xml
drwxr-xr-x  2 quoha  staff   68 Sep 29 17:56 js
-rw-r--r--  1 quoha  staff  243 Sep 29 17:56 sitemap.xml
$
</code></pre><p>Notice four things:</p>
<ol>
<li>Hugo created a home page. This is the file public/index.html.</li>
<li>Hugo created a css/ directory.</li>
<li>Hugo created a js/ directory.</li>
<li>Hugo claimed that it created 0 pages. It created a file and copied over static files, but didn&rsquo;t create any pages. That&rsquo;s because it considers a &ldquo;page&rdquo; to be a file created directly from a content file. It doesn&rsquo;t count things like the index.html files that it creates automatically.</li>
</ol>
<h4 id="the-home-page-1">The Home Page</h4>
<p>Hugo supports many different types of templates. The home page is special because it gets its own type of template and its own template file. The file, layouts/index.html, is used to generate the HTML for the home page. The Hugo documentation says that this is the only required template, but that depends. Hugo&rsquo;s warning message shows that it looks for three different templates:</p>
<pre tabindex="0"><code>WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]
</code></pre><p>If it can&rsquo;t find any of these, it completely skips creating the home page. We noticed that when we built the site without having a theme installed.</p>
<p>When Hugo created our theme, it created an empty home page template. Now, when we build the site, Hugo finds the template and uses it to generate the HTML for the home page. Since the template file is empty, the HTML file is empty, too. If the template had any rules in it, then Hugo would have used them to generate the home page.</p>
<pre tabindex="0"><code>$ find . -name index.html | xargs ls -l
-rw-r--r--  1 quoha  staff  0 Sep 29 20:21 ./public/index.html
-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 ./themes/zafta/layouts/index.html
$
</code></pre><h4 id="the-magic-of-static">The Magic of Static</h4>
<p>Hugo does two things when generating the site. It uses templates to transform content into HTML and it copies static files into the site. Unlike content, static files are not transformed. They are copied exactly as they are.</p>
<p>Hugo assumes that your site will use both CSS and JavaScript, so it creates directories in your theme to hold them. Remember opinions? Well, Hugo&rsquo;s opinion is that you&rsquo;ll store your CSS in a directory named css/ and your JavaScript in a directory named js/. If you don&rsquo;t like that, you can change the directory names in your theme directory or even delete them completely. Hugo&rsquo;s nice enough to offer its opinion, then behave nicely if you disagree.</p>
<pre tabindex="0"><code>$ find themes/zafta -type d | xargs ls -ld
drwxr-xr-x  7 quoha  staff  238 Sep 29 17:38 themes/zafta
drwxr-xr-x  3 quoha  staff  102 Sep 29 17:31 themes/zafta/archetypes
drwxr-xr-x  5 quoha  staff  170 Sep 29 17:31 themes/zafta/layouts
drwxr-xr-x  4 quoha  staff  136 Sep 29 17:31 themes/zafta/layouts/_default
drwxr-xr-x  4 quoha  staff  136 Sep 29 17:31 themes/zafta/layouts/partials
drwxr-xr-x  4 quoha  staff  136 Sep 29 17:31 themes/zafta/static
drwxr-xr-x  2 quoha  staff   68 Sep 29 17:31 themes/zafta/static/css
drwxr-xr-x  2 quoha  staff   68 Sep 29 17:31 themes/zafta/static/js
$
</code></pre><h2 id="the-theme-development-cycle">The Theme Development Cycle</h2>
<p>When you&rsquo;re working on a theme, you will make changes in the theme&rsquo;s directory, rebuild the site, and check your changes in the browser. Hugo makes this very easy:</p>
<ol>
<li>Purge the public/ directory.</li>
<li>Run the built in web server in watch mode.</li>
<li>Open your site in a browser.</li>
<li>Update the theme.</li>
<li>Glance at your browser window to see changes.</li>
<li>Return to step 4.</li>
</ol>
<p>I’ll throw in one more opinion: never work on a theme on a live site. Always work on a copy of your site. Make changes to your theme, test them, then copy them up to your site. For added safety, use a tool like Git to keep a revision history of your content and your theme. Believe me when I say that it is too easy to lose both your mind and your changes.</p>
<p>Check the main Hugo site for information on using Git with Hugo.</p>
<h3 id="purge-the-public-directory">Purge the public/ Directory</h3>
<p>When generating the site, Hugo will create new files and update existing ones in the <code>public/</code> directory. It will not delete files that are no longer used. For example, files that were created in the wrong directory or with the wrong title will remain. If you leave them, you might get confused by them later. I recommend cleaning out your site prior to generating it.</p>
<p>Note: If you&rsquo;re building on an SSD, you should ignore this. Churning on a SSD can be costly.</p>
<h3 id="hugos-watch-option">Hugo&rsquo;s Watch Option</h3>
<p>Hugo&rsquo;s &ldquo;<code>--watch</code>&rdquo; option will monitor the content/ and your theme directories for changes and rebuild the site automatically.</p>
<h3 id="live-reload">Live Reload</h3>
<p>Hugo&rsquo;s built in web server supports live reload. As pages are saved on the server, the browser is told to refresh the page. Usually, this happens faster than you can say, &ldquo;Wow, that&rsquo;s totally amazing.&rdquo;</p>
<h3 id="development-commands">Development Commands</h3>
<p>Use the following commands as the basis for your workflow.</p>
<pre tabindex="0"><code>## purge old files. hugo will recreate the public directory.
##
$ rm -rf public
##
## run hugo in watch mode
##
$ hugo server --watch --verbose
</code></pre><p>Here&rsquo;s sample output showing Hugo detecting a change to the template for the home page. Once generated, the web browser automatically reloaded the page. I&rsquo;ve said this before, it&rsquo;s amazing.</p>
<pre tabindex="0"><code>$ rm -rf public
$ hugo server --watch --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 2 ms
Watching for changes in /Users/quoha/Sites/zafta/content
Serving pages from /Users/quoha/Sites/zafta/public
Web Server is available at http://localhost:1313
Press Ctrl+C to stop
INFO: 2014/09/29 File System Event: [&quot;/Users/quoha/Sites/zafta/themes/zafta/layouts/index.html&quot;: MODIFY|ATTRIB]
Change detected, rebuilding site

WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 1 ms
</code></pre><h2 id="update-the-home-page-template">Update the Home Page Template</h2>
<p>The home page is one of a few special pages that Hugo creates automatically. As mentioned earlier, it looks for one of three files in the theme&rsquo;s layout/ directory:</p>
<ol>
<li>index.html</li>
<li>_default/list.html</li>
<li>_default/single.html</li>
</ol>
<p>We could update one of the default templates, but a good design decision is to update the most specific template available. That&rsquo;s not a hard and fast rule (in fact, we&rsquo;ll break it a few times in this tutorial), but it is a good generalization.</p>
<h3 id="make-a-static-home-page">Make a Static Home Page</h3>
<p>Right now, that page is empty because we don&rsquo;t have any content and we don&rsquo;t have any logic in the template. Let&rsquo;s change that by adding some text to the template.</p>
<pre tabindex="0"><code>$ vi themes/zafta/layouts/index.html
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;body&gt;
  &lt;p&gt;hugo says hello!&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
:wq

$
</code></pre><p>Build the web site and then verify the results.</p>
<pre tabindex="0"><code>$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 2 ms

$ find public -type f -name '*.html' | xargs ls -l
-rw-r--r--  1 quoha  staff  78 Sep 29 21:26 public/index.html

$ cat public/index.html
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;body&gt;
  &lt;p&gt;hugo says hello!&lt;/p&gt;
&lt;/html&gt;
</code></pre><h4 id="live-reload-1">Live Reload</h4>
<p>Note: If you&rsquo;re running the server with the <code>--watch</code> option, you&rsquo;ll see different content in the file:</p>
<pre tabindex="0"><code>$ cat public/index.html
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;body&gt;
  &lt;p&gt;hugo says hello!&lt;/p&gt;
&lt;script&gt;document.write('&lt;script src=&quot;http://'
        + (location.host || 'localhost').split(':')[0]
    + ':1313/livereload.js?mindelay=10&quot;&gt;&lt;/'
        + 'script&gt;')&lt;/script&gt;&lt;/body&gt;
&lt;/html&gt;
</code></pre><p>When you use <code>--watch</code>, the Live Reload script is added by Hugo. Look for live reload in the documentation to see what it does and how to disable it.</p>
<h3 id="build-a-dynamic-home-page">Build a &ldquo;Dynamic&rdquo; Home Page</h3>
<p>&ldquo;Dynamic home page?&rdquo; Hugo&rsquo;s a static web site generator, so this seems an odd thing to say. I mean let&rsquo;s have the home page automatically reflect the content in the site every time Hugo builds it. We&rsquo;ll use iteration in the template to do that.</p>
<h4 id="create-new-posts">Create New Posts</h4>
<p>Now that we have the home page generating static content, let&rsquo;s add some content to the site. We&rsquo;ll display these posts as a list on the home page and on their own page, too.</p>
<p>Hugo has a command to generate a skeleton post, just like it does for sites and themes.</p>
<pre tabindex="0"><code>$ hugo --verbose new post/first.md
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 attempting to create  post/first.md of post
INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/default.md
ERROR: 2014/09/29 Unable to Cast &lt;nil&gt; to map[string]interface{}

$
</code></pre><p>That wasn&rsquo;t very nice, was it?</p>
<p>The &ldquo;new&rdquo; command uses an archetype to create the post file. Hugo created an empty default archetype file, but that causes an error when there&rsquo;s a theme. For me, the workaround was to create an archetypes file specifically for the post type.</p>
<pre tabindex="0"><code>$ vi themes/zafta/archetypes/post.md
+++
Description = &quot;&quot;
Tags = []
Categories = []
+++
:wq

$ find themes/zafta/archetypes -type f | xargs ls -l
-rw-r--r--  1 quoha  staff   0 Sep 29 21:53 themes/zafta/archetypes/default.md
-rw-r--r--  1 quoha  staff  51 Sep 29 21:54 themes/zafta/archetypes/post.md

$ hugo --verbose new post/first.md
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 attempting to create  post/first.md of post
INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md
INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/first.md
/Users/quoha/Sites/zafta/content/post/first.md created

$ hugo --verbose new post/second.md
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 attempting to create  post/second.md of post
INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md
INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/second.md
/Users/quoha/Sites/zafta/content/post/second.md created

$ ls -l content/post
total 16
-rw-r--r--  1 quoha  staff  104 Sep 29 21:54 first.md
-rw-r--r--  1 quoha  staff  105 Sep 29 21:57 second.md

$ cat content/post/first.md
+++
Categories = []
Description = &quot;&quot;
Tags = []
date = &quot;2014-09-29T21:54:53-05:00&quot;
title = &quot;first&quot;

+++
my first post

$ cat content/post/second.md
+++
Categories = []
Description = &quot;&quot;
Tags = []
date = &quot;2014-09-29T21:57:09-05:00&quot;
title = &quot;second&quot;

+++
my second post

$
</code></pre><p>Build the web site and then verify the results.</p>
<pre tabindex="0"><code>$ rm -rf public
$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 found taxonomies: map[string]string{&quot;category&quot;:&quot;categories&quot;, &quot;tag&quot;:&quot;tags&quot;}
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
2 pages created
0 tags created
0 categories created
in 4 ms
$
</code></pre><p>The output says that it created 2 pages. Those are our new posts:</p>
<pre tabindex="0"><code>$ find public -type f -name '*.html' | xargs ls -l
-rw-r--r--  1 quoha  staff  78 Sep 29 22:13 public/index.html
-rw-r--r--  1 quoha  staff   0 Sep 29 22:13 public/post/first/index.html
-rw-r--r--  1 quoha  staff   0 Sep 29 22:13 public/post/index.html
-rw-r--r--  1 quoha  staff   0 Sep 29 22:13 public/post/second/index.html
$
</code></pre><p>The new files are empty because because the templates used to generate the content are empty. The homepage doesn&rsquo;t show the new content, either. We have to update the templates to add the posts.</p>
<h3 id="list-and-single-templates">List and Single Templates</h3>
<p>In Hugo, we have three major kinds of templates. There&rsquo;s the home page template that we updated previously. It is used only by the home page. We also have &ldquo;single&rdquo; templates which are used to generate output for a single content file. We also have &ldquo;list&rdquo; templates that are used to group multiple pieces of content before generating output.</p>
<p>Generally speaking, list templates are named &ldquo;list.html&rdquo; and single templates are named &ldquo;single.html.&rdquo;</p>
<p>There are three other types of templates: partials, content views, and terms. We will not go into much detail on these.</p>
<h3 id="add-content-to-the-homepage">Add Content to the Homepage</h3>
<p>The home page will contain a list of posts. Let&rsquo;s update its template to add the posts that we just created. The logic in the template will run every time we build the site.</p>
<pre tabindex="0"><code>$ vi themes/zafta/layouts/index.html
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;body&gt;
  {{ range first 10 .Data.Pages }}
    &lt;h1&gt;{{ .Title }}&lt;/h1&gt;
  {{ end }}
&lt;/body&gt;
&lt;/html&gt;
:wq

$
</code></pre><p>Hugo uses the Go template engine. That engine scans the template files for commands which are enclosed between &ldquo;{{&rdquo; and &ldquo;}}&rdquo;. In our template, the commands are:</p>
<ol>
<li>range</li>
<li>.Title</li>
<li>end</li>
</ol>
<p>The &ldquo;range&rdquo; command is an iterator. We&rsquo;re going to use it to go through the first ten pages. Every HTML file that Hugo creates is treated as a page, so looping through the list of pages will look at every file that will be created.</p>
<p>The &ldquo;.Title&rdquo; command prints the value of the &ldquo;title&rdquo; variable. Hugo pulls it from the front matter in the Markdown file.</p>
<p>The &ldquo;end&rdquo; command signals the end of the range iterator. The engine loops back to the top of the iteration when it finds &ldquo;end.&rdquo; Everything between the &ldquo;range&rdquo; and &ldquo;end&rdquo; is evaluated every time the engine goes through the iteration. In this file, that would cause the title from the first ten pages to be output as heading level one.</p>
<p>It&rsquo;s helpful to remember that some variables, like .Data, are created before any output files. Hugo loads every content file into the variable and then gives the template a chance to process before creating the HTML files.</p>
<p>Build the web site and then verify the results.</p>
<pre tabindex="0"><code>$ rm -rf public
$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 found taxonomies: map[string]string{&quot;tag&quot;:&quot;tags&quot;, &quot;category&quot;:&quot;categories&quot;}
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
2 pages created
0 tags created
0 categories created
in 4 ms
$ find public -type f -name '*.html' | xargs ls -l
-rw-r--r--  1 quoha  staff  94 Sep 29 22:23 public/index.html
-rw-r--r--  1 quoha  staff   0 Sep 29 22:23 public/post/first/index.html
-rw-r--r--  1 quoha  staff   0 Sep 29 22:23 public/post/index.html
-rw-r--r--  1 quoha  staff   0 Sep 29 22:23 public/post/second/index.html
$ cat public/index.html
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;body&gt;

    &lt;h1&gt;second&lt;/h1&gt;

    &lt;h1&gt;first&lt;/h1&gt;

&lt;/body&gt;
&lt;/html&gt;
$
</code></pre><p>Congratulations, the home page shows the title of the two posts. The posts themselves are still empty, but let&rsquo;s take a moment to appreciate what we&rsquo;ve done. Your template now generates output dynamically. Believe it or not, by inserting the range command inside of those curly braces, you&rsquo;ve learned everything you need to know to build a theme. All that&rsquo;s really left is understanding which template will be used to generate each content file and becoming familiar with the commands for the template engine.</p>
<p>And, if that were entirely true, this tutorial would be much shorter. There are a few things to know that will make creating a new template much easier. Don&rsquo;t worry, though, that&rsquo;s all to come.</p>
<h3 id="add-content-to-the-posts">Add Content to the Posts</h3>
<p>We&rsquo;re working with posts, which are in the content/post/ directory. That means that their section is &ldquo;post&rdquo; (and if we don&rsquo;t do something weird, their type is also &ldquo;post&rdquo;).</p>
<p>Hugo uses the section and type to find the template file for every piece of content. Hugo will first look for a template file that matches the section or type name. If it can&rsquo;t find one, then it will look in the _default/ directory. There are some twists that we&rsquo;ll cover when we get to categories and tags, but for now we can assume that Hugo will try post/single.html, then _default/single.html.</p>
<p>Now that we know the search rule, let&rsquo;s see what we actually have available:</p>
<pre tabindex="0"><code>$ find themes/zafta -name single.html | xargs ls -l
-rw-r--r--  1 quoha  staff  132 Sep 29 17:31 themes/zafta/layouts/_default/single.html
</code></pre><p>We could create a new template, post/single.html, or change the default. Since we don&rsquo;t know of any other content types, let&rsquo;s start with updating the default.</p>
<p>Remember, any content that we haven&rsquo;t created a template for will end up using this template. That can be good or bad. Bad because I know that we&rsquo;re going to be adding different types of content and we&rsquo;re going to end up undoing some of the changes we&rsquo;ve made. It&rsquo;s good because we&rsquo;ll be able to see immediate results. It&rsquo;s also good to start here because we can start to build the basic layout for the site. As we add more content types, we&rsquo;ll refactor this file and move logic around. Hugo makes that fairly painless, so we&rsquo;ll accept the cost and proceed.</p>
<p>Please see the Hugo documentation on template rendering for all the details on determining which template to use. And, as the docs mention, if you&rsquo;re building a single page application (SPA) web site, you can delete all of the other templates and work with just the default single page. That&rsquo;s a refreshing amount of joy right there.</p>
<h4 id="update-the-template-file">Update the Template File</h4>
<pre tabindex="0"><code>$ vi themes/zafta/layouts/_default/single.html
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;{{ .Title }}&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;h1&gt;{{ .Title }}&lt;/h1&gt;
  {{ .Content }}
&lt;/body&gt;
&lt;/html&gt;
:wq

$
</code></pre><p>Build the web site and verify the results.</p>
<pre tabindex="0"><code>$ rm -rf public
$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 found taxonomies: map[string]string{&quot;tag&quot;:&quot;tags&quot;, &quot;category&quot;:&quot;categories&quot;}
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
2 pages created
0 tags created
0 categories created
in 4 ms

$ find public -type f -name '*.html' | xargs ls -l
-rw-r--r--  1 quoha  staff   94 Sep 29 22:40 public/index.html
-rw-r--r--  1 quoha  staff  125 Sep 29 22:40 public/post/first/index.html
-rw-r--r--  1 quoha  staff    0 Sep 29 22:40 public/post/index.html
-rw-r--r--  1 quoha  staff  128 Sep 29 22:40 public/post/second/index.html

$ cat public/post/first/index.html
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;first&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;h1&gt;first&lt;/h1&gt;
  &lt;p&gt;my first post&lt;/p&gt;

&lt;/body&gt;
&lt;/html&gt;

$ cat public/post/second/index.html
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;second&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;h1&gt;second&lt;/h1&gt;
  &lt;p&gt;my second post&lt;/p&gt;

&lt;/body&gt;
&lt;/html&gt;
$
</code></pre><p>Notice that the posts now have content. You can go to localhost:1313/post/first to verify.</p>
<h3 id="linking-to-content">Linking to Content</h3>
<p>The posts are on the home page. Let&rsquo;s add a link from there to the post. Since this is the home page, we&rsquo;ll update its template.</p>
<pre tabindex="0"><code>$ vi themes/zafta/layouts/index.html
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;body&gt;
  {{ range first 10 .Data.Pages }}
    &lt;h1&gt;&lt;a href=&quot;{{ .Permalink }}&quot;&gt;{{ .Title }}&lt;/a&gt;&lt;/h1&gt;
  {{ end }}
&lt;/body&gt;
&lt;/html&gt;
</code></pre><p>Build the web site and verify the results.</p>
<pre tabindex="0"><code>$ rm -rf public
$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 found taxonomies: map[string]string{&quot;tag&quot;:&quot;tags&quot;, &quot;category&quot;:&quot;categories&quot;}
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
2 pages created
0 tags created
0 categories created
in 4 ms

$ find public -type f -name '*.html' | xargs ls -l
-rw-r--r--  1 quoha  staff  149 Sep 29 22:44 public/index.html
-rw-r--r--  1 quoha  staff  125 Sep 29 22:44 public/post/first/index.html
-rw-r--r--  1 quoha  staff    0 Sep 29 22:44 public/post/index.html
-rw-r--r--  1 quoha  staff  128 Sep 29 22:44 public/post/second/index.html

$ cat public/index.html
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;body&gt;

    &lt;h1&gt;&lt;a href=&quot;/post/second/&quot;&gt;second&lt;/a&gt;&lt;/h1&gt;

    &lt;h1&gt;&lt;a href=&quot;/post/first/&quot;&gt;first&lt;/a&gt;&lt;/h1&gt;

&lt;/body&gt;
&lt;/html&gt;

$
</code></pre><h3 id="create-a-post-listing">Create a Post Listing</h3>
<p>We have the posts displaying on the home page and on their own page. We also have a file public/post/index.html that is empty. Let&rsquo;s make it show a list of all posts (not just the first ten).</p>
<p>We need to decide which template to update. This will be a listing, so it should be a list template. Let&rsquo;s take a quick look and see which list templates are available.</p>
<pre tabindex="0"><code>$ find themes/zafta -name list.html | xargs ls -l
-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes/zafta/layouts/_default/list.html
</code></pre><p>As with the single post, we have to decide to update _default/list.html or create post/list.html. We still don&rsquo;t have multiple content types, so let&rsquo;s stay consistent and update the default list template.</p>
<h2 id="creating-top-level-pages">Creating Top Level Pages</h2>
<p>Let&rsquo;s add an &ldquo;about&rdquo; page and display it at the top level (as opposed to a sub-level like we did with posts).</p>
<p>The default in Hugo is to use the directory structure of the content/ directory to guide the location of the generated html in the public/ directory. Let&rsquo;s verify that by creating an &ldquo;about&rdquo; page at the top level:</p>
<pre tabindex="0"><code>$ vi content/about.md
+++
title = &quot;about&quot;
description = &quot;about this site&quot;
date = &quot;2014-09-27&quot;
slug = &quot;about time&quot;
+++

## about us

i'm speechless
:wq
</code></pre><p>Generate the web site and verify the results.</p>
<pre tabindex="0"><code>$ find public -name '*.html' | xargs ls -l
-rw-rw-r--  1 mdhender  staff   334 Sep 27 15:08 public/about-time/index.html
-rw-rw-r--  1 mdhender  staff   527 Sep 27 15:08 public/index.html
-rw-rw-r--  1 mdhender  staff   358 Sep 27 15:08 public/post/first-post/index.html
-rw-rw-r--  1 mdhender  staff     0 Sep 27 15:08 public/post/index.html
-rw-rw-r--  1 mdhender  staff   342 Sep 27 15:08 public/post/second-post/index.html
</code></pre><p>Notice that the page wasn&rsquo;t created at the top level. It was created in a sub-directory named &lsquo;about-time/&rsquo;. That name came from our slug. Hugo will use the slug to name the generated content. It&rsquo;s a reasonable default, by the way, but we can learn a few things by fighting it for this file.</p>
<p>One other thing. Take a look at the home page.</p>
<pre tabindex="0"><code>$ cat public/index.html
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;body&gt;
    &lt;h1&gt;&lt;a href=&quot;http://localhost:1313/post/theme/&quot;&gt;creating a new theme&lt;/a&gt;&lt;/h1&gt;
    &lt;h1&gt;&lt;a href=&quot;http://localhost:1313/about-time/&quot;&gt;about&lt;/a&gt;&lt;/h1&gt;
    &lt;h1&gt;&lt;a href=&quot;http://localhost:1313/post/second-post/&quot;&gt;second&lt;/a&gt;&lt;/h1&gt;
    &lt;h1&gt;&lt;a href=&quot;http://localhost:1313/post/first-post/&quot;&gt;first&lt;/a&gt;&lt;/h1&gt;
&lt;script&gt;document.write('&lt;script src=&quot;http://'
        + (location.host || 'localhost').split(':')[0]
		+ ':1313/livereload.js?mindelay=10&quot;&gt;&lt;/'
        + 'script&gt;')&lt;/script&gt;&lt;/body&gt;
&lt;/html&gt;
</code></pre><p>Notice that the &ldquo;about&rdquo; link is listed with the posts? That&rsquo;s not desirable, so let&rsquo;s change that first.</p>
<pre tabindex="0"><code>$ vi themes/zafta/layouts/index.html
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;body&gt;
  &lt;h1&gt;posts&lt;/h1&gt;
  {{ range first 10 .Data.Pages }}
    {{ if eq .Type &quot;post&quot;}}
      &lt;h2&gt;&lt;a href=&quot;{{ .Permalink }}&quot;&gt;{{ .Title }}&lt;/a&gt;&lt;/h2&gt;
    {{ end }}
  {{ end }}

  &lt;h1&gt;pages&lt;/h1&gt;
  {{ range .Data.Pages }}
    {{ if eq .Type &quot;page&quot; }}
      &lt;h2&gt;&lt;a href=&quot;{{ .Permalink }}&quot;&gt;{{ .Title }}&lt;/a&gt;&lt;/h2&gt;
    {{ end }}
  {{ end }}
&lt;/body&gt;
&lt;/html&gt;
:wq
</code></pre><p>Generate the web site and verify the results. The home page has two sections, posts and pages, and each section has the right set of headings and links in it.</p>
<p>But, that about page still renders to about-time/index.html.</p>
<pre tabindex="0"><code>$ find public -name '*.html' | xargs ls -l
-rw-rw-r--  1 mdhender  staff    334 Sep 27 15:33 public/about-time/index.html
-rw-rw-r--  1 mdhender  staff    645 Sep 27 15:33 public/index.html
-rw-rw-r--  1 mdhender  staff    358 Sep 27 15:33 public/post/first-post/index.html
-rw-rw-r--  1 mdhender  staff      0 Sep 27 15:33 public/post/index.html
-rw-rw-r--  1 mdhender  staff    342 Sep 27 15:33 public/post/second-post/index.html
</code></pre><p>Knowing that hugo is using the slug to generate the file name, the simplest solution is to change the slug. Let&rsquo;s do it the hard way and change the permalink in the configuration file.</p>
<pre tabindex="0"><code>$ vi config.toml
[permalinks]
	page = &quot;/:title/&quot;
	about = &quot;/:filename/&quot;
</code></pre><p>Generate the web site and verify that this didn&rsquo;t work. Hugo lets &ldquo;slug&rdquo; or &ldquo;URL&rdquo; override the permalinks setting in the configuration file. Go ahead and comment out the slug in content/about.md, then generate the web site to get it to be created in the right place.</p>
<h2 id="sharing-templates">Sharing Templates</h2>
<p>If you&rsquo;ve been following along, you probably noticed that posts have titles in the browser and the home page doesn&rsquo;t. That&rsquo;s because we didn&rsquo;t put the title in the home page&rsquo;s template (layouts/index.html). That&rsquo;s an easy thing to do, but let&rsquo;s look at a different option.</p>
<p>We can put the common bits into a shared template that&rsquo;s stored in the themes/zafta/layouts/partials/ directory.</p>
<h3 id="create-the-header-and-footer-partials">Create the Header and Footer Partials</h3>
<p>In Hugo, a partial is a sugar-coated template. Normally a template reference has a path specified. Partials are different. Hugo searches for them along a TODO defined search path. This makes it easier for end-users to override the theme&rsquo;s presentation.</p>
<pre tabindex="0"><code>$ vi themes/zafta/layouts/partials/header.html
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
	&lt;title&gt;{{ .Title }}&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
:wq

$ vi themes/zafta/layouts/partials/footer.html
&lt;/body&gt;
&lt;/html&gt;
:wq
</code></pre><h3 id="update-the-home-page-template-to-use-the-partials">Update the Home Page Template to Use the Partials</h3>
<p>The most noticeable difference between a template call and a partials call is the lack of path:</p>
<pre tabindex="0"><code>{{ template &quot;theme/partials/header.html&quot; . }}
</code></pre><p>versus</p>
<pre tabindex="0"><code>{{ partial &quot;header.html&quot; . }}
</code></pre><p>Both pass in the context.</p>
<p>Let&rsquo;s change the home page template to use these new partials.</p>
<pre tabindex="0"><code>$ vi themes/zafta/layouts/index.html
{{ partial &quot;header.html&quot; . }}

  &lt;h1&gt;posts&lt;/h1&gt;
  {{ range first 10 .Data.Pages }}
    {{ if eq .Type &quot;post&quot;}}
      &lt;h2&gt;&lt;a href=&quot;{{ .Permalink }}&quot;&gt;{{ .Title }}&lt;/a&gt;&lt;/h2&gt;
    {{ end }}
  {{ end }}

  &lt;h1&gt;pages&lt;/h1&gt;
  {{ range .Data.Pages }}
    {{ if or (eq .Type &quot;page&quot;) (eq .Type &quot;about&quot;) }}
      &lt;h2&gt;&lt;a href=&quot;{{ .Permalink }}&quot;&gt;{{ .Type }} - {{ .Title }} - {{ .RelPermalink }}&lt;/a&gt;&lt;/h2&gt;
    {{ end }}
  {{ end }}

{{ partial &quot;footer.html&quot; . }}
:wq
</code></pre><p>Generate the web site and verify the results. The title on the home page is now &ldquo;your title here&rdquo;, which comes from the &ldquo;title&rdquo; variable in the config.toml file.</p>
<h3 id="update-the-default-single-template-to-use-the-partials">Update the Default Single Template to Use the Partials</h3>
<pre tabindex="0"><code>$ vi themes/zafta/layouts/_default/single.html
{{ partial &quot;header.html&quot; . }}

  &lt;h1&gt;{{ .Title }}&lt;/h1&gt;
  {{ .Content }}

{{ partial &quot;footer.html&quot; . }}
:wq
</code></pre><p>Generate the web site and verify the results. The title on the posts and the about page should both reflect the value in the markdown file.</p>
<h2 id="add-date-published-to-posts">Add “Date Published” to Posts</h2>
<p>It&rsquo;s common to have posts display the date that they were written or published, so let&rsquo;s add that. The front matter of our posts has a variable named &ldquo;date.&rdquo; It&rsquo;s usually the date the content was created, but let&rsquo;s pretend that&rsquo;s the value we want to display.</p>
<h3 id="add-date-published-to-the-template">Add “Date Published” to the Template</h3>
<p>We&rsquo;ll start by updating the template used to render the posts. The template code will look like:</p>
<pre tabindex="0"><code>{{ .Date.Format &quot;Mon, Jan 2, 2006&quot; }}
</code></pre><p>Posts use the default single template, so we&rsquo;ll change that file.</p>
<pre tabindex="0"><code>$ vi themes/zafta/layouts/_default/single.html
{{ partial &quot;header.html&quot; . }}

  &lt;h1&gt;{{ .Title }}&lt;/h1&gt;
  &lt;h2&gt;{{ .Date.Format &quot;Mon, Jan 2, 2006&quot; }}&lt;/h2&gt;
  {{ .Content }}

{{ partial &quot;footer.html&quot; . }}
:wq
</code></pre><p>Generate the web site and verify the results. The posts now have the date displayed in them. There&rsquo;s a problem, though. The &ldquo;about&rdquo; page also has the date displayed.</p>
<p>As usual, there are a couple of ways to make the date display only on posts. We could do an &ldquo;if&rdquo; statement like we did on the home page. Another way would be to create a separate template for posts.</p>
<p>The &ldquo;if&rdquo; solution works for sites that have just a couple of content types. It aligns with the principle of &ldquo;code for today,&rdquo; too.</p>
<p>Let&rsquo;s assume, though, that we&rsquo;ve made our site so complex that we feel we have to create a new template type. In Hugo-speak, we&rsquo;re going to create a section template.</p>
<p>Let&rsquo;s restore the default single template before we forget.</p>
<pre tabindex="0"><code>$ mkdir themes/zafta/layouts/post
$ vi themes/zafta/layouts/_default/single.html
{{ partial &quot;header.html&quot; . }}

  &lt;h1&gt;{{ .Title }}&lt;/h1&gt;
  {{ .Content }}

{{ partial &quot;footer.html&quot; . }}
:wq
</code></pre><p>Now we&rsquo;ll update the post&rsquo;s version of the single template. If you remember Hugo&rsquo;s rules, the template engine will use this version over the default.</p>
<pre tabindex="0"><code>$ vi themes/zafta/layouts/post/single.html
{{ partial &quot;header.html&quot; . }}

  &lt;h1&gt;{{ .Title }}&lt;/h1&gt;
  &lt;h2&gt;{{ .Date.Format &quot;Mon, Jan 2, 2006&quot; }}&lt;/h2&gt;
  {{ .Content }}

{{ partial &quot;footer.html&quot; . }}
:wq

</code></pre><p>Note that we removed the date logic from the default template and put it in the post template. Generate the web site and verify the results. Posts have dates and the about page doesn&rsquo;t.</p>
<h3 id="dont-repeat-yourself">Don&rsquo;t Repeat Yourself</h3>
<p>DRY is a good design goal and Hugo does a great job supporting it. Part of the art of a good template is knowing when to add a new template and when to update an existing one. While you&rsquo;re figuring that out, accept that you&rsquo;ll be doing some refactoring. Hugo makes that easy and fast, so it&rsquo;s okay to delay splitting up a template.</p>
]]></content>
        </item>
        
        <item>
            <title>Migrate to Hugo from Jekyll</title>
            <link>https://www.omarmorando.com/posts/2014/03/migrate-to-hugo-from-jekyll/</link>
            <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
            
            <guid>https://www.omarmorando.com/posts/2014/03/migrate-to-hugo-from-jekyll/</guid>
            <description>Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png  should become
▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png  Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description>
            <content type="html"><![CDATA[<h2 id="move-static-content-to-static">Move static content to <code>static</code></h2>
<p>Jekyll has a rule that any directory not starting with <code>_</code> will be copied as-is to the <code>_site</code> output. Hugo keeps all static content under <code>static</code>. You should therefore move it all there.
With Jekyll, something that looked like</p>
<pre><code>▾ &lt;root&gt;/
    ▾ images/
        logo.png
</code></pre>
<p>should become</p>
<pre><code>▾ &lt;root&gt;/
    ▾ static/
        ▾ images/
            logo.png
</code></pre>
<p>Additionally, you&rsquo;ll want any files that should reside at the root (such as <code>CNAME</code>) to be moved to <code>static</code>.</p>
<h2 id="create-your-hugo-configuration-file">Create your Hugo configuration file</h2>
<p>Hugo can read your configuration as JSON, YAML or TOML. Hugo supports parameters custom configuration too. Refer to the <a href="/overview/configuration/">Hugo configuration documentation</a> for details.</p>
<h2 id="set-your-configuration-publish-folder-to-_site">Set your configuration publish folder to <code>_site</code></h2>
<p>The default is for Jekyll to publish to <code>_site</code> and for Hugo to publish to <code>public</code>. If, like me, you have <a href="http://blog.blindgaenger.net/generate_github_pages_in_a_submodule.html"><code>_site</code> mapped to a git submodule on the <code>gh-pages</code> branch</a>, you&rsquo;ll want to do one of two alternatives:</p>
<ol>
<li>
<p>Change your submodule to point to map <code>gh-pages</code> to public instead of <code>_site</code> (recommended).</p>
<pre><code> git submodule deinit _site
 git rm _site
 git submodule add -b gh-pages git@github.com:your-username/your-repo.git public
</code></pre>
</li>
<li>
<p>Or, change the Hugo configuration to use <code>_site</code> instead of <code>public</code>.</p>
<pre><code> {
     ..
     &quot;publishdir&quot;: &quot;_site&quot;,
     ..
 }
</code></pre>
</li>
</ol>
<h2 id="convert-jekyll-templates-to-hugo-templates">Convert Jekyll templates to Hugo templates</h2>
<p>That&rsquo;s the bulk of the work right here. The documentation is your friend. You should refer to <a href="http://jekyllrb.com/docs/templates/">Jekyll&rsquo;s template documentation</a> if you need to refresh your memory on how you built your blog and <a href="/layout/templates/">Hugo&rsquo;s template</a> to learn Hugo&rsquo;s way.</p>
<p>As a single reference data point, converting my templates for <a href="http://heyitsalex.net/">heyitsalex.net</a> took me no more than a few hours.</p>
<h2 id="convert-jekyll-plugins-to-hugo-shortcodes">Convert Jekyll plugins to Hugo shortcodes</h2>
<p>Jekyll has <a href="http://jekyllrb.com/docs/plugins/">plugins</a>; Hugo has <a href="/doc/shortcodes/">shortcodes</a>. It&rsquo;s fairly trivial to do a port.</p>
<h3 id="implementation">Implementation</h3>
<p>As an example, I was using a custom <a href="https://github.com/alexandre-normand/alexandre-normand/blob/74bb12036a71334fdb7dba84e073382fc06908ec/_plugins/image_tag.rb"><code>image_tag</code></a> plugin to generate figures with caption when running Jekyll. As I read about shortcodes, I found Hugo had a nice built-in shortcode that does exactly the same thing.</p>
<p>Jekyll&rsquo;s plugin:</p>
<pre><code>module Jekyll
  class ImageTag &lt; Liquid::Tag
    @url = nil
    @caption = nil
    @class = nil
    @link = nil
    // Patterns
    IMAGE_URL_WITH_CLASS_AND_CAPTION =
    IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK = /(\w+)(\s+)((https?:\/\/|\/)(\S+))(\s+)&quot;(.*?)&quot;(\s+)-&gt;((https?:\/\/|\/)(\S+))(\s*)/i
    IMAGE_URL_WITH_CAPTION = /((https?:\/\/|\/)(\S+))(\s+)&quot;(.*?)&quot;/i
    IMAGE_URL_WITH_CLASS = /(\w+)(\s+)((https?:\/\/|\/)(\S+))/i
    IMAGE_URL = /((https?:\/\/|\/)(\S+))/i
    def initialize(tag_name, markup, tokens)
      super
      if markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK
        @class   = $1
        @url     = $3
        @caption = $7
        @link = $9
      elsif markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION
        @class   = $1
        @url     = $3
        @caption = $7
      elsif markup =~ IMAGE_URL_WITH_CAPTION
        @url     = $1
        @caption = $5
      elsif markup =~ IMAGE_URL_WITH_CLASS
        @class = $1
        @url   = $3
      elsif markup =~ IMAGE_URL
        @url = $1
      end
    end
    def render(context)
      if @class
        source = &quot;&lt;figure class='#{@class}'&gt;&quot;
      else
        source = &quot;&lt;figure&gt;&quot;
      end
      if @link
        source += &quot;&lt;a href=\&quot;#{@link}\&quot;&gt;&quot;
      end
      source += &quot;&lt;img src=\&quot;#{@url}\&quot;&gt;&quot;
      if @link
        source += &quot;&lt;/a&gt;&quot;
      end
      source += &quot;&lt;figcaption&gt;#{@caption}&lt;/figcaption&gt;&quot; if @caption
      source += &quot;&lt;/figure&gt;&quot;
      source
    end
  end
end
Liquid::Template.register_tag('image', Jekyll::ImageTag)
</code></pre>
<p>is written as this Hugo shortcode:</p>
<pre><code>&lt;!-- image --&gt;
&lt;figure {{ with .Get &quot;class&quot; }}class=&quot;{{.}}&quot;{{ end }}&gt;
    {{ with .Get &quot;link&quot;}}&lt;a href=&quot;{{.}}&quot;&gt;{{ end }}
        &lt;img src=&quot;{{ .Get &quot;src&quot; }}&quot; {{ if or (.Get &quot;alt&quot;) (.Get &quot;caption&quot;) }}alt=&quot;{{ with .Get &quot;alt&quot;}}{{.}}{{else}}{{ .Get &quot;caption&quot; }}{{ end }}&quot;{{ end }} /&gt;
    {{ if .Get &quot;link&quot;}}&lt;/a&gt;{{ end }}
    {{ if or (or (.Get &quot;title&quot;) (.Get &quot;caption&quot;)) (.Get &quot;attr&quot;)}}
    &lt;figcaption&gt;{{ if isset .Params &quot;title&quot; }}
        {{ .Get &quot;title&quot; }}{{ end }}
        {{ if or (.Get &quot;caption&quot;) (.Get &quot;attr&quot;)}}&lt;p&gt;
        {{ .Get &quot;caption&quot; }}
        {{ with .Get &quot;attrlink&quot;}}&lt;a href=&quot;{{.}}&quot;&gt; {{ end }}
            {{ .Get &quot;attr&quot; }}
        {{ if .Get &quot;attrlink&quot;}}&lt;/a&gt; {{ end }}
        &lt;/p&gt; {{ end }}
    &lt;/figcaption&gt;
    {{ end }}
&lt;/figure&gt;
&lt;!-- image --&gt;
</code></pre>
<h3 id="usage">Usage</h3>
<p>I simply changed:</p>
<pre><code>{% image full http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg &quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were &quot;having fun&quot; and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.&quot; -&gt;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/ %}
</code></pre>
<p>to this (this example uses a slightly extended version named <code>fig</code>, different than the built-in <code>figure</code>):</p>
<pre><code>{{% fig class=&quot;full&quot; src=&quot;http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg&quot; title=&quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were having fun and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.&quot; link=&quot;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/&quot; %}}
</code></pre>
<p>As a bonus, the shortcode named parameters are, arguably, more readable.</p>
<h2 id="finishing-touches">Finishing touches</h2>
<h3 id="fix-content">Fix content</h3>
<p>Depending on the amount of customization that was done with each post with Jekyll, this step will require more or less effort. There are no hard and fast rules here except that <code>hugo server --watch</code> is your friend. Test your changes and fix errors as needed.</p>
<h3 id="clean-up">Clean up</h3>
<p>You&rsquo;ll want to remove the Jekyll configuration at this point. If you have anything else that isn&rsquo;t used, delete it.</p>
<h2 id="a-practical-example-in-a-diff">A practical example in a diff</h2>
<p><a href="http://heyitsalex.net/">Hey, it&rsquo;s Alex</a> was migrated in less than a <em>father-with-kids day</em> from Jekyll to Hugo. You can see all the changes (and screw-ups) by looking at this <a href="https://github.com/alexandre-normand/alexandre-normand/compare/869d69435bd2665c3fbf5b5c78d4c22759d7613a...b7f6605b1265e83b4b81495423294208cc74d610">diff</a>.</p>
]]></content>
        </item>
        
        <item>
            <title>Modulo SCADAsploit: Modbus Payload Transfer</title>
            <link>https://www.omarmorando.com/posts/2022/04/modulo-scadasploit-modbus-payload-transfer/</link>
            <pubDate>Fri, 22 Apr 2022 15:09:35 +0200</pubDate>
            
            <guid>https://www.omarmorando.com/posts/2022/04/modulo-scadasploit-modbus-payload-transfer/</guid>
            <description>Il secondo modulo che andiamo ad esplorare si chiama &amp;ldquo;Modbus Payload Transfer&amp;rdquo; e appartiene alla categoria degli auxiliary.
A cosa serve Il modulo &amp;ldquo;Modbus Payload Transfer&amp;rdquo; è uno script che permette di memorizzare e recuperare un payload/shellcode negli &amp;ldquo;holding registers&amp;rdquo; di un PLC tramite il protocollo Modbus TCP. Esistono numerosissimi PLC esposti a Internet, con questo modulo è possibile sfruttare la loro memoria per fare un upload di un payload (shellcode/malware) in modo che possa essere recuperato in un secondo momento.</description>
            <content type="html"><![CDATA[<p>Il secondo modulo che andiamo ad esplorare si chiama &ldquo;<strong>Modbus Payload Transfer</strong>&rdquo; e appartiene alla categoria degli auxiliary.</p>
<h2 id="a-cosa-serve">A cosa serve</h2>
<p>Il modulo &ldquo;<strong>Modbus Payload Transfer</strong>&rdquo; è uno script che permette di memorizzare e recuperare un payload/shellcode negli &ldquo;holding registers&rdquo; di un PLC tramite il protocollo Modbus TCP. Esistono numerosissimi PLC esposti a Internet, con questo modulo è possibile sfruttare la loro memoria per fare un upload di un payload (shellcode/malware) in modo che possa essere recuperato in un secondo momento.</p>
<p>Uno scenario di utilizzo potrebbe prevedere i seguenti steps:</p>
<ol>
<li>Un attaccante individua un PLC esposto su Internet con spazio sufficiente per memorizzare un determinato payload.</li>
<li>L&rsquo;attaccante carica il payload nella memoria del PLC.</li>
<li>L&rsquo;attaccante infetta un host in grado di comunicare in Modbus TCP recuperando il payload dal PLC per poi eseguirlo.</li>
</ol>
<p>La stessa cosa ovviamente potrebbe avvenire anche con un PLC non esposto su Internet ma presente in una rete locale. I principali vantaggi di questo metodo sono:</p>
<ol>
<li>L&rsquo;uso di PLC di terze parti fornisce l&rsquo;anonimato e rende difficile la tracciabilità. Non è necessario caricare il payload su un server.</li>
<li>Il payload è archiviato nella memoria del PLC, rendendo difficile l&rsquo;analisi forense. Inoltre, una volta recuperato il payload il suo contenuto potrebbe essere sovrascritto facilmente (anche dall&rsquo;host stesso).</li>
</ol>
<p>Questo approccio potrebbe essere utile anche in alcuni ambienti ICS in cui protocolli diversi da Modbus potrebbero mettere in allerta sistemi IDS/IPS. In un contesto di questo tipo hai solo bisogno di un device Modbus o anche semplicemente di un emulatore che può fungere da server quando il target host si connette ad esso. Esistono poi dei PLC direttamente esposti in Internet e gestiti da remoto che possono diventare un buon posto dove despositare un payload/malware.</p>
<p><strong>Nota importante</strong>: non eseguire nessuna di queste azioni su PLC di terze parti. Qualsiasi scrittura sui registri dei PLC può interrompere la strategia di controllo del processo per cui è stata programmata.</p>
<h2 id="come-funziona">Come funziona</h2>
<p>Per prima cosa possiamo cercare il modulo interessato usando il comando <code>search modbus</code>, che presenterà l&rsquo;elenco dei moduli ausiliari e gli exploits che fanno uso di questo protocollo. Una volta individuato ciò che cerchiamo lo selezioniamo col comando <code>use auxiliary/modbus/modbus_payload_transfer</code>. Il comando <code>show info</code> ci fornisce alcuni dettagli sul funzionamento del modulo.</p>
<p><img src="/uploads/2021/scadasploit_payload_1.png" alt=""></p>
<p>A questo punto passiamo a configurare il modulo. Il comando <code>show options</code> visualizza la lista dei parametri, in questo caso troviamo:</p>
<ul>
<li>ADDRESS: indirizzo di partenza dell&rsquo;holding register per l&rsquo;upload/download del payload</li>
<li>FILENAME: il nostro file contenente il payload (si raccomandano dimensioni di qualche Kb)</li>
<li>MODE: per selezionare se eseguire un upload o un download dal PLC</li>
<li>NBYTES: il numero di bytes che dobbiamo scaricare durante un download (non necessario per l&rsquo;upload)</li>
<li>RHOST ed RPORT per impostare l&rsquo;indirizzo IP e la porta TCP del nostro PLC</li>
</ul>
<p><img src="/uploads/2021/scadasploit_payload_2.png" alt=""></p>
<p>Quando abbiamo configurato correttamente la lista dei parametri non ci resta che eseguire il nostro modulo ausiliario, usando il comando <code>run</code>. In questo caso stiamo eseguendo un upload di un file chiamato <code>payload.bin</code> della dimensione di 300 bytes, su un PLC con indirizzo 10.43.10.58 a partire dall&rsquo;holding register 200.</p>
<p><img src="/uploads/2021/scadasploit_payload_3.png" alt=""></p>
<p>Per la caratteristica del protocollo Modbus il file viene suddiviso in pacchetti da 250 bytes. Se il payload ha un numero dispari di byte verrà aggiunto un carattere &ldquo;0x90&rdquo; per evitare problemi durante il recupero.</p>
<p>A seconda del tipo di PLC in uso avremo a disposizione una quantità maggiore o minore di memoria accessibile, pertanto lo script verificherà prima che vi sia spazio sufficiente per il payload. Per verificare le dimensioni viene inviata una richiesta Modbus con un ID operazione 03 (Read Holding Register), tentando di leggere un determinato record a partire dall&rsquo;indirizzo che abbiamo impostato come parametro (ogni record è di 16 bit). Se si ottiene un&rsquo;eccezione 0x83 significa che il PLC non è in grado di contenere il nostro payload e l&rsquo;operazione fallisce.</p>
<blockquote>
<p>Il recupero del payload avviene usando lo stesso modulo &ldquo;<strong>Modbus Payload Transfer</strong>&rdquo;, andando semplicemente a selezionare la modalità MODE = DOWN e la quantità di bytes che dobbiamo scaricare tramite il parametro NBYTES.</p>
<p>Anche in questo caso il download avviene a blocchi di 250 bytes (125 holding registers) per volta. Il file viene poi ricomposto e salvato integralmente.</p>
</blockquote>
<h2 id="attenzione-alla-perdita-dei-dati">Attenzione alla perdita dei dati</h2>
<p>Oltre a utilizzare lo script per caricare un determinato payload come ad esempio un malware o una shellcode, è ovvio che può essere utilizzato anche per caricare qualsiasi tipo di file di dimensioni contenute. Penso che sia un modo interessante per esfiltrare e condividere informazioni. Chi sospetterebbe che gli holding registers di un determinato PLC  memorizzino un file .docx o .zip?</p>
<p>È importante notare che gli holding registers in cui viene caricato il payload possono essere modificati dal PLC stesso. Dato che non conosciamo la gestione della memoria e la strategia di controllo del processo è probabile che dobbiamo cercare un intervallo di memoria che non sia suscettibile di modifiche. L&rsquo;idea potrebbe essere quella di caricare il payload in una determinata sezione dei registri e quindi verificare, per qualche tempo, che il payload non subisca alcuna modifica.</p>
<h2 id="nota-importante"><strong>Nota importante</strong></h2>
<p>Lo scopo di questo articolo è unicamente didattico e informativo. <strong>Ogni azione non autorizzata</strong> verso qualunque sistema di controllo presente su una rete pubblica o privata <strong>è illegale</strong>! Le informazioni contenute in questo ed altri articoli hanno lo scopo di far comprendere quanto sia necessario migliorare i sistemi di difesa, e non di fornire strumenti per effettuarne l&rsquo;attacco. Violare un sistema informatico è perseguibile penalmente e può causare gravi danni a cose e persone, in modo particolare se si parla di ICS. Tutti i test che vengono illustrati nei tutorials sono stati effettuati in laboratori isolati, sicuri, o autorizzati dal produttore.</p>
<p>Stay safe, stay free.</p>
]]></content>
        </item>
        
        <item>
            <title>Modulo SCADAsploit: Modbus Scan</title>
            <link>https://www.omarmorando.com/posts/2022/04/modulo-scadasploit-modbus-scan/</link>
            <pubDate>Sun, 17 Apr 2022 15:09:35 +0200</pubDate>
            
            <guid>https://www.omarmorando.com/posts/2022/04/modulo-scadasploit-modbus-scan/</guid>
            <description>Iniziamo a conoscere un po&#39; meglio ScadaSploit partendo da uno dei moduli ausiliari presenti: Modbus Scan.
Posizioniamoci nella cartella dove abbiamo installato ScadaSploit e avviamolo tramite il comando $ ./scadasploit.py. Seguendo la stessa filosofia di approccio di Metasploit, possiamo cercare tutti i moduli che contengono una parola chiave usando il comando search &amp;lt;keyword&amp;gt; oppure visualizzare l&amp;rsquo;elenco completo dei moduli presenti con il comando show modules.
Nel nostro caso useremo search modbus per individuare i moduli di ScadaSploit che possono aiutarci durante il nostro lavoro di pentesting su una rete Modbus TCP.</description>
            <content type="html"><![CDATA[<p>Iniziamo a conoscere un po' meglio ScadaSploit partendo da uno dei moduli ausiliari presenti: <strong>Modbus Scan</strong>.</p>
<p>Posizioniamoci nella cartella dove abbiamo installato ScadaSploit e avviamolo tramite il comando <code>$ ./scadasploit.py</code>. Seguendo la stessa filosofia di approccio di Metasploit, possiamo cercare tutti i moduli che contengono una parola chiave usando il comando <code>search &lt;keyword&gt;</code> oppure visualizzare l&rsquo;elenco completo dei moduli presenti con il comando <code>show modules</code>.</p>
<p>Nel nostro caso useremo <code>search modbus</code> per individuare i moduli di ScadaSploit che possono aiutarci durante il nostro lavoro di pentesting su una rete Modbus TCP.</p>
<p><img src="/uploads/2021/scadasploit_scan_1.png" alt=""></p>
<p>L&rsquo;elenco comprende sia i moduli ausiliari sia gli exploit, riconoscibili tramite la colonna &ldquo;Path&rdquo;. Per il nostro primo test decidiamo di eseguire la scansione di una rete Modbus TCP, quindi selezioniamo il modulo <strong>Modbus Scan</strong> tramite il comando <code>use auxiliary/schneider/modbus_scan</code> e visualizziamo l&rsquo;elenco dei parametri tramite il comando <code>show options</code>. Come possiamo notare il modulo appartiene alla categoria degli &ldquo;auxiliary&rdquo;.</p>
<p><img src="/uploads/2021/scadasploit_scan_2.png" alt=""></p>
<p><strong>Modbus Scan</strong> è un modulo per la scansione di dispositivi connessi a una rete Modbus TCP. Può essere utilizzato per eseguire lo scanning di tutti i devices alla ricerca di informazioni sulla scheda di comunicazione, la versione del firmware, il MAC address.</p>
<p>La scansione della rete può avvenire specificando l&rsquo;indirizzo IP di un singolo dispositivo o un range di indirizzi usando la notazione CIDR (es. 10.43.10.0/23). In alternativa, è possibile inserire il nome di un file di testo che contiene l&rsquo;elenco degli indirizzi IP degli hosts, seguendo un semplice formato che specifica l&rsquo;indirizzo e l&rsquo;eventuale porta non standard.</p>
<pre tabindex="0"><code>10.43.10.100
10.40.11.58:5020
10.0.1.1/24
</code></pre><p>Nel nostro caso facciamo lo scanning di un singolo device.</p>
<p><img src="/uploads/2021/scadasploit_scan_3.png" alt=""></p>
<p>Ed ecco che in un attimo siamo in grado di riconoscere il nostro dispositivo, la versione del firmware installato e il MAC address, tutte informazioni utili per una successiva azione di exploit.</p>
<h2 id="plc-schneider-modicon-e-umas">PLC Schneider Modicon e UMAS</h2>
<p>I PLC della serie Schneider Modicon programmati con UnityPro e basati su Unity OS a partire dalla versione 2.6 utilizzano il protocollo <strong>UMAS</strong>. Si tratta di un protocollo a livello di kernel che prevede anche un livello di controllo amministrativo.</p>
<p>La struttura di UMAS sfrutta quella del Modbus ed è un derivato del vecchio protocollo Xway utilizzato sin dalle prime serie di PLC Telemechanique. La caratteristica principale è che utilizza il codice funzione <strong>90 (0x5a)</strong> del protocollo Modbus per inviare e ricevere un set molto più ricco di informazioni. L&rsquo;impacchettamento del payload è little-endian, il che può sembrare strano dal momento che Modbus è big-endian.</p>
<p>Il pacchetto UMAS inizia con un campo a 16 bit che specifica un &ldquo;UMAS Function Subcode&rdquo;, seguito da un numero variabile di byte che compongono il payload.</p>
<p><img src="/uploads/2021/scadasploit_scan_4.png" alt=""></p>
<p>Le richieste UMAS hanno quindi una struttura di questo tipo:</p>
<pre tabindex="0"><code>[TCP Packet] [Modbus Header] [5A] [UMAS CODE (16 bit)] [UMAS PAYLOAD (Variable)]
</code></pre><p>Tutte le risposte seguono invece questo schema:</p>
<pre tabindex="0"><code>[TCP Packet] [Modbus Header] [5A] [RETURN CODE (16 bit)] [UMAS PAYLOAD (Variable)]

 0x01 0xFE - OK
 0x01 0xFD - Error
</code></pre><p>Quando un PLC Schneider riceve un pacchetto Modbus controlla se il codice funzione è 0x5A e, in tal caso, utilizza alcune librerie specifiche per la gestione dell&rsquo;estensione UMAS. Esistono diversi &ldquo;UMAS codes&rdquo; in grado di eseguire numerose operazioni sul PLC, di seguito ne elenco alcuni:</p>
<table>
<thead>
<tr>
<th>UMAS code</th>
<th>Function</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>0x01</td>
<td>INIT_COMM</td>
<td>Initialize a UMAS communication</td>
</tr>
<tr>
<td>0x02</td>
<td>READ_ID</td>
<td>Request a PLC ID</td>
</tr>
<tr>
<td>0x03</td>
<td>READ_PROJECT_INFO</td>
<td>Read Project Information</td>
</tr>
<tr>
<td>0x04</td>
<td>READ_PLC_INFO</td>
<td>Get internal PLC Info</td>
</tr>
<tr>
<td>0x06</td>
<td>READ_CARD_INFO</td>
<td>Get internal PLC SD-Card Info</td>
</tr>
<tr>
<td>0x0A</td>
<td>REPEAT</td>
<td>Sends back data sent to PLC (used for synchronization)</td>
</tr>
<tr>
<td>0x10</td>
<td>TAKE_PLC_RESERVATION</td>
<td>Assign an owner to the PLC</td>
</tr>
<tr>
<td>0x11</td>
<td>RELEASE_PLC_RESERVATION</td>
<td>Release the reservation of a PLC</td>
</tr>
<tr>
<td>0x12</td>
<td>KEEP_ALIVE</td>
<td>Keep alive message</td>
</tr>
<tr>
<td>0x20</td>
<td>READ_MEMORY_BLOCK</td>
<td>Read a memory block of the PLC</td>
</tr>
<tr>
<td>0x22</td>
<td>READ_VARIABLES</td>
<td>Read system bits, system words and strategy variables</td>
</tr>
<tr>
<td>0x23</td>
<td>WRITE_VARIABLES</td>
<td>Write system bits, system words and strategy variables</td>
</tr>
<tr>
<td>0x24</td>
<td>READ_COILS_REGISTERS</td>
<td>Read coils and holding registers from PLC</td>
</tr>
<tr>
<td>0x25</td>
<td>WRITE_COILS_REGISTERS</td>
<td>Write coils and holding registers into PLC</td>
</tr>
<tr>
<td>0x30</td>
<td>INITIALIZE_UPLOAD</td>
<td>Initialize strategy upload (copy from PC to PLC)</td>
</tr>
<tr>
<td>0x31</td>
<td>UPLOAD_BLOCK</td>
<td>Upload a strategy block to the PLC</td>
</tr>
<tr>
<td>0x32</td>
<td>END_STRATEGY_UPLOAD</td>
<td>Finish strategy upload</td>
</tr>
<tr>
<td>0x33</td>
<td>INITIALIZE_DOWNLOAD</td>
<td>Initialize strategy download (copy from PLC to PC)</td>
</tr>
<tr>
<td>0x34</td>
<td>DOWNLOAD_BLOCK</td>
<td>Download a strategy block from the PLC</td>
</tr>
<tr>
<td>0x35</td>
<td>END_STRATEGY_DOWNLOAD</td>
<td>Finish strategy download</td>
</tr>
<tr>
<td>0x39</td>
<td>READ_ETH_MASTER_DATA</td>
<td>Read Ethernet master data</td>
</tr>
<tr>
<td>0x40</td>
<td>START_PLC</td>
<td>Starts the PLC</td>
</tr>
<tr>
<td>0x41</td>
<td>STOP_PLC</td>
<td>Stops the PLC</td>
</tr>
<tr>
<td>0x50</td>
<td>MONITOR_PLC</td>
<td>Monitors variables, systems bits and words</td>
</tr>
<tr>
<td>0x58</td>
<td>CHECK_PLC</td>
<td>Check PLC connection status</td>
</tr>
<tr>
<td>0x70</td>
<td>READ_IO_OBJECT</td>
<td>Read IO Object</td>
</tr>
<tr>
<td>0x71</td>
<td>WRITE_IO_OBJECT</td>
<td>Write IO Object</td>
</tr>
<tr>
<td>0x73</td>
<td>GET_STATUS_MODULE</td>
<td>Get status module</td>
</tr>
</tbody>
</table>
<h2 id="modbus-scan-di-scadasploit">Modbus Scan di ScadaSploit</h2>
<p>Il modulo <strong>Modbus Scan</strong> di ScadaSploit supporta l&rsquo;estensione UMAS e questo ci permette di recuperare ulteriori dettagli quando abbiamo a che fare con un PLC programmato con UnityPro, come ad es. il nome del modulo CPU, il modello di scheda di memoria e alcuni dati sul file di progetto che è stato caricato.</p>
<p>La natura del protocollo Modbus che non prevede alcuna autenticazione facilita il gathering delle informazioni.</p>
<p><img src="/uploads/2021/scadasploit_scan_5.png" alt="Scanning di un PLC Modicon M580"></p>
<p>Come possiamo vedere, oltre ai dati standard siamo in grado di raccogliere dettagli importanti anche sul progetto. Facendo un esempio pratico di come utilizzare queste informazioni, la data dell&rsquo;ultima modifica ci fa capire da quando tempo il PLC è in funzione senza interventi di manutenzione al software. Questo può voler dire che potrebbe essere esposto a vulnerabilità note riscontrate in data successiva e che magari non sono state affrontate.</p>
<h2 id="nota-importante"><strong>Nota importante</strong></h2>
<p>Lo scopo di questo articolo è unicamente didattico e informativo. <strong>Ogni azione non autorizzata</strong> verso qualunque sistema di controllo presente su una rete pubblica o privata <strong>è illegale</strong>! Le informazioni contenute in questo ed altri articoli hanno lo scopo di far comprendere quanto sia necessario migliorare i sistemi di difesa, e non di fornire strumenti per effettuarne l&rsquo;attacco. Violare un sistema informatico è perseguibile penalmente e può causare gravi danni a cose e persone, in modo particolare se si parla di ICS. Tutti i test che vengono illustrati nei tutorials sono stati effettuati in laboratori isolati, sicuri, o autorizzati dal produttore.</p>
<p>Stay safe, stay free.</p>
]]></content>
        </item>
        
        <item>
            <title>SCADAsploit Framework</title>
            <link>https://www.omarmorando.com/posts/2022/04/scadasploit-framework/</link>
            <pubDate>Thu, 14 Apr 2022 15:09:35 +0200</pubDate>
            
            <guid>https://www.omarmorando.com/posts/2022/04/scadasploit-framework/</guid>
            <description>Questa sezione è dedicata a SCADAsploit, un framework su cui sto lavorando dedicato al penetration testing in ambito OT/ICS. Vi chiederete: &amp;ldquo;Ma non c&amp;rsquo;è già Metasploit che lo fa?&amp;rdquo;. Certo! E allora che bisogno c&amp;rsquo;è di creare un nuovo tool del genere? Provo a dare qualche risposta:
 framework esclusivamente dedicato alle vulnerabilità di SCADA, PLC e altri dispositivi ICS scritto in Python, sia il core del framework sia i moduli aggiuntivi interfaccia &amp;ldquo;Metasploit like&amp;rdquo; basata su Sploitkit focus maggiore su parco PLC installato, specialmente europeo open source.</description>
            <content type="html"><![CDATA[<p>Questa sezione è dedicata a <strong>SCADAsploit</strong>, un framework su cui sto lavorando dedicato al penetration testing in ambito OT/ICS. Vi chiederete: &ldquo;Ma non c&rsquo;è già Metasploit che lo fa?&rdquo;. Certo! E allora che bisogno c&rsquo;è di creare un nuovo tool del genere? Provo a dare qualche risposta:</p>
<ul>
<li>framework esclusivamente dedicato alle vulnerabilità di SCADA, PLC e altri dispositivi ICS</li>
<li>scritto in Python, sia il core del framework sia i moduli aggiuntivi</li>
<li>interfaccia &ldquo;Metasploit like&rdquo; basata su <a href="https://pypi.org/project/sploitkit/">Sploitkit</a></li>
<li>focus maggiore su parco PLC installato, specialmente europeo</li>
<li>open source.</li>
</ul>
<p>Non so se questi punti siano sufficienti a dare maggior senso al progetto, per me è stato così. Volevo raccogliere in un unico ambiente gli scripts che comunemente vengono utilizzati durante i pentest in automazione, e casualmente ho intercettato Sploitkit. </p>
<p>Metasploit attualmente conta quasi 70 moduli dedicati ai sistemi ICS, ma la maggior parter di essi sono per dispositivi praticamente inesistenti sul mercato italiano. Se consideriamo il parco dei PLC installato in Italia negli ultimi 20 anni, troviamo che Siemens + Schneider Electric ne fanno da padrone con quasi i 2/3 delle parti di mercato. Seguono Rockwell Automation (ex Allen-Bradley), GE, Omron soprattutto sulle macchine utensili, qualche Phoenix e Wago e poi pochi altri.</p>
<p>Da qui è nata l&rsquo;idea di SCADAsploit, un database di moduli ausiliari e di exploit dedicati ai principali produttori e protocolli di comunicazione, che faciliti le fasi di pentest. L&rsquo;uso di Python lo rende probabilmente più accessibile anche a scopo didattico.</p>
<p><img src="/uploads/2021/scadasploit_1.png" alt=""></p>
<h2 id="principali-moduli-attualmente-presenti">Principali moduli attualmente presenti</h2>
<p>Seguendo la stessa filosofia di approccio di Metasploit, anche in SCADAsploit troviamo due categorie di moduli: &ldquo;auxiliary&rdquo; ed &ldquo;exploit&rdquo;. I moduli ausiliari sono dedicati ad operazioni di ricognizione, scanning, lettura/scrittura di dati ecc., mentre gli exploit basano il loro comportamento sullo sfruttamente di una vulnerabilità.</p>
<p>In entrambe le categorie troviamo un&rsquo;ulteriore suddivisione in funzione dei diversi produttori di PLC, che al momento si limitano a Schneider Electric e Siemens.</p>
<p><img src="/uploads/2021/scadasploit_2.png" alt=""></p>
]]></content>
        </item>
        
        <item>
            <title>Hacking: attacco tipo Stuxnet a un PLC Modicon</title>
            <link>https://www.omarmorando.com/posts/2021/07/hacking-attacco-tipo-stuxnet-a-un-plc-modicon/</link>
            <pubDate>Sun, 11 Jul 2021 15:09:35 +0200</pubDate>
            
            <guid>https://www.omarmorando.com/posts/2021/07/hacking-attacco-tipo-stuxnet-a-un-plc-modicon/</guid>
            <description>I ricercatori di Airbus CyberSecurity hanno recentemente dimostrato che gli hacker potrebbero lanciare un attacco in stile Stuxnet contro i controllori logici programmabili (PLC) Modicon di Schneider Electric, ma si ritiene che anche i prodotti di altri fornitori potrebbero essere vulnerabili allo stesso tipo di attacco.
Come funziona Il famigerato malware Stuxnet, che gli Stati Uniti e Israele usavano per danneggiare il programma nucleare iraniano, è stato progettato per colpire i PLC SIMATIC S7-300 e S7-400 prodotti da Siemens.</description>
            <content type="html"><![CDATA[<p>I ricercatori di <a href="https://airbus-cyber-security.com/applying-a-stuxnet-type-attack-to-a-modicon-plc/">Airbus CyberSecurity</a> hanno recentemente dimostrato che gli hacker potrebbero lanciare un attacco in stile Stuxnet contro i controllori logici programmabili (PLC) Modicon di Schneider Electric, ma si ritiene che anche i prodotti di altri fornitori potrebbero essere vulnerabili allo stesso tipo di attacco.</p>
<h2 id="come-funziona">Come funziona</h2>
<p>Il famigerato malware <a href="https://blog.omarmorando.com/hacking/ot-ics-hacking/hacking-attaccare-un-plc-con-stuxnet">Stuxnet</a>, che gli Stati Uniti e Israele usavano per danneggiare il programma nucleare iraniano, è stato progettato per colpire i PLC SIMATIC S7-300 e S7-400 prodotti da Siemens. Stuxnet ha caricato codice dannoso su PLC mirati abusando del software STEP7 di Siemens, fornito dal colosso industriale tedesco per programmare i controller.</p>
<p><img src="/uploads/2021/stuxnet_schneider_1.png" alt=""></p>
<p>Come ho descritto nell&rsquo;articolo precedente, Stuxnet ha sostituito una libreria denominata s7otbxdx.dll, che STEP7 utilizza per accedere a un PLC, con una versione dannosa usando un metodo chiamato &ldquo;<strong>reflective DLL loading</strong>&rdquo;. Questa tecnica prevede di rinominare la DLL interessata (es. asmArm.dll) con un altro nome (es. asm_Arm.dll) e di creare una seconda DLL con il nome di quella originale (asmArm.dll) che, a sua volta, richiama le funzioni della prima. Ciò ha consentito agli aggressori di iniettare il loro codice dannoso nel controller di destinazione.</p>
<p><img src="/uploads/2021/stuxnet_schneider_2.png" alt=""></p>
<p>I ricercatori di Airbus CyberSecurity hanno analizzato il PLC Modicon M340 di Schneider Electric per determinare se è vulnerabile ad attacchi simili. L&rsquo;attacco ha preso di mira il controller tramite il software di ingegneria Schneider EcoStruxure Control Expert, precedentemente noto come Unity Pro.</p>
<p>La loro analisi ha portato alla scoperta di una vulnerabilità che può essere sfruttata per caricare codice dannoso sui PLC Modicon M340 e M580 sostituendo uno dei file DLL associati al software di ingegneria, seguendo lo stesso schema di Stuxnet.</p>
<p><img src="/uploads/2021/stuxnet_schneider_3.png" alt=""></p>
<p>&ldquo;Un simile attacco potrebbe avere gravi conseguenze, tra cui l&rsquo;interruzione dei processi di produzione o altri tipi di danni&rdquo;, ha dichiarato Airbus CyberSecurity.</p>
<p>&ldquo;Ancora più interessante dal punto di vista IT, l&rsquo;attaccante potrebbe trasformare il PLC in un proxy&rdquo;, hanno spiegato i ricercatori di Airbus. “Ciò gli consentirebbe di inviare richieste e comunicare con la rete a cui è collegato il PLC. Ad esempio, potrebbe accedere alla rete aziendale interna per rubare la proprietà intellettuale o lanciare attacchi per colpire altri sistemi connessi&quot;.</p>
<p>&ldquo;Il legittimo software di automazione sarebbe in esecuzione senza mostrare alcun segno della presenza di un programma dannoso. La parte malware invia periodicamente richieste a un server di comando e controllo gestito dall&rsquo;aggressore via Internet&rdquo;, hanno spiegato.</p>
<h2 id="come-portare-lattacco">Come portare l&rsquo;attacco</h2>
<p>Mentre un simile attacco potrebbe essere altamente dannoso o dirompente - o potrebbe dare un vantaggio all&rsquo;attaccante - lo sfruttamento della vulnerabilità non è un compito facile. L&rsquo;hacker deve prima ottenere l&rsquo;accesso al perimetro ICS dell&rsquo;organizzazione target ed essere in grado di comunicare con il PLC target.</p>
<p>&ldquo;Questa è già un&rsquo;operazione molto significativa che probabilmente implica l&rsquo;accesso privilegiato su un numero di macchine. Se gli aggressori hanno raggiunto questo punto, diverse misure di difesa di sicurezza non sono in atto o hanno fallito ”, hanno osservato i ricercatori di Airbus CyberSecurity.</p>
<p>L&rsquo;utente malintenzionato deve quindi scaricare il programma di automazione dal PLC. Questo può essere fatto da una stazione di ingegneria compromessa o se il PLC è accessibile a qualsiasi macchina sulla rete senza autenticazione. L&rsquo;autore dell&rsquo;attacco deve quindi ricompilare il programma di automazione utilizzando le tecniche descritte dai ricercatori Airbus e creare un programma dannoso da incorporare nel legittimo software di automazione.</p>
<p>Infine, l&rsquo;attaccante deve caricare il programma modificato sul PLC ed eseguirlo, ma ciò richiede l&rsquo;arresto e l&rsquo;avvio del software di automazione e gli esperti affermano che questa operazione potrebbe essere notata.</p>
<h2 id="le-soluzioni-in-atto">Le soluzioni in atto</h2>
<p>La vulnerabilità scoperta dai ricercatori Airbus nei prodotti Schneider Electric viene indicata come <a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-7475">CVE-2020-7475</a> e classificata come severa. È stata patchata dalla società con un aggiornamento rapido per EcoStruxure Control Expert e aggiornamenti del firmware per i controller Modicon M340 e M580, come indicato in <a href="https://www.se.com/ww/en/download/document/SEVD-2020-080-01/">questa nota</a>.</p>
<p>Schneider Electric e Airbus incoraggiano tutte le aziende clienti a implementare le migliori pratiche di cybersicurezza in tutte le loro operazioni nel tentativo di ridurre il rischio di attacchi.</p>
<p>&ldquo;Se necessario, ciò include la localizzazione di sistemi industriali e dispositivi accessibili in remoto dietro i firewall; installazione di controlli fisici per impedire accessi non autorizzati; impedire l&rsquo;accesso a sistemi e dispositivi mission-critical da reti esterne; applicazione sistematica di patch di sicurezza e attivazione di software antivirus; e l&rsquo;applicazione di soluzioni di whitelisting &ldquo;, ha detto Schneider.</p>
<h2 id="nota-importante"><strong>Nota importante</strong></h2>
<p>Lo scopo di questo articolo è unicamente didattico e informativo. <strong>Ogni azione non autorizzata</strong> verso qualunque sistema di controllo presente su una rete pubblica o privata <strong>è illegale</strong>! Le informazioni contenute in questo ed altri articoli hanno lo scopo di far com‌prendere quanto sia necessario migliorare i sistemi di difesa, e non di fornire strumenti per effettuarne l&rsquo;attacco. Violare un sistema informatico è perseguibile penalmente e può causare gravi danni a cose e persone, in modo particolare se si parla di ICS. Tutti i test che vengono illustrati nei tutorials sono stati effettuati in laboratori isolati, sicuri, o autorizzati dal produttore.</p>
<p>Stay safe, stay free.</p>
]]></content>
        </item>
        
        <item>
            <title>Hacking: Pentest con un PLC</title>
            <link>https://www.omarmorando.com/posts/2021/07/hacking-pentest-con-un-plc/</link>
            <pubDate>Sat, 10 Jul 2021 15:09:35 +0200</pubDate>
            
            <guid>https://www.omarmorando.com/posts/2021/07/hacking-pentest-con-un-plc/</guid>
            <description>Penetration Test con un PLC La protezione di un ambiente ICS, inclusi i PLC, non è banale, poiché questi sistemi non sono progettati per essere resistenti ad attacchi cyber. Ciò significa che bisogna in qualche modo integrare le misure di resilienza della cybersicurezza all&amp;rsquo;interno e intorno all&amp;rsquo;ICS. Tali misure includono, ad esempio:
 la difesa perimetrale come i firewall per ridurre il rischio di traffico di rete indesiderato; il monitoraggio della rete e preferibilmente di tipo non intrusivo, specifico per ICS, basato su anomalie in modo da non creare alcun carico aggiuntivo sulle reti ICS; ultimo ma non meno importante, la protezione e il monitoraggio degli endpoint per ridurre l&amp;rsquo;esposizione dei PLC agli attacchi tramite connessioni remote.</description>
            <content type="html"><![CDATA[<h2 id="penetration-test-con-un-plc">Penetration Test con un PLC</h2>
<p>La protezione di un ambiente ICS, inclusi i PLC, non è banale, poiché questi sistemi non sono progettati per essere resistenti ad attacchi cyber. Ciò significa che bisogna in qualche modo integrare le misure di resilienza della cybersicurezza all&rsquo;interno e intorno all&rsquo;ICS. Tali misure includono, ad esempio:</p>
<ul>
<li>la difesa perimetrale come i firewall per ridurre il rischio di traffico di rete indesiderato;</li>
<li>il monitoraggio della rete e preferibilmente di tipo non intrusivo, specifico per ICS, basato su anomalie in modo da non creare alcun carico aggiuntivo sulle reti ICS;</li>
<li>ultimo ma non meno importante, la protezione e il monitoraggio degli endpoint per ridurre l&rsquo;esposizione dei PLC agli attacchi tramite connessioni remote.</li>
</ul>
<p>Ma un altro aspetto molto importante è identificare e comprendere i rischi. <strong>Quali sono le superfici di attacco, i metodi attuati, le vulnerabilità e le potenziali conseguenze?</strong> Inoltre, è importante valutare e rivalutare continuamente la probabilità di potenziali attacchi.</p>
<p><img src="/uploads/2021/pt_1.png" alt=""></p>
<p>Un metodo per ottenere informazioni dettagliate sull&rsquo;esposizione al rischio è il <strong>test di penetrazione</strong>, il cui l&rsquo;obiettivo è identificare i vettori di attacco e simulare un vero e proprio attacco al sistema, controllato e consapevole. Tuttavia, i test di penetrazione in un ambiente ICS richiedono un approccio attento significativamente diverso rispetto alle tecniche di test di penetrazione standard per i sistemi IT. I sistemi ICS contengono apparecchiature delicate, come i PLC, dodate di un&rsquo;unità di elaborazione sensibile, che può causare congelamenti, ripristini della configurazione e guasti se sollecitati a causa della bassa gestione dello stack.</p>
<p>Test di penetrazione standard come una semplice scansione delle porte eseguita da strumenti come Nmap potrebbero essere sufficienti per sovraccaricare l&rsquo;unità di elaborazione. A causa della debole gestione dello stack di rete, alcuni dispositivi non sono in grado di sopportare il numero di pacchetti di rete generati da Nmap e strumenti simili. Pertanto, è consigliabile non eseguire test di penetrazione in un ambiente ICS live, ma eseguirli solo in un ambiente di laboratorio controllato o durante fermi macchina programmati.</p>
<p>Ci sono molte metodologie di test di penetrazione tra cui scegliere, anche se poche su misura per ICS. Una metodologia compatibile con ICS è la metodologia &ldquo;<strong>zero entry</strong>&rdquo; per i test di penetrazione. Essa comprende quattro fasi: <strong>reconnaissance, scanning, exploitation e post-exploitation</strong>.</p>
<p>Il post-exploitation potrebbe comportare il mantenimento dell&rsquo;accesso al sistema, che è ciò che fa un APT quando stabilisce un percorso per la comunicazione del centro di controllo e comando, che viene utilizzato per inviare informazioni di intelligence sul sistema di destinazione e per caricare nuovi exploit/malware. Inoltre, coprire le tracce per nascondere i passi dell&rsquo;attacco rappresenta il ​​quinto step.</p>
<p>La reconnaissance si concentra sulla raccolta di informazioni sulla destinazione, come ad esempio l&rsquo;indirizzo IP e i record DNS (Domain Name System) e la lettura delle vulnerabilità comuni per i PLC di destinazione. Lo scanning prevede la scansione attiva del target alla ricerca di porte aperte, il rilevamento del sistema operativo e l&rsquo;esecuzione dei servizi.</p>
<p>Nmap, incluso Nmap Script Engine (NSE), è un esempio di uno strumento che viene spesso utilizzato per la scansione. Nel caso in cui venga rilevata una vulnerabilità, la fase di attacco passa all&rsquo;exploitation. Nella maggior parte dei casi, tali vulnerabilità vengono utilizzate per ottenere l&rsquo;accesso al sistema attraverso diversi servizi in esecuzione sul PLC. Dopo aver sfruttaSploitkitto la vulnerabilità, è preferibile rendere persistente l&rsquo;accesso. Tuttavia, non tutti i servizi offrono l&rsquo;opportunità di creare una backdoor persistente.</p>
<p>Per molti PLC, è possibile estrarre dettagli sul sistema usando una scansione Nmap controllata verso il PLC stesso. Questo deve essere eseguito con cura per evitare di interromperne il funzionamento. Abbiamo una configurazione di laboratorio in cui eseguiamo test di penetrazione controllata su PLC e altre apparecchiature ICS, appartenenti a diversi produttori al fine di avere un campione rappresentativo di quanto presente sul mercato.</p>
<p>In uno dei test di penetrazione la scansione Nmap con l&rsquo;uso di script in Nmap Script Engine (NSE) ha rivelato l&rsquo;indirizzo MAC, le informazioni hardware e firmware, le porte aperte 80, 102 e 443 e altro ancora. Queste informazioni dettagliate possono essere utilizzate per sviluppare exploit e indagare le vulnerabilità verso le serie PLC specifiche.</p>
<p><img src="/uploads/2021/pt_2.jpg" alt=""></p>
<p>Molte di queste vulnerabilità sono segnalate e discusse nel National Vulnerability Database. Sfruttando la loro presenza in molti casi è possibile decifrare la password e ottenere l&rsquo;accesso al PLC (e spegnerlo).</p>
<h2 id="nota-importante"><strong>Nota importante</strong></h2>
<p>Lo scopo di questo articolo è unicamente didattico e informativo. <strong>Ogni azione non autorizzata</strong> verso qualunque sistema di controllo presente su una rete pubblica o privata <strong>è illegale</strong>! Le informazioni contenute in questo ed altri articoli hanno lo scopo di far com‌prendere quanto sia necessario migliorare i sistemi di difesa, e non di fornire strumenti per effettuarne l&rsquo;attacco. Violare un sistema informatico è perseguibile penalmente e può causare gravi danni a cose e persone, in modo particolare se si parla di ICS. Tutti i test che vengono illustrati nei tutorials sono stati effettuati in laboratori isolati, sicuri, o autorizzati dal produttore.</p>
<p>Stay safe, stay free.</p>
]]></content>
        </item>
        
        <item>
            <title>Hacking: attaccare un PLC con Stuxnet</title>
            <link>https://www.omarmorando.com/posts/2021/07/hacking-attaccare-un-plc-con-stuxnet/</link>
            <pubDate>Fri, 09 Jul 2021 15:09:35 +0200</pubDate>
            
            <guid>https://www.omarmorando.com/posts/2021/07/hacking-attaccare-un-plc-con-stuxnet/</guid>
            <description>Per illustrare come sia possibile attaccare un PLC e quali potrebbero essere le conseguenze di ciò diamo un&amp;rsquo;occhiata al worm Stuxnet.;
Introduzione a Stuxnet Stuxnet è un worm indipendente, destinato esclusivamente ai sistemi di controllo di supervisione e acquisizione dati (SCADA) di Siemens. Il worm è stato progettato per attaccare specifici PLC Siemens e ha sfruttato quattro vulnerabilità 0-day. La versione finale di Stuxnet è stata scoperta per la prima volta in Bielorussia nel giugno 2010 da Sergey Ulasen di Kaspersky Labs.</description>
            <content type="html"><![CDATA[<p>Per illustrare come sia possibile attaccare un PLC e quali potrebbero essere le conseguenze di ciò diamo un&rsquo;occhiata al worm <a href="https://en.wikipedia.org/wiki/Stuxnet">Stuxnet</a>.;</p>
<p><img src="/uploads/2021/stuxnet_1.jpg" alt=""></p>
<h2 id="introduzione-a-stuxnet">Introduzione a Stuxnet</h2>
<p>Stuxnet è un worm indipendente, destinato esclusivamente ai sistemi di controllo di supervisione e acquisizione dati (SCADA) di Siemens. Il worm è stato progettato per attaccare specifici PLC Siemens e ha sfruttato quattro vulnerabilità 0-day. La versione finale di Stuxnet è stata scoperta per la prima volta in Bielorussia nel giugno 2010 da <a href="https://eugene.kaspersky.com/2011/11/02/the-man-who-found-stuxnet-sergey-ulasen-in-the-spotlight/">Sergey Ulasen</a> di Kaspersky Labs. Una versione precedente di Stuxnet era già stata scoperta nel 2009. Tuttavia, il worm è stato sviluppato molto prima, probabilmente già nel 2005. Stuxnet è stato progettato principalmente per danneggiare una centrale nucleare situata a Natanz, in Iran. Sfortunatamente però Stuxnet si è diffuso in oltre 115 paesi, il che dimostra come anche un attacco mirato potrebbe diffondersi e causare danni al di fuori del suo scopo principale.</p>
<p>Il worm è stato appositamente progettato per modificare la velocità del rotore delle centrifughe all&rsquo;interno della centrale nucleare di Natanz, causandone l&rsquo;esplosione. Ciò che è interessante con Stuxnet è che si trattava di un worm mirato, progettato con cura per causare danni solo se fossero stati soddisfatti determinati criteri, il che significa che la maggior parte degli impianti in cui si è successivamente diffuso non avrebbero dovuto subire danni. In effetti, Stuxnet aumenterebbe la velocità del rotore delle centrifughe solo se l&rsquo;architettura del sistema di controllo industriale corrispondesse all&rsquo;impianto nucleare di Natanz. Per la sua struttura e complessità, Stuxnet è stata definita come una minaccia persistente avanzata (APT). Un APT raccoglie i dati ed esegue i comandi continuamente per un lungo periodo di tempo senza essere rilevato. Questo è anche noto come attacco &ldquo;basso e lento&rdquo;.</p>
<h2 id="come-funziona">Come funziona</h2>
<p>Il worm Stuxnet è stato portato nella struttura di Natanz attraverso un&rsquo;unità flash USB, consentendogli di attaccare il sistema dall&rsquo;interno. Ciò era considerato uno dei prerequisiti per l&rsquo;attacco in quanto la struttura di Natanz non era direttamente accessibile da Internet ma potretto tramite air gap.</p>
<p><img src="/uploads/2021/stuxnet_2.png" alt="Un PLC Simatic S7-300"></p>
<p>Dopo l&rsquo;esecuzione, il worm si è diffuso su tutta la rete fino a quando non ha trovato un sistema operativo Windows con STEP 7. </p>
<p><img src="/uploads/2021/stuxnet_3.png" alt="Siemens Step 7"></p>
<p>STEP 7 è il software di programmazione Siemens progettato per i propri PLC. Il computer che esegue STEP 7 è noto come computer di controllo e interagisce direttamente con e invia comandi al PLC. Una volta arrivato con successo al computer di controllo STEP 7, Stuxnet ha manipolato i blocchi di codice inviati dal computer di controllo, eseguito comandi pericolosi sul PLC e fatto girare le centrifughe a una frequenza superiore rispetto a quanto inizialmente programmato. </p>
<p>{% hint style=&ldquo;info&rdquo; %}
Il software STEP 7 utilizza una libreria chiamata <strong>s7otbxdx.dll</strong> per eseguire la comunicazione con il PLC. Ad esempio, se un blocco di codice deve essere letto dal PLC viene chiamata la routine &ldquo;s7blk_read&rdquo;. Stuxnet usa una tecnica di DLL hijacking per intercettare tutti i comandi provenienti da STEP 7 e WinCC (il sistema SCADA di Siemens) e, a sua volta, li inoltra alla libreria originale dopo averne modificato il contenuto. In questo modo invia comandi imprevisti al PLC restituendo agli utenti un loop di valori di funzionamento normale.
{% endhint %}</p>
<p><img src="/uploads/2021/stuxnet_4.png" alt="L&rsquo;attacco di tipo DLL hijacking sulle librerie STEP 7"></p>
<p>Gli attacchi al PLC sono stati eseguiti ogni 27 giorni circa per rendere l&rsquo;attacco furtivo e difficile da rilevare, che rappresenta una parte centrale di un APT. Stuxnet ha inoltre rilevato il computer di controllo e visualizzato un output falso sul software STEP 7. Questo passaggio dell&rsquo;attacco era una parte fondamentale nota come &ldquo;inganno&rdquo;. Gli ingegneri situati nella centrale nucleare non hanno ricevuto alcuna indicazione di errori, supponendo che le centrifughe stessero ruotando alla frequenza corretta. Ricevendo un output falso in STEP 7, essi presumevano che il tracollo fosse stato causato da un errore umano anzichè da un malware. Stuxnet ha anche nascosto il codice direttamente sul PLC dopo l&rsquo;infezione ed è stato quindi definito anche un rootkit del PLC.</p>
<p><img src="/uploads/2021/stuxnet_5.png" alt="Un esempio di sistema SCADA basato su Siemens WinCC"></p>
<p>Per la sua diffusione in rete Stuxnet ha sfruttato una delle vulnerabilità 0-day dei sistemi operativi Windows. Esso infatti si è diffuso attraverso il protocollo di condivisione dei file Server Message Block (SMB) come documentato nel rapporto sulla vulnerabilità <a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4250">CVE-2008-4250</a> nel National Vulnerability Database. La vulnerabilità ha consentito l&rsquo;esecuzione di codice in modalità remota, diffondendosi in modo aggressivo sulla rete locale. Il worm aveva diverse altre funzionalità, come l&rsquo;auto-replica, si aggiornava usando un centro di comando e controllo, conteneva un rootkit di Windows che nascondeva i suoi file binari e tentava di aggirare i sistemi di sicurezza presenti sui computer (anti-virus e anti-malware).</p>
<h2 id="le-conseguenze-del-suo-attacco">Le conseguenze del suo attacco</h2>
<p>Stuxnet è conosciuta come la prima arma digitale del mondo e ha distrutto circa 1.000 centrifughe all&rsquo;interno della centrale di Natanz. Gli attacchi informatici che causano danni fisici hanno rivoluzionato il modo in cui gli esperti di sicurezza informatica eseguono l&rsquo;analisi delle minacce, nonché il modo in cui i produttori di PLC li progettano.</p>
<p>Se vogliamo trovargli un merito, Stuxnet ha spazzato via la convinzione che i sistemi ICS fossero inviolabili, sicuri perchè isolati e perchè così diversi dai tradizionali dispositivi presenti nel mondo IT.</p>
<p>Ma la conseguenza più grande è determinata dal fatto che per la prima volta un ente governativo, in questo caso quello americano insieme a quello israeliano, ha creato un&rsquo;arma informatica in grado di causare danni a persone e cose. Non si era ancora visto qualcosa del genere e di questa entità, hackers e malwares avevano finora l&rsquo;obiettivo di estorcere denaro, rubare informazioni o infrangere barriere politiche, ma nessuno aveva superato la soglia del danno tangibile.</p>
<h2 id="hacking-di-un-plc">Hacking di un PLC</h2>
<p>Una parte di Stuxnet consisteva nell&rsquo;utilizzare i PLC di destinazione come strumento hacker mediante un rootkit del PLC e manipolando la comunicazione tra il computer di controllo (SCADA) e il PLC stesso. Mirando entrambi questi dispositivi Stuxnet è riuscito a raggiungere il suo obiettivo e allo stesso tempo ha ingannato gli operatori, avendo così abbastanza tempo per distruggere le centrifughe. Stuxnet come APT è un attacco sofisticato che richiede una significativa raccolta di informazioni e risorse per essere eseguito. È inoltre necessario disporre di conoscenze approfondite sui protocolli di comunicazione proprietari in uso e sull&rsquo;architettura dei PLC target, in particolare per la realizzazione del rootkit. Il suo codice è ora pubblicamente disponibile e può essere studiato in modo approfondito.</p>
<p>Un sistema di controllo industriale (ICS) e un PLC fanno uso di più protocolli di comunicazione. Tra i più utilizzati troviamo <a href="hacking-profibus-profinet.md">Profinet, Profibus</a> e <a href="hacking-modbus.md">Modbus</a>. La maggior parte di essi sono stati concepiti all&rsquo;origine senza misure di sicurezza integrate, con la conseguenza di permettere l&rsquo;esecuzione di codice in modalità remota, lo sniffing dei pacchetti e gli attacchi replay a causa della mancanza di autenticazione e crittografia.</p>
<p>Profinet utilizza l&rsquo;hardware Ethernet tradizionale, che lo rende compatibile con la maggior parte delle apparecchiature. Profinet è ampiamente utilizzato nel settore dell&rsquo;automazione e il suo design si basa sul modello Open Systems Interconnection (OSI). Profinet consente la comunicazione bidirezionale ed è il protocollo di comunicazione preferito per i PLC Siemens Simatic.</p>
<p><img src="/uploads/2021/stuxnet_6.png" alt=""></p>
<p>Profibus è uno standard di comunicazione internazionale per bus di campo. Viene utilizzato per collegare insieme più dispositivi e consente la comunicazione bidirezionale. Esistono due tipi di Profibus: Profibus Decentralized Peripherals (DP) e Profibus Process Automation (PA). Una limitazione con Profibus è che è in grado di comunicare solo con un dispositivo alla volta. La nuova versione di Profibus è standardizzata in IEC 61158.</p>
<p>Modbus è un protocollo di comunicazione seriale progettato e pubblicato da Modicon (Schneider Electric) nel 1979. Modbus esegue una comunicazione di tipo master e slave, con un numero massimo di dispositivi fino a 247. Il computer di controllo - HMI o SCADA - normalmente funge da master, mentre i dispositivi di automazione, o i PLC, sono gli slave. È stato originariamente progettato come protocollo di comunicazione per PLC e successivamente è diventato uno standard internazionale per il collegamento di più dispositivi industriali. Modbus è facile da implementare, economico e ampiamente accettato come standard di comunicazione. Esistono almeno tre varianti del protocollo Modbus: American Standard Code for Information Interchange (ASCII), unità terminale remota (RTU) e TCP/IP.</p>
<p><img src="/uploads/2021/stuxnet_7.png" alt=""></p>
<p>Esistono diversi scanner <a href="hacking-metasploit-scada-modules.md">Metasploit</a> che consentono il rilevamento e lo sfruttamento di Modbus e Profinet. Scanner simili in Python sono disponibili anche su GitHub. Nel 2011 Dillon Beresford, ingegnere senior per la ricerca delle vulnerabilità presso Dell, ha lanciato exploit remoti verso la serie di PLC Simatic di Siemens attravero Profinet, che comunica utilizzando la porta TCP 102.</p>
<p>Ciò che è interessante di questi exploit è che scaricano e visualizzano la memoria, e sono in grado di effettuare comandi ON/OFF sull&rsquo;unità centrale di elaborazione (CPU) del PLC. Un esempio è l&rsquo;exploit chiamato &ldquo;remote-memory-viewer&rdquo;, che esegue l&rsquo;autenticazione utilizzando una password backdoor codificata nel PLC Simatic S7-300 di Siemens. In questo exploit, il modulo di avvio/arresto della CPU esegue il codice shell verso il PLC e lo accende/spegne da remoto. Lo stesso exploit start/stop può essere trovato per la serie S7-1200. Inoltre, iniettando shellcode, è anche possibile ottenere l&rsquo;accesso remoto al PLC.</p>
<p>A causa della mancanza di controlli di integrità, i PLC più vecchi eseguono comandi indipendentemente dal fatto che vengano ricevuti da una fonte legittima. La ragione di ciò è che non ci sono checksum sui pacchetti di rete. È stato dimostrato che una serie di attacchi replay funziona contro un gran numero di PLC, il che consente all&rsquo;attaccante di inviare comandi di esecuzione in remoto. Pertanto, lo sfruttamento dei PLC in remoto con strumenti open source costituisce una grave minaccia per i sistemi SCADA.;</p>
<p>Durante il BlackHat USA nel 2011, Beresford ha presentato una demo live creata per le serie Siemens Simatic S7-300 e 1200. Gli exploit utilizzati durante la sua demo sono programmati in Ruby, reso compatibile con il Metasploit Framework.</p>
<p>Gli exploit remoti su ICS erano una parte essenziale del worm Stuxnet. Tuttavia, Beresford ha dimostrato come sia possibile ottenere l&rsquo;accesso remoto a un PLC utilizzando la password hardcoded integrata nel software, e per certi versi rappresenta un passo avanti rispetto a quanto fatto in Stuxnet.</p>
<h2 id="ma-succede-solo-con-siemens">Ma succede solo con Siemens?</h2>
<p>Meglio precisarlo: questo non è esclusivamente un problema di Siemens. Rockwell Automation ha anche sperimentato un buffer overflow su stack che potrebbe consentire l&rsquo;accesso remoto al sistema iniettando codice arbitrario, secondo <a href="https://nvd.nist.gov/vuln/detail/CVE-2016-0868">CVE-2016-0868</a> del National Vulnerability Database. La vulnerabilità è stata segnalata il 26 gennaio 2016 e riguardava il PLC MicroLogix 1100. Inoltre, ci sono molti altri exploit e scanner disponibili nel progetto Metasploit che possono essere utilizzati per eseguire comandi da remoto su diversi modelli di PLC.</p>
<p>Il computer di controllo può anche essere utilizzato come strumento di hacker principalmente a causa di vari exploit software, alcuni dei quali garantiscono il controllo della workstation di un sistema SCADA o ICS. Ciò consente all&rsquo;attaccante di manipolare i dati inviati al PLC ed eseguire il pivoting all&rsquo;interno della rete. Un exploit creato da James Fitts, collaboratore del Exploit Database, consente a un utente malintenzionato remoto di immettere codice arbitrario nel software di programmazione PLC di Fatek, WinProladder, come documentato <a href="https://nvd.nist.gov/vuln/detail/CVE-2016-8377">CVE-2016-8377</a> del National Vulnerability Database.</p>
<p>Anche se l&rsquo;hacker può attivare l&rsquo;exploit in remoto, quest&rsquo;ultimo richiede comunque l&rsquo;interazione dell&rsquo;utente, come una visita a una pagina Web dannosa o l&rsquo;apertura di un file infetto, per sfruttarlo correttamente. L&rsquo;exploit è un buffer overflow su stack disponibile in Ruby per l&rsquo;importazione di Metasploit. Le applicazioni programmate in C sono spesso più vulnerabili agli overflow del buffer rispetto ad altri linguaggi di programmazione e ci sono molti pacchetti software basati su C in uso nei sistemi di controllo industriale. Ad esempio, l&rsquo;iniezione di shellcode attraverso una vulnerabilità di buffer overflow può consentire l&rsquo;accesso remoto al sistema o essere utilizzato per l&rsquo;escalation dei privilegi.</p>
<h2 id="siamo-spacciati">Siamo spacciati?</h2>
<p>La mancanza di sicurezza nei sistemi di controllo industriale è una delle principali preoccupazioni per la sicurezza. Un PLC è stato originariamente progettato per funzionare solo come operatore automatico in un sistema di controllo industriale e non per essere collegato a componenti esterni e raggiungibile da Internet. Tuttavia, l&rsquo;evoluzione nella progettazione di ICS ha iniziato a esporre i PLC a Internet, che può essere mostrato attraverso ricerche utilizzando strumenti come Shodan. I PLC si basano su reti con protezione &ldquo;air-gapped&rdquo; e accesso fisico limitato come misura di sicurezza.</p>
<p>Le reti air-gapped hanno più volte dimostrato di essere un design imperfetto e non sono in alcun caso un legittimo argomento di sicurezza nei moderni ICS. Ciò è stato dimostrato dall&rsquo;attacco di Stuxnet, che si è diffuso in oltre 115 paesi, infettando le infrastrutture critiche in tutto il mondo anche se la maggior parte dei sistemi di controllo sono stati progettati in isolamento. Questo cambiamento negli ambienti ICS e nelle infrastrutture critiche implica che i PLC sono esposti a una maggiore minaccia alla sicurezza rispetto a prima.</p>
<p><em>(Grazie al lavoro di Siv Hilde Houmb e Erik David Martin da cui è tratto questo articolo)</em></p>
<h2 id="nota-importante"><strong>Nota importante</strong></h2>
<p>Lo scopo di questo articolo è unicamente didattico e informativo. <strong>Ogni azione non autorizzata</strong> verso qualunque sistema di controllo presente su una rete pubblica o privata <strong>è illegale</strong>! Le informazioni contenute in questo ed altri articoli hanno lo scopo di far com‌prendere quanto sia necessario migliorare i sistemi di difesa, e non di fornire strumenti per effettuarne l&rsquo;attacco. Violare un sistema informatico è perseguibile penalmente e può causare gravi danni a cose e persone, in modo particolare se si parla di ICS. Tutti i test che vengono illustrati nei tutorials sono stati effettuati in laboratori isolati, sicuri, o autorizzati dal produttore.</p>
<p>Stay safe, stay free.</p>
]]></content>
        </item>
        
        <item>
            <title>Hacking: simulazione Modbus TCP in Linux</title>
            <link>https://www.omarmorando.com/posts/2021/07/hacking-simulazione-modbus-tcp-in-linux/</link>
            <pubDate>Thu, 08 Jul 2021 15:09:35 +0200</pubDate>
            
            <guid>https://www.omarmorando.com/posts/2021/07/hacking-simulazione-modbus-tcp-in-linux/</guid>
            <description>I sistemi ICS utilizzano molti protocolli diversi per comunicare rispetto ai sistemi IT standard. Lo standard più utilizzato è il protocollo Modbus. Sviluppato per la prima volta da Modicon (ora Schneider Electric) nel 1979 come protocollo seriale, è stato modificato e aggiornato per funzionare su rete Ethernet TCP, assumendo il nome di Modbus TCP. Di seguito puoi vedere un diagramma che riassume la struttura del pacchetto RTU (seriale) e quella TCP.</description>
            <content type="html"><![CDATA[<p>I sistemi ICS utilizzano molti protocolli diversi per comunicare rispetto ai sistemi IT standard. Lo standard più utilizzato è il protocollo <a href="https://it.wikipedia.org/wiki/Modbus">Modbus</a>. Sviluppato per la prima volta da Modicon (ora Schneider Electric) nel 1979 come protocollo seriale, è stato modificato e aggiornato per funzionare su rete Ethernet TCP, assumendo il nome di Modbus TCP. Di seguito puoi vedere un diagramma che riassume la struttura del pacchetto RTU (seriale) e quella TCP.</p>
<p><img src="/uploads/2021/mod_sim_1.png" alt=""></p>
<p>Se vuoi approfondire l&rsquo;argomento ti suggerisco di leggere la guida che ho scritto &ldquo;<a href="hacking-modbus.md">Hacking: Modbus</a>&rdquo;.</p>
<p>In questo tutorial simuleremo una configurazione master e slave Modbus per illustrare come questo protocollo ormai quasi onnipresente nei sistemi OT funzioni in un ambiente industriale. Lo scopo è di capire meglio come funziona il protocollo e come può essere hackerato, manipolato e protetto.</p>
<h2 id="installazione">Installazione</h2>
<p>Modbus utilizza un&rsquo;architettura master/slave (client/server) in cui solo un dispositivo può inviare le richieste. Gli slave/server forniscono i dati richiesti al master o eseguono l&rsquo;azione richiesta dal master stesso. Uno slave è qualsiasi dispositivo periferico (trasduttore, valvola, unità di rete o altro ancora) che elabora le informazioni e invia il suo output al master tramite il protocollo Modbus.</p>
<p>Nel nostro caso useremo due software di simulazione disponibili in forma gratuita, uno con funzionalità di master chiamato <a href="https://sourceforge.net/projects/qmodmaster/">QModMaster</a> e l&rsquo;altro in versione slave, dal nome <a href="https://sourceforge.net/projects/modbuspal/">ModbusPal</a>.</p>
<p><strong>QModMaster</strong> è un&rsquo;applicazione open source basata sul framework Qt che implementa le funzioni di un master Modbus. E' dotata di una GUI che consente una facile configurazione delle modalità di comunicazione (RTU, TCP) e di un bus monitor per analizzare il traffico dei pacchetti di comunicazione. Nel caso si utilizzi Windows è disponibile la versione binaria pre-compilata. Nel nostro caso, faremo il download del codice sorgente e ne eseguiremo la compilazione su una macchina Linux.</p>
<p><img src="/uploads/2021/mod_sim_2.png" alt="QModMuster in esecuzione su Linux"></p>
<p><strong>ModbusPal</strong> è un&rsquo;applicazione scritta in Java, quindi non necessita di alcuna compilazione in quanto indipendente dall&rsquo;host di esecuzione. Simula un dispositivo slave Modbus, con alcune funzioni avanzate come gli scripts Python.</p>
<p><img src="/uploads/2021/mod_sim_3.png" alt="ModbusPal con la tipica interfaccia &ldquo;Java style&rdquo;"></p>
<p>Come detto, dobbiamo compilare QModBus in modo che possa essere eseguito su sistemi Linux, nel mio caso Kubuntu 19.10. Scarichiamo il coside sorgente <a href="https://sourceforge.net/projects/qmodmaster/files/qModMaster-code-0.5.2-3.zip/download">qModMaster-code-0.5.2-3.zip</a> e salviamolo in una cartella di lavoro, nel mio caso <code>~/Develop/Projects/Modbus/qModMaster-code-0.5.2-3</code>.</p>
<p>Se listiamo i files presenti nella cartella vediamo che è presente il file <code>qModMaster.pro</code>, tipico di un progetto sviluppato con Qt. Per la compilazione è necessario disporre di una versione minima Qt 5.2.1 o superiore, scaricabile da <a href="http://www.qt.io/download/">questo link</a>.</p>
<p><img src="/uploads/2021/mod_sim_4.png" alt=""></p>
<p>A questo punto possiamo usare il comando <code>qmake</code> per convertire il file .pro in Makefile, compilabile con il più classico <code>make</code>.</p>
<pre tabindex="0"><code>$ qmake -o Makefile qModMaster.pro 
$ make
</code></pre><p>Dopo alcuni secondi di elaborazione abbiamo il nostro eseguibile pronto!</p>
<h2 id="utilizzo-del-simulatore">Utilizzo del simulatore</h2>
<p>Per prima cosa dobbiamo configurare lo slave, in modo che metta a disposizione le proprie risorse da far leggere al master, in questo caso configuriamo dei registri &ldquo;Holding Registers&rdquo;.</p>
<p>{% hint style=&ldquo;info&rdquo; %}
Entrambe le applicazioni richiedono privilegi <code>sudo</code> per poter accedere alla porta 502/TCP, per cui occorre avviarle con <code>sudo ./ModbusPal</code> e <code>sudo ./qModMaster</code> nelle rispettive cartelle di lavoro.
{% endhint %}</p>
<h3 id="configurazione-del-modulo-slave-modbuspal"><strong>Configurazione del modulo slave ModbusPal</strong></h3>
<p><strong>Link settings</strong><br>
****Selezioniamo &ldquo;TCP Port 502&rdquo;.<br>
Il protocollo Modbus TCP usa di default la porta 502 per la comunicazione TCP</p>
<p><strong>Modbus slaves</strong><br>
****Aggiungiamo un nodo slave premendo il pulsante &ldquo;Add&rdquo;, selezioniamo il numero dello slave e inseriamo un nome, nel nostro caso &ldquo;Slave1&rdquo;.</p>
<p><img src="/uploads/2021/mod_sim_5.png" alt=""></p>
<p>A questo punto dobbiamo configurare i parametri che rendiamo disponibili nel nostro slave. Click sull&rsquo;icona con l&rsquo;occhio per aprire la schermata delle proprietà. Successivamente, click su &ldquo;Add&rdquo; e inseriamo il numero di registri che vogliamo aggiungere, nel nostro caso da 1 a 8.</p>
<p><img src="/uploads/2021/mod_sim_6.png" alt=""></p>
<p>Ed ecco che compare la lista degli holding registers che abbiamo creato, con valori di default a 0. Possiamo già modificare il loro valore a piacimento, oppure farlo quando anche il master è attivo per vederne la lettura aggiornata in tempo reale.</p>
<p><img src="/uploads/2021/mod_sim_7.png" alt=""></p>
<p>Siamo pronti per avviare lo slave, premiamo il pulsante &ldquo;Run&rdquo; della schermata principale e passiamo a configurare il master.</p>
<h3 id="configurazione-del-modulo-master-qmodmaster"><strong>Configurazione del modulo master QModMaster</strong></h3>
<p>La configurazione del modulo master è altrettanto semplice, occorre tener presente alcuni parametri coerenti con lo slave che abbiamo creato:</p>
<p><strong>Mobbus Mode:</strong> TCP<br>
<strong>Unit ID:</strong> 1 (corrisponde al numero dello slave che abbiamo dichiarato prima)<br>
<strong>Function Code:</strong> Read Holding Registers (0x03)<br>
<strong>Number of Registers:</strong> 8</p>
<p><img src="/uploads/2021/mod_sim_8.png" alt=""></p>
<p>I &ldquo;Function Code&rdquo; e &ldquo;Mumber of Registers&rdquo; corrispondono al tipo e alla quantità di dati che abbiamo dichiarato nel modulo slave.</p>
<p>Di fault l&rsquo;app master è configurata in modo che comunichi con indirizzp IP 127.0.0.1 e porta 502 (come anche lo slave). Possiamo cambiare questi valori selezionando la schermata dal menù &ldquo;Options&rdquo; e poi &ldquo;Modbus TCP&rdquo;.</p>
<p><img src="/uploads/2021/mod_sim_9.png" alt=""></p>
<p>A questo punto non ci resta che attivare la connessione e l&rsquo;aggiornamento continuo dei dati tramite i pulsanti &ldquo;Connect&rdquo; e &ldquo;Scan&rdquo;. Il tempo di aggiornamento continuo dei dati è determinano dal parametro &ldquo;Scan Rate (ms)&rdquo;, che nel nostro caso corrisponde a un intervallo di 1 secondo.</p>
<h3 id="aggiornamento-dei-dati">Aggiornamento dei dati</h3>
<p><img src="/uploads/2021/mod_sim_10.png" alt=""></p>
<p>Ed ecco che se andiamo a modificare i dati dei registri del nostro slave avremo il corrispondente aggiornamento sul master.</p>
<h3 id="proviamo-a-scrivere-col-master">Proviamo a scrivere col master</h3>
<p>Ora che abbiamo visto come sia possibile leggere i dati dallo slave proviamo a modificare i valori dei registri dal master. Interrompiamo lo scan continuo e scegliamo &ldquo;Write Multiple Registers&rdquo; nel parametro &ldquo;Function Code&rdquo; della schermata principale di QModMaster.</p>
<p><img src="/uploads/2021/mod_sim_11.png" alt="Selezioniamo Write Multiple Registers"></p>
<p>Riattiviamo lo scan continuo, ora possiamo fare un doppio click su ciascun campo del registro per modificarne il valore, che vedremo aggiornarsi sul modulo slave.</p>
<p><img src="/uploads/2021/mod_sim_12.png" alt=""></p>
<h2 id="nota-importante"><strong>Nota importante</strong></h2>
<p>Lo scopo di questo articolo è unicamente didattico e informativo. <strong>Ogni azione non autorizzata</strong> verso qualunque sistema di controllo presente su una rete pubblica o privata <strong>è illegale</strong>! Le informazioni contenute in questo ed altri articoli hanno lo scopo di far com‌prendere quanto sia necessario migliorare i sistemi di difesa, e non di fornire strumenti per effettuarne l&rsquo;attacco. Violare un sistema informatico è perseguibile penalmente e può causare gravi danni a cose e persone, in modo particolare se si parla di ICS. Tutti i test che vengono illustrati nei tutorials sono stati effettuati in laboratori isolati, sicuri, o autorizzati dal produttore.</p>
<p>Stay safe, stay free.</p>
]]></content>
        </item>
        
        <item>
            <title>Hacking: Modbus</title>
            <link>https://www.omarmorando.com/posts/2021/07/hacking-modbus/</link>
            <pubDate>Wed, 07 Jul 2021 15:09:35 +0200</pubDate>
            
            <guid>https://www.omarmorando.com/posts/2021/07/hacking-modbus/</guid>
            <description>Una delle sfide del pentesting in ambito OT/ICS è data dai protocolli impiegati che possono essere anche molto diversi da quelli dell&amp;rsquo;IT. Le installazioni ICS utilizzano un&amp;rsquo;ampia varietà di protocolli che spesso hanno ben poco in comune con gli standard Ethernet e TCP/IP. Questa differenza è stata per anni il punto di forza delle installazioni OT, proteggendole attraverso il meccanismo della &amp;ldquo;sicurezza per oscurità&amp;rdquo;. Ora che questi protocolli stanno diventando sempre più conosciuti e compresi, le preoccupazioni di sicurezza in queste strutture sono state accentuate.</description>
            <content type="html"><![CDATA[<p>Una delle sfide del pentesting in ambito OT/ICS è data dai protocolli impiegati che possono essere anche molto diversi da quelli dell&rsquo;IT. Le installazioni ICS utilizzano un&rsquo;ampia varietà di protocolli che spesso hanno ben poco in comune con gli standard Ethernet e TCP/IP. </p>
<p>Questa differenza è stata per anni il punto di forza delle installazioni OT, proteggendole attraverso il meccanismo della &ldquo;sicurezza per oscurità&rdquo;. Ora che questi protocolli stanno diventando sempre più conosciuti e compresi, le preoccupazioni di sicurezza in queste strutture sono state accentuate.</p>
<p>In questo articolo vediamo le principali caratteristiche di uno di questi protocolli: il <strong>Modbus.</strong></p>
<h2 id="lo-standard-modbus">Lo standard Modbus</h2>
<p>Il protocollo Modbus si caratterizza principalmente per il supporto fisico di connessione, che può essere su porta seriale o su Ethernet. Esistono diverse varianti del protocollo:</p>
<ul>
<li>Modbus RTU</li>
<li>Modbus ASCII</li>
<li>Modbus TCP</li>
<li>Modbus over TCP/IP o Modbus RTU/IP</li>
<li>Modbus over UDP</li>
<li>Modbus Plus (Modbus+)</li>
<li>Secure Modbus</li>
</ul>
<p>In questo articolo tratterò quelli più diffusi: Modbus RTU e Modbus TCP. Farò anche un cenno sul Secure Modbus, una versione del protocollo orientata alla sicurezza e che incorpora un layer per la cifratura dei dati.</p>
<h3 id="modbus-rtu">Modbus RTU</h3>
<p>Modbus RTU è stato sviluppato per la prima volta nel 1979 da Modicon (ora parte di Schneider Electric) per i propri sistemi di automazione industriale e PLC. È diventato lo standard de facto del settore. Modbus è un protocollo di dominio pubblico ampiamente accettato, è un protocollo semplice e leggero destinato alla comunicazione seriale. Ha un limite di dati di 253 byte.</p>
<p>Modbus opera al livello 7 del modello OSI. È una metodologia di comunicazione efficiente tra dispositivi interconnessi utilizzando un modello di &ldquo;richiesta/risposta&rdquo;. Proprio perché è semplice e leggero richiede poca potenza di elaborazione. Basti pensare che esistono librerie di comunicazione disponibili per praticamente qualunque dispositivo embedded, a partire da una semplice scheda Arduino fino alla più sofisticata Raspberry.</p>
<p>Modbus è stato inizialmente implementato sulla tipologia fisica RS-232C (punto-punto) o RS-485 (multi-drop). Può avere fino a 32 dispositivi che comunicano tramite un collegamento seriale con ciascun dispositivo con un ID univoco.</p>
<p><img src="/uploads/2021/mod_1.png" alt=""></p>
<p>Modbus utilizza un&rsquo;architettura master/slave (client/server) in cui solo un dispositivo può inviare le richieste. Gli slave/server forniscono i dati richiesti al master o eseguono l&rsquo;azione richiesta dal master stesso. Uno slave è qualsiasi dispositivo periferico (trasduttore, valvola, unità di rete o altro ancora) che elabora le informazioni e invia il suo output al master tramite il protocollo Modbus.</p>
<p>I master possono rivolgersi a singoli slave o inviare un messaggio in broadcast a tutti gli slave. Gli slave restituiscono una risposta a tutte le query indirizzate a loro individualmente, ma non rispondono alle query broadcast. Gli slave non generano messaggi, possono solo rispondere al master. La query di un master sarà composta dall&rsquo;indirizzo slave (ID slave o ID unità), un codice funzione, tutti i dati richiesti e un campo di controllo degli errori CRC.</p>
<p>Modbus comunica utilizzando i <strong>Function Codes</strong>, codici funzione che identificano un&rsquo;ampia gamma di comandi.</p>
<p><img src="/uploads/2021/mod_2.png" alt="Principali Function Codes per accesso dati e diagnostica"></p>
<h3 id="modbus-tcp">Modbus TCP</h3>
<p>Modbus TCP è il protocollo Modbus incapsulato per l&rsquo;uso su TCP/IP usando la porta 502. Utilizza la stessa richiesta/risposta di Modbus RTU, gli stessi codici funzione e lo stesso limite di dati di 253 byte. Il campo di controllo degli errori utilizzato in Modbus RTU viene eliminato poiché il livello di collegamento TCP/IP utilizza i suoi metodi di checksum.</p>
<p>Modbus TCP aggiunge un livello applicazione (MBAP) al frame Modbus RTU. È lungo 7 byte con 2 byte per l&rsquo;intestazione, 2 byte per l&rsquo;identificatore del protocollo, 2 byte per la lunghezza e 1 byte per l&rsquo;indirizzo (ID unità).</p>
<p><img src="/uploads/2021/mod_3.png" alt=""></p>
<p>L&rsquo;utilizzo di Ethernet consente di realizzare architetture più complesse, anche di tipo ibrido facendo uso di appositi gateway.</p>
<p><img src="/uploads/2021/mod_4.png" alt="Architettura ibrida RTU / TCP"></p>
<h3 id="formato-del-pacchetto-dati">Formato del pacchetto dati</h3>
<p>Un frame Modbus consiste in un Application Data Unit (ADU) che incapsula un Protocol Data Unit (PDU), secondo questo schema:</p>
<ul>
<li>ADU = Address + PDU + Error check</li>
<li>PDU = Function code + Data</li>
</ul>
<p>L&rsquo;ordine dei byte per i valori nei frame di dati Modbus è il byte più significativo di un valore multi-byte inviato prima degli altri. Tutte le varianti Modbus utilizzano uno dei seguenti formati di frame.</p>
<h4 id="formato-del-frame-modbus-rtu">Formato del frame Modbus RTU</h4>
<table>
<thead>
<tr>
<th>Nome</th>
<th>Lung. (bits)</th>
<th>Funzione</th>
</tr>
</thead>
<tbody>
<tr>
<td>Start</td>
<td>28</td>
<td>Almeno 3½ caratteri di inizio frame (con condizione del segno)</td>
</tr>
<tr>
<td>Address</td>
<td>8</td>
<td>Indirizzo della stazione</td>
</tr>
<tr>
<td>Function</td>
<td>8</td>
<td>Codice funzione, es. read coils/holding registers</td>
</tr>
<tr>
<td>Data</td>
<td>n × 8</td>
<td>Dati + lunghezza verranno riempiti in base al tipo di messaggio</td>
</tr>
<tr>
<td>CRC</td>
<td>16</td>
<td>Cyclic Redundancy Check</td>
</tr>
<tr>
<td>End</td>
<td>28</td>
<td>Almeno 3½ caratteri di silenzio tra i frames</td>
</tr>
</tbody>
</table>
<p>Note sul calcolo del CRC:</p>
<ul>
<li>Polinomiale: x16 + x15 + x2 + 1 (CRC-16-ANSI anche noto come CRC-16-IBM, polinomio algebrico esadecimale normale essendo <code>8005</code> e invertito <code>A001</code>).</li>
<li>Valore iniziale: 65.535.</li>
<li>Esempio di frame in esadecimale: <code>01 04 02 FF FF B8 80</code> (CRC-16-ANSI calcolato a partire da <code>01</code> fino a <code>FF</code> genera <code>80B8</code>, viene <strong>prima</strong> trasmesso il byte <strong>meno</strong> significativo).</li>
</ul>
<h4 id="formato-del-frame-modbus-ascii">Formato del frame Modbus ASCII</h4>
<table>
<thead>
<tr>
<th>Nome</th>
<th>Lung. (bytes)</th>
<th>Funzione</th>
</tr>
</thead>
<tbody>
<tr>
<td>Start</td>
<td>1</td>
<td>Inizia con <code>:</code> (valore ASCII<code>3A</code>)</td>
</tr>
<tr>
<td>Address</td>
<td>2</td>
<td>Indirizzo della stazione</td>
</tr>
<tr>
<td>Function</td>
<td>2</td>
<td>Codice funzione, es. read coils</td>
</tr>
<tr>
<td>Data</td>
<td>n × 2</td>
<td>Dati + lunghezza verranno riempiti in base al tipo di messaggio</td>
</tr>
<tr>
<td>LRC</td>
<td>2</td>
<td>Checksum (<a href="https://en.wikipedia.org/wiki/Longitudinal_redundancy_check">Longitudinal redundancy check</a>)</td>
</tr>
<tr>
<td>End</td>
<td>2</td>
<td>&lt;CR&gt;&lt;LF&gt; insieme (valori ASCII <code>0D</code>, <code>0A</code>)</td>
</tr>
</tbody>
</table>
<h4 id="formato-del-frame-modbus-tcp">Formato del frame Modbus TCP</h4>
<table>
<thead>
<tr>
<th>Name</th>
<th>Lung. (bytes)</th>
<th>Funzione</th>
</tr>
</thead>
<tbody>
<tr>
<td>Transaction identifier</td>
<td>2</td>
<td>Per la sincronizzazione tra messaggi di server e client</td>
</tr>
<tr>
<td>Protocol identifier</td>
<td>2</td>
<td>0 per Modbus/TCP</td>
</tr>
<tr>
<td>Length field</td>
<td>2</td>
<td>Numero di byte rimanenti in questo frame</td>
</tr>
<tr>
<td>Unit identifier</td>
<td>1</td>
<td>Indirizzo slave (255 se non usato)</td>
</tr>
<tr>
<td>Function code</td>
<td>1</td>
<td>Codice funzione</td>
</tr>
<tr>
<td>Data bytes</td>
<td>n</td>
<td>Dati come risposta o comandi</td>
</tr>
</tbody>
</table>
<h2 id="sicurezza-del-protocollo-modbus">Sicurezza del protocollo Modbus</h2>
<p>Modbus deve la sua larghissima diffusione alla semplicità del protocollo e alla sua ormai storica presenza sul mercato. Ma proprio per questi due fattori offre il fianco a diverse possibilità di attacco, con numerose vulnerabilità note. Ecco come potrebbero essere eseguiti alcuni attacchi sfruttando le semplici funzioni che il protocollo stesso mette a disposizione, senza strumenti dedicati all&rsquo;enumeration come <strong>nmap</strong>.</p>
<blockquote>
<p>Un hacker può iniziare il suo attacco in fase di reconnaissance eseguendo lo scanning della rete per individuare i dispositivi Modbus usando i comandi di diagnostica del protocollo: <strong>Clear Counter</strong> e <strong>Diagnostic Register</strong>. Una richiesta inviata al PLC, con codice funzione 8 (0x08) e codice funzione secondaria 10 (0x0A), farà in modo che il server di destinazione cancelli i suoi contatori e il registro diagnostico. Questa funzione è in genere implementata solo nei dispositivi seriali.</p>
</blockquote>
<blockquote>
<p>Un altro comando di diagnostica che può essere utilizzato è il <strong>Read Device Identification</strong> come tentativo di raccogliere informazioni sul dispositivo Modbus: una richiesta con il codice funzione 43 di Read Device Identification farà sì che un server Modbus restituisca il nome del fornitore, il nome del prodotto e il numero di versione. Ulteriori informazioni possono essere fornite anche in campi opzionali. Un utente malintenzionato invia il pacchetto di richiesta Modbus con il codice funzione 43 a tutti i sistemi della rete e raccoglie informazioni che potrebbero essere utili per successivi attacchi.</p>
</blockquote>
<h3 id="vulnerabilità-del-protocollo-modbus">Vulnerabilità del protocollo Modbus</h3>
<p>L&rsquo;implementazione del protocollo Modbus TCP contiene diverse vulnerabilità che potrebbero consentire a un utente malintenzionato di eseguire attività di enumeration o di inviare comandi arbitrari.</p>
<ol>
<li><strong>Mancanza di riservatezza</strong>: tutti i messaggi Modbus vengono trasmessi in chiaro attraverso il supporto di trasmissione.</li>
<li><strong>Mancanza di integrità</strong>: non esistono controlli di integrità all&rsquo;interno del protocollo e, di conseguenza, dipende da protocolli di livello inferiore preservare l&rsquo;integrità dei dati.</li>
<li><strong>Mancanza di autenticazione</strong>: non esiste autenticazione a nessun livello del protocollo, con la possibile eccezione di alcuni comandi di programmazione non documentati.</li>
<li><strong>Framing semplicistico</strong>: i frame Modbus TCP vengono inviati tramite connessioni TCP stabilite. Sebbene tali connessioni siano generalmente affidabili, presentano un significativo svantaggio per via del punto successivo.</li>
<li><strong>Mancanza di struttura della sessione</strong>: come molti protocolli di richiesta/risposta (es. SNMP, HTTP, ecc.) Modbus TCP è costituito da transazioni di breve durata in cui il master invia una richiesta allo slave che si traduce in una singola azione. Se combinato con la mancanza di autenticazione e la scarsa generazione del TCP Initial Sequence Number (ISN) in molti dispositivi embedded, diventa possibile per gli aggressori immettere comandi senza conoscere la sessione esistente.</li>
</ol>
<p><strong>Vulnerabilità &ldquo;Illegal Function Exception&rdquo;</strong><br>
Queste vulnerabilità consentono a un utente malintenzionato di svolgere attività di ricognizione sulla rete di destinazione. La prima vulnerabilità esiste perché un dispositivo slave Modbus può restituire una <em>Illegal Function Exception</em> per le query che contengono un codice funzione non supportato. Un utente remoto non autenticato può sfruttare questa vulnerabilità inviando codici funzione predisposti per effettuare ricognizioni sulla rete di destinazione.</p>
<p><strong>Vulnerabilità &ldquo;Illegal Address Exception&rdquo;</strong><br>
Un&rsquo;ulteriore vulnerabilità di ricognizione è dovuta alle molteplici risposte di <em>Illegal Address Exception</em> generate per le query che contengono un indirizzo slave illegale. Un utente malintenzionato non autenticato può sfruttare questa vulnerabilità inviando query che contengono indirizzi non validi alla rete di destinazione e raccogliere informazioni sugli host di rete dai messaggi restituiti.</p>
<p><strong>Vulnerabilità sull&rsquo;autenticazione</strong><br>
Un&rsquo;altra vulnerabilità è dovuta alla mancanza di controlli di sicurezza nell&rsquo;implementazione del protocollo Modbus TCP. Le specifiche del protocollo non includono un meccanismo di autenticazione per la convalida della comunicazione tra i dispositivi master e slave. Questo difetto potrebbe consentire a un utente non autenticato di inviare comandi arbitrari a qualsiasi dispositivo slave tramite un master di attacco.</p>
<p><strong>Vulnerabilità DoS</strong><br>
Il protocollo Modbus TCP contiene anche vulnerabilità che potrebbero consentire a un utente malintenzionato di causare una condizione di Denial of Service (DoS) su un sistema di destinazione. La vulnerabilità è dovuta a un errore di implementazione nel protocollo stesso durante l&rsquo;elaborazione dei messaggi di richiesta e risposta di input discreti.</p>
<p><strong>Vulnerabilità di buffer overfllow</strong><br>
Un altro attacco a Modbus può essere il pacchetto dati che supera la lunghezza massima. Il protocollo limita la dimensione della PDU a 253 byte per consentire l&rsquo;invio del pacchetto su una linea seriale, es. interfaccia RS-485. Modbus TCP antepone alla PDU un&rsquo;intestazione Modbus Application Protocol (MBAP) di 7 byte e il tutto, MBAP+PDU, viene incapsulato in un pacchetto TCP. Ciò pone un limite massimo alla dimensione del pacchetto.</p>
<p>Un utente malintenzionato crea un pacchetto appositamente predisposto di lunghezza superiore a 260 byte e lo invia a un client e server. Se il client o server sono stati programmati in modo errato ciò potrebbe provocare un overflow del buffer o un attacco denial-of-service.</p>
<p><strong>Sniffing del protocollo</strong><br>
L&rsquo;attacco più semplice da usare contro Modbus è lo sniffing del traffico di rete, trovare i dispositivi connessi e quindi inviare comandi dannosi ai dispositivi.</p>
<p>Non avendo funzionalità di sicurezza o crittografia, è facile utilizzare Wireshark per raccogliere informazioni da pacchetti di dati che sulla rete da e verso una porta Modbus su un dispositivo e leggere il contenuto di tali pacchetti. Wireshark consente di vedere facilmente cosa è contenuto in questi pacchetti, esaminare gli indirizzi IP, vedere i codici funzione delle richieste e alterare il corretto funzionamento dei dispositivi.</p>
<p><img src="/uploads/2021/mod_5.png" alt="Whireshark in azione"></p>
<h3 id="secure-modbus">Secure Modbus</h3>
<p>L’approccio più comune alla protezione dei protocolli OT è quello di incapsularli all’interno di un protocollo TLS (Transport Layer Security) e utilizzare l’autenticazione reciproca. Molti organismi di standardizzazione pubblicano linee guida per farlo a seconda dei protocollo, ad esempio:</p>
<ul>
<li>ODVA specifica come applicare la crittografia TLS al protocollo EtherNet/IP.</li>
<li>Schneider Electric ha recentemente lavorato per creare una versione <strong>Secure Modbus</strong>, che prevede anche l’aggiunta dell’estensione X.509 per la definizione delle autorizzazioni (read-only o read-write).</li>
<li>IEC 62351-3 definisce come utilizzare TLS per il settore dell’industria energetica sui protocolli basati su TCP.</li>
</ul>
<p><img src="/uploads/2021/mod_6.png" alt="Modbus TCP Security"></p>
<p><img src="/uploads/2021/mod_7.png" alt=""></p>
<h2 id="nota-importante"><strong>Nota importante</strong></h2>
<p>Lo scopo di questo articolo è unicamente didattico e informativo. <strong>Ogni azione non autorizzata</strong> verso qualunque sistema di controllo presente su una rete pubblica o privata <strong>è illegale</strong>! Le informazioni contenute in questo ed altri articoli hanno lo scopo di far com‌prendere quanto sia necessario migliorare i sistemi di difesa, e non di fornire strumenti per effettuarne l&rsquo;attacco. Violare un sistema informatico è perseguibile penalmente e può causare gravi danni a cose e persone, in modo particolare se si parla di ICS. Tutti i test che vengono illustrati nei tutorials sono stati effettuati in laboratori isolati, sicuri, o autorizzati dal produttore.</p>
<p>Stay safe, stay free.</p>
]]></content>
        </item>
        
        <item>
            <title>Hacking: Profibus/Profinet</title>
            <link>https://www.omarmorando.com/posts/2021/07/hacking-profibus/profinet/</link>
            <pubDate>Tue, 06 Jul 2021 15:09:35 +0200</pubDate>
            
            <guid>https://www.omarmorando.com/posts/2021/07/hacking-profibus/profinet/</guid>
            <description>Una delle sfide del pentesting in ambito OT/ICS è data dai protocolli impiegati che possono essere anche molto diversi da quelli dell&amp;rsquo;IT. Le installazioni ICS utilizzano un&amp;rsquo;ampia varietà di protocolli che spesso condividono hanno ben poco in comune con gli standard Ethernet e TCP/IP. Questa differenza è stata per anni il punto di forza delle installazioni OT, proteggendole attraverso il meccanismo della &amp;ldquo;sicurezza per oscurità&amp;rdquo;. Ora che questi protocolli stanno diventando sempre più conosciuti e compresi, le preoccupazioni di sicurezza in queste strutture sono state accentuate.</description>
            <content type="html"><![CDATA[<p>Una delle sfide del pentesting in ambito OT/ICS è data dai protocolli impiegati che possono essere anche molto diversi da quelli dell&rsquo;IT. Le installazioni ICS utilizzano un&rsquo;ampia varietà di protocolli che spesso condividono hanno ben poco in comune con gli standard Ethernet e TCP/IP. </p>
<p>Questa differenza è stata per anni il punto di forza delle installazioni OT, proteggendole attraverso il meccanismo della &ldquo;sicurezza per oscurità&rdquo;. Ora che questi protocolli stanno diventando sempre più conosciuti e compresi, le preoccupazioni di sicurezza in queste strutture sono state accentuate.</p>
<p>In questo articolo vediamo le principali caratteristiche di uno di questi protocolli: il <strong>Profibus.</strong></p>
<h2 id="lo-standard-profibus">Lo standard Profibus</h2>
<p><strong>Profibus</strong> (<strong>Pro</strong>cess <strong>Fi</strong>eld<strong>bus</strong>) è uno standard aperto per la comunicazione industriale originariamente sviluppato in Germania. È iniziato da un gruppo di 21 aziende e istituzioni denominate &ldquo;Central Association for Electrical Industry&rdquo; (ZVEI), guidato dal gigante industriale Siemens. Per questa ragione Profibus è ampiamente utilizzato nei prodotti Siemens ed è il bus di comunicazione sfruttato dal malware Stuxnet nella centrale nucleare iraniana di Natanz durante il famoso attacco informatico.</p>
<p>Profibus è un protocollo intelligente e bidirezionale multipunto, in cui tutti i dispositivi Profibus sono interoperabili. I dati possono rappresentare valori analogici o digitali.  È un protocollo economico, semplice e ad alta velocità. Profibus utilizza una connessione a due fili per alimentazione e dati.</p>
<p>La tipologia del protocollo è master-slave, come molti altri protocolli SCADA/ICS, che supporta i nodi master mediante l&rsquo;uso della condivisione di un token. Simile al protocollo token-ring di IBM, solo quando il master ha il token può comunicare con gli slave. Lo slave Profibus può comunicare solo con un master. Il nodo Profibus master è in genere un PLC o RTU e gli slave sono sensori, motori o altri dispositivi di controllo.</p>
<p><img src="/uploads/2021/profi_1.png" alt=""></p>
<h3 id="tipi-di-profibus">Tipi di Profibus</h3>
<p>La famiglia dei protocolli Profibus si divide principalmente in due due categorie: Profibus DP e ProfiNet. Gli impieghi cambiano sensibilmente: mentre il primo è un tradizionale fieldbus master-slave con trasmissione seriale con rete ad anello, il secondo ne è la sua evoluzione e permette la comunicazione tra segmenti diversi di bus utilizzando Ethernet.</p>
<p><img src="/uploads/2021/profi_2.png" alt=""></p>
<h4 id="profibus-fms">Profibus FMS</h4>
<p>Questo era il protocollo Profibus iniziale. È stato progettato per comunicare tra PLC e PC. Sfortunatamente questo semplice protocollo non era molto flessibile e, di conseguenza, non poteva funzionare in una rete più complessa e complicata. Sebbene sia ancora in uso, la stragrande maggioranza delle reti Profibus utilizza una delle versioni più recenti.</p>
<h4 id="profibus-dp-decentralized-periphery">Profibus DP (Decentralized Periphery)</h4>
<p>Profibus DP è probabilmente il più comune dei protocolli Profibus. È più semplice e veloce rispetto agli altri tipi. È disponibile in tre versioni separate: DP-V0 (scambio ciclico di dati), DP-V1 (scambio aciclico di dati) e DP-V2 (modalità slave-to-slave isocrono e scambio di dati) con ogni nuova versione che offre funzionalità aggiuntive.</p>
<h4 id="profibus-pa-process-automation">Profibus PA (Process Automation)</h4>
<p>Profibus PA, come suggerisce il nome, è stato sviluppato per Process Automation. Questa versione del protocollo standardizza il processo di trasmissione dei dati misurati. Inoltre, è stato progettato per l&rsquo;uso in ambienti pericolosi utilizzando la tecnologia Manchester Bus Powered (MBS) che utilizza una potenza inferiore e quindi riduce la possibilità di scintille ed esplosioni.</p>
<h3 id="prifinet-process-field-net">PrifiNet (Process Field Net)</h3>
<p>ProfiNet (<strong>Pro</strong>cess <strong>Fi</strong>eld <strong>Net</strong>) è un altro standard aperto per l&rsquo;automazione industriale progettato per la scalabilità. Invece di scambiare dati utilizzando il bus di campo (seriale), utilizza Ethernet (IEEE802.3) come supporto. È incluso come parte di IEC-61158 e IEC-61784. Inizialmente utilizzava pacchetti TCP/IP standard.</p>
<p>ProfiNet ha come punto di forza il fornire dati con vincoli di tempo ristretti. Esso utilizza standard IT come TCP/IP e XML per comunicare, configurare e diagnosticare macchine e dispositivi. Può funzionare fino a 100 Mbit/s su cavi a doppino intrecciato o fibra ottica.</p>
<p>ProfiNet NON è Profibus su Ethernet, ma sono compatibili con l&rsquo;uso di specifici proxy per collegarli.</p>
<p>ProfiNet ha due classi di funzioni:</p>
<ol>
<li>ProfiNet I/O (input/output)</li>
<li>ProfiNet CBA (automazione basata su componenti)</li>
</ol>
<h4 id="profinet-io">ProfiNet I/O</h4>
<p>Collega i dispositivi di campo distribuiti e utilizza comunicazioni real-time (RT) e standard (TCP/IP).</p>
<p>Il canale real-time (RT) viene utilizzato per dati critici che richiedono tempi di scambio ridottissimi, come dati di processo ciclici, allarmi e monitoraggio delle comunicazioni ed è in grado di eseguire cicli di 10 ms.</p>
<p>Il canale standard viene utilizzato per il download di configurazione e parametri, diagnostica, informazioni sulla gestione del dispositivo e altre comunicazioni non critiche con tempi di scambio nell&rsquo;intervallo di 100 ms.</p>
<p>Appartenente sempre alla famiglia I/O esiste poi il ProfiNet IRT (Isochronous Real-Time), che viene utilizzato nei sistemi di azionamento con tempi di ciclo inferiori a 1 ms. Poiché ProfiNet IRT è una tecnologia Layer 2 basata su hardware non è instradabile.</p>
<p>Profibus I/O utilizza le porte TCP/UDP numero 34962, 34963 e 34964.</p>
<h4 id="profinet-cba">ProfiNet CBA</h4>
<p>E' progettato per applicazioni di automazione industriale distribuita. ProfiNet CBA è basato sullo standard DCOM (Distributed Component Model) e RPC (Remote procedure Call). Questo significa anche che ne eredita quindi le vulnerabilità di DCOM e RPC.</p>
<p>ProfiNet CBA utilizza la porta standard TCP numero 135.</p>
<h2 id="la-sicurezza-dei-protocolli">La sicurezza dei protocolli</h2>
<p>Come molti protocolli OT/ICS, anche Profibus DP manca di autenticazione. Ciò significa che qualsiasi nodo può falsificare un nodo master. Poiché solo quest&rsquo;ultimo può controllare gli slave, questa è una delle maggiori vulnerabilità del sistema. Un nodo master contraffatto sarebbe in grado di acquisire il token, interrompere le funzioni del nodo e persino causare un Denial of Service (DoS). Dal momento che la maggior parte dei nodi master in una rete Profibus DP sono collegati a una rete Ethernet, questo li rende sensibili a quasi tipo di attacco basato su Ethernet.</p>
<p>La stessa cosa vale per ProfiNet. Poiché esistono diverse tecnologie in questa suite il rischio dipende da quella utilizzata. Fa eccezione, almeno in parte, il protocollo ProfiNet IRT che utilizza indirizzi non instradabili e quindi risulta immune alle vulnerabilità IP.</p>
<h2 id="nota-importante"><strong>Nota importante</strong></h2>
<p>Lo scopo di questo articolo è unicamente didattico e informativo. <strong>Ogni azione non autorizzata</strong> verso qualunque sistema di controllo presente su una rete pubblica o privata <strong>è illegale</strong>! Le informazioni contenute in questo ed altri articoli hanno lo scopo di far com‌prendere quanto sia necessario migliorare i sistemi di difesa, e non di fornire strumenti per effettuarne l&rsquo;attacco. Violare un sistema informatico è perseguibile penalmente e può causare gravi danni a cose e persone, in modo particolare se si parla di ICS. Tutti i test che vengono illustrati nei tutorials sono stati effettuati in laboratori isolati, sicuri, o autorizzati dal produttore.</p>
<p>Stay safe, stay free.</p>
]]></content>
        </item>
        
        <item>
            <title>Hacking: Metasploit SCADA modules</title>
            <link>https://www.omarmorando.com/posts/2021/07/hacking-metasploit-scada-modules/</link>
            <pubDate>Mon, 05 Jul 2021 15:09:35 +0200</pubDate>
            
            <guid>https://www.omarmorando.com/posts/2021/07/hacking-metasploit-scada-modules/</guid>
            <description>Come penetration tester abbiamo molte risorse a disposizione per testare il livello di sicurezza di un sistema IT. Uno dei più diffusi strumenti è Metasploit Framework, sviluppato da Rapid7. Si tratta di uno strumento in grado di coprire le fasi di enumeration, exploitation e privilege escalation, molto flessibile e modulare.
Da diverso tempo ormai, vista l&amp;rsquo;attenzione che il mondo della cybersec sta dedicando alle infrastrutture ICS, possiamo trovare un lungo elenco di moduli Metasploit che hanno come target i sistemi SCADA, i PLC e i principali protocolli di comunicazione industriale.</description>
            <content type="html"><![CDATA[<p>Come penetration tester abbiamo molte risorse a disposizione per testare il livello di sicurezza di un sistema IT. Uno dei più diffusi strumenti è <a href="https://www.metasploit.com/">Metasploit Framework</a>, sviluppato da Rapid7. Si tratta di uno strumento in grado di coprire le fasi di enumeration, exploitation e privilege escalation, molto flessibile e modulare.</p>
<p>Da diverso tempo ormai, vista l&rsquo;attenzione che il mondo della cybersec sta dedicando alle infrastrutture ICS, possiamo trovare un lungo elenco di moduli Metasploit che hanno come target i sistemi SCADA, i PLC e i principali protocolli di comunicazione industriale.</p>
<p>Ed è proprio per via del fatto che i siti ICS utilizzano hardware e protocolli diversi occorre svolgere una fase di reconnaissance molto attenta per portare un attacco di successo. Serve conoscere il produttore e il protocollo per trovare il modulo appropriato.</p>
<p>Di seguito ho riassunto l&rsquo;elenco dei moduli presenti al momento della scrittura di questo articolo, suddivisi tra ausiliari (reconnaissance e commands) e di exploitation.</p>
<p><img src="/uploads/2021/metasploit_ot_1.png" alt="Auxiliary modules"></p>
<p><img src="/uploads/2021/metasploit_ot_2.png" alt="Exploit modules"></p>
<h2 id="nota-importante"><strong>Nota importante</strong></h2>
<p>Lo scopo di questo articolo è unicamente didattico e informativo. <strong>Ogni azione non autorizzata</strong> verso qualunque sistema di controllo presente su una rete pubblica o privata <strong>è illegale</strong>! Le informazioni contenute in questo ed altri articoli hanno lo scopo di far comprendere quanto sia necessario migliorare i sistemi di difesa, e non di fornire strumenti per effettuarne l&rsquo;attacco. Violare un sistema informatico è perseguibile penalmente e può causare gravi danni a cose e persone, in modo particolare se si parla di ICS. Tutti i test che vengono illustrati nei tutorials sono stati effettuati in laboratori isolati, sicuri, o autorizzati dal produttore.</p>
<p>Stay safe, stay free.</p>
]]></content>
        </item>
        
        <item>
            <title>Hacking: Schneider Electric Building Automation</title>
            <link>https://www.omarmorando.com/posts/2021/07/hacking-schneider-electric-building-automation/</link>
            <pubDate>Sun, 04 Jul 2021 15:09:35 +0200</pubDate>
            
            <guid>https://www.omarmorando.com/posts/2021/07/hacking-schneider-electric-building-automation/</guid>
            <description>I sistemi ICS controllano i processi industriali in tutto il mondo. Tutto, dalle ferrovie, ai semafori, alle raffinerie di petrolio, agli edifici commerciali, è controllato da almeno un PLC connesso a un terminale operatore HMI o a un software di controllo SCADA. Alcune delle recenti preoccupazioni legate ad essi è la possibile violazione da parte di cyber criminali o di enti governativi. In entrambi i casi i risultati potrebbero essere devastanti (il disastro di Bhopal nello stabilimento di Union Carbide è costato oltre 30.</description>
            <content type="html"><![CDATA[<p>I sistemi ICS controllano i processi industriali in tutto il mondo. Tutto, dalle ferrovie, ai semafori, alle raffinerie di petrolio, agli edifici commerciali, è controllato da almeno un PLC connesso a un terminale operatore HMI o a un software di controllo SCADA. Alcune delle recenti preoccupazioni legate ad essi è la possibile violazione da parte di cyber criminali o di enti governativi. In entrambi i casi i risultati potrebbero essere devastanti (il disastro di Bhopal nello stabilimento di Union Carbide è costato oltre 30.000 vite). Nonostante ciò, questi sistemi sono insolitamente vulnerabili all&rsquo;hacking e alle attività dannose.</p>
<p>In questo tutorial mostrerò come hackerare un sistema di controllo industriale di Schneider Electric, uno dei maggiori produttori al mondo di sistemi ICS e per la Buinding Automation. A causa della debole sicurezza integrata in fase di sviluppo, problema molto diffuso nei prodotti IIoT, alcuni di questi sistemi sono incredibilmente facili da violare e prenderne il controllo.</p>
<h3 id="conosciamo-meglio-il-nostro-target">Conosciamo meglio il nostro target</h3>
<p><a href="https://www.se.com/ww/en/">Schneider Electric</a> è una società con sede a Parigi, leader mondiale nel settore del controllo industriale. Sono stati tra i pionieri in questo campo introducendo molti concetti innovativi poi replicati dai concorrenti, e hanno anche il merito di aver sviluppato il protocollo di comunicazione più utilizzato nei sistemi di controllo industriale: il <a href="https://it.wikipedia.org/wiki/Modbus">Modbus</a>.</p>
<p>Schneider Electric all&rsquo;interno del proprio vasto catalogo conta anche una gamma di PLC dedicati all&rsquo;automazione degli edifici.</p>
<p><img src="/uploads/2021/building_1.png" alt="Un server della famiglia SmartStruxure"></p>
<p>Uno dei loro prodotti, lo SmartStruxure Automation Server, viene utilizzato negli edifici commerciali per controllare e automatizzare i numerosi sistemi tra cui riscaldamento e raffreddamento, illuminazione, sicurezza, ecc. Nel 2016, il ricercatore indipendente Karn Ganeshen ha individuato una vulnerabilità 0-day, oggetto poi di una patch da parte di Schneider, che permetteva di entrare nel server con una shell e acquisire i privilegi di root.</p>
<p>Ma andiamo con ordine.</p>
<h3 id="trovare-i-server-schneider-automation-con-shodan">Trovare i server Schneider Automation con Shodan</h3>
<p>Possiamo trovare questi server di automazione su Shodan cercando:</p>
<p><code>&quot;schneider electric&quot; automation</code></p>
<p><img src="/uploads/2021/building_2.png" alt="I risultati su Shodan"></p>
<p>Come possiamo notare, compare un lungo elenco di dispositivi direttamente connessi a Internet, con il relativo indirizzo IP pubblico. Nel nostro caso userò un prodotto dimostrativo all&rsquo;interno della rete locale.</p>
<h2 id="la-vulnerabilità">La vulnerabilità</h2>
<p>La vulnerabilità in oggetto consente all&rsquo;autore dell&rsquo;attacco di connettersi al server di automazione con una shell SSH utilizzando le credenziali predefinite e di ottenere facilmente i privilegi di &ldquo;root&rdquo;. Così facendo, l&rsquo;attaccante non possiede solo la &ldquo;scatola&rdquo;, ma l&rsquo;intero edificio!</p>
<h3 id="connessione-al-building-automation-server">Connessione al Building Automation Server</h3>
<p>Innanzitutto, colleghiamoci al nostro server con una shell SSH. Userò Kali Linux, ma dal momento che questo hack è molto semplice può essere eseguito usando qualsiasi distribuzione, senza l&rsquo;ausilio di strumenti di hacking particolari come ad es. Metasploit.</p>
<pre tabindex="0"><code>root@kali:~# ssh &lt;IP_address&gt; -l admin
</code></pre><p>Dopo che ci siamo connessi il server ci chiederà una password. Utilizziamo la password predefinita &ldquo;<strong>admin</strong>&rdquo;.</p>
<p><img src="/uploads/2021/root_1.png" alt=""></p>
<p>A questo punto siamo all&rsquo;interno dell&rsquo;account amministratore di Automation Server. Possiamo digitare <code>help</code> per vedere quali comandi possiamo usare con questo account.</p>
<p><img src="/uploads/2021/root_2.png" alt=""></p>
<p>Ad esempio, digitiamo <code>release</code>. Il sistema risponde con le informazioni sulla versione del server. Inoltre, va notato che uno dei comandi è <code>reboot</code>, che potrebbe essere utile nel caso di un attacco DoS.</p>
<p><img src="/uploads/2021/root_3.png" alt=""></p>
<p>Possiamo inoltre vedere il tempo trascorso dall&rsquo;ultimo avvio digitando il comando <code>uptime</code>. Questa informazione è sempre molto utile in fase di attacco perchè può indicare, normalmente, il tempo trascorso da quando il sistema ha subito una patch di aggiornamento.</p>
<pre tabindex="0"><code>admin:&gt; uptime
</code></pre><p><img src="/uploads/2021/root_4.png" alt=""></p>
<p>Uno dei punti deboli di questo sistema è che possiamo usare il comando Linux pipe &ldquo;|&rdquo; per inoltrare ulteriori comandi al server sottostante. Facendo un esempio pratico, possiamo vedere il file &ldquo;passwd&rdquo; sul server digitando:</p>
<pre tabindex="0"><code>admin:&gt; uptime | cat /etc/passwd
</code></pre><p><img src="/uploads/2021/root_5.png" alt=""></p>
<p>In questo modo abbiamo elencato tutti gli account presenti sul server. Naturalmente questo file contiene solo gli account e non le password, che invece si trovano nel file <strong>/etc/shadow</strong> accessibile unicamente con i diritti di <strong>root</strong>.</p>
<h3 id="privilege-escalation">Privilege escalation</h3>
<p>La fase di privilege escalation, nella maggior parte dei casi in campo IT, richiede procedure a volte lunghe e complesse, indipendentemente che si stia attaccando una macchina Windows o Linux. Ma come ho detto, nel campo OT non sempre i livelli di sicurezza sono (in questo caso, &ldquo;erano&rdquo;) adeguati. Possiamo ottenere il livello di root semplicemente digitando:</p>
<pre tabindex="0"><code>admin:&gt; sudo -i
</code></pre><p><img src="/uploads/2021/root_6.png" alt=""></p>
<p><strong>Boom!</strong> La configurazione predefinita di questo server di automazione dell&rsquo;edificio non ha password per l&rsquo;account &ldquo;root&rdquo;, quindi è sufficiente premere Invio quando viene richiesta una password.</p>
<p>Come possiamo vedere, il prompt diventa verde e indica che siamo root!</p>
<p>Dato che ora abbiamo i privilegi di root siamo in grado di fare praticamente qualsiasi cosa. Digitiamo <code>cat /etc/shadow</code> per vedere se riusciamo a recuperare gli hash delle password nella cartella <strong>/etc/shadow</strong>.</p>
<p><img src="/uploads/2021/root_7.png" alt=""></p>
<p>Ed ecco che siamo riusciti a ottenere tutti gli account e i loro hash delle password! Se necessario, potremmo scoprirle attraverso un attacco brute-force come <strong>hashcat</strong> per recuperare le password in chiaro.</p>
<p>È probabile che il file di configurazione per Automation Server sia nella directory <strong>/etc</strong>. Entriamo in questa cartella ed elenchiamo tutti i file e le directory.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">root:&gt; cd /etc
root:&gt; ls -l
</code></pre></div><p><img src="/uploads/2021/root_8.png" alt=""></p>
<p>Se scorriamo questo elenco troviamo un file chiamato &ldquo;whitelist.rules&rdquo;, che probabilmente contiene le regole per la connessione al server. Apriamolo.</p>
<pre tabindex="0"><code>root:&gt; cat whitelist.rules
</code></pre><p><img src="/uploads/2021/root_9.png" alt=""></p>
<p>L&rsquo;amministratore di sistema non ha mai impostato &ldquo;whitelist.rules&rdquo; su questo server e, di conseguenza, chiunque può connettersi.</p>
<p>Infine, poiché abbiamo i privilegi di root possiamo aggiungere un nuovo utente che possano fare da backdoor. Prima di partire, posso aggiungermi agli utenti, concedermi i privilegi di root e aggiungermi a whitelist.rules, in modo che anche se l&rsquo;amministratore dovesse correggere questa vulnerabilità avrò comunque un account e potrò accedere ancora a questo server.</p>
<pre tabindex="0"><code>root:&gt; useradd cyberhood
</code></pre><p>Questo esempio risale alle vulnerabilità scoperte nel 2016 e riconosciute da Schneider Electric, che successivamente ha aggiornato i propri sistemi al fine di impedire un accesso così facile al server. Maggiori informazioni le puoi <a href="https://download.schneider-electric.com/files?p_Doc_Ref=SEVD-2016-025-01">trovare qui</a>.</p>
<p><strong>N.B.</strong> Lo scopo di questa guida non è certo quello di screditare un produttore a discapito di un altro, ma vuole unicamente evidenziare quanto lavoro ci sia da fare sui <strong>prodotti OT di tutti i principali produttori</strong> al fine di renderli &ldquo;<strong>secure by design</strong>&rdquo;, progettati e costruiti con criteri di sicurezza intrinseca.</p>
<h2 id="nota-importante"><strong>Nota importante</strong></h2>
<p>Lo scopo di questo articolo è unicamente didattico e informativo. <strong>Ogni azione non autorizzata</strong> verso qualunque sistema di controllo presente su una rete pubblica o privata <strong>è illegale</strong>! Le informazioni contenute in questo ed altri articoli hanno lo scopo di far comprendere quanto sia necessario migliorare i sistemi di difesa, e non di fornire strumenti per effettuarne l&rsquo;attacco. Violare un sistema informatico è perseguibile penalmente e può causare gravi danni a cose e persone, in modo particolare se si parla di ICS. Tutti i test che vengono illustrati nei tutorials sono stati effettuati in laboratori isolati, sicuri, o autorizzati dal produttore.</p>
<p>Stay safe, stay free.</p>
]]></content>
        </item>
        
        <item>
            <title>Hacking: trovare SCADA in rete usando Google Dorks</title>
            <link>https://www.omarmorando.com/posts/2021/07/hacking-trovare-scada-in-rete-usando-google-dorks/</link>
            <pubDate>Sat, 03 Jul 2021 15:09:35 +0200</pubDate>
            
            <guid>https://www.omarmorando.com/posts/2021/07/hacking-trovare-scada-in-rete-usando-google-dorks/</guid>
            <description>Si stima che Google abbia archiviato più pagine di un qualsiasi altro motore di ricerca del mondo. Con oltre miliardi di pagine e un tempo relativamente basso di esecuzione, il popolare motore di ricerca californiano riesce a soddisfare tutte le ricerche, sia eseguite per fini di curiosità sia per scopi meno innoqui.
Il motore di ricerca è così potente da poter categorizzare oltre 15 milioni di pagine in meno di un minuto.</description>
            <content type="html"><![CDATA[<p>Si stima che Google abbia archiviato più pagine di un qualsiasi altro motore di ricerca del mondo. Con oltre miliardi di pagine e un tempo relativamente basso di esecuzione, il popolare motore di ricerca californiano riesce a soddisfare tutte le ricerche, sia eseguite per fini di curiosità sia per scopi meno innoqui.</p>
<p>Il motore di ricerca è così potente da poter categorizzare oltre 15 milioni di pagine in meno di un minuto.</p>
<p>Oltre a ciò, si ipotizza che ogni secondo siano condotte oltre 60 mila ricerche attraverso motore di ricerca Google. Questo significa oltre <strong>1.000 miliardi</strong> di ricerche all’anno! Numeri astronomici a cui Google riesce a stare dietro con l’enorme infrastruttura che ha realizzato.</p>
<p>Sicuramente i motori di ricerca hanno stravolto la vita di molte persone; avere così tante informazioni nel giro di 1 minuto è un punto di riflessione per chiunque. Ma la cosa più sorprendente, nonostante questi numero, è che sfruttiamo una parcentuale minima delle potenzialità che questo strumento ci offre.</p>
<p>Poche persone sanno che Google ha un linguaggio proprietario per estrarre tali informazioni oltre a cercare tramite parole chiave. Anche solo con una scarsa conoscenza delle parole chiave di Google, puoi trovare molte più informazioni di quanto tu abbia mai immaginato.Vediamone alcune.</p>
<h2 id="cosa-sono-le-google-dorks">Cosa sono le Google Dorks</h2>
<p>Le dork vengono definite come query di ricerca che, anzichè contenere semplicemente la descrizione di ciò che stiamo cercando, sono composte anche da diverse keywods che permettono di affinare i parametri della ricerca stessa, al fine di ottenere dei risultati specifici.</p>
<h3 id="scopi-per-cui-vengono-utilizzate">Scopi per cui vengono utilizzate</h3>
<p>Come detto, le dorks vengono utilizzate principalmente per affinare i risultati di ricerca, al fine di avere un elenco di links più specifici.</p>
<p>Come esempio molto semplice, proviamo ad eseguire la ricerca sulla &ldquo;pizza napoletana&rdquo;. La semplice parola &ldquo;pizza&rdquo;, cercata su Google, ha oltre 1.360.000.000 di risultati, mentre combinata con la parola &ldquo;napoletana&rdquo; i risultati scendono drasticamente (ne rimangono comunque più di 15 milioni&hellip;). Questa è già un tentativo di affinare la nostra ricerca per restringere il campo di ricerca.</p>
<p>Partendo dal presupposto che alcuni sysadmin potrebbero non aver applicato alcune regole, è possibile cercare alcuni file riservati e/o confidenziali, non destinati al grande pubblico di Internet. Attenzione però: sebbene alcuni webmaster espongano informazioni sensibili per conto proprio, questo non significa che sia legale sfruttarle al fine di ottenerne un vantaggio (economico o non). La semplice consultazione non è reato, ma lo sfruttamento sì ed è perseeguito penalmente. È abbastanza facile tracciare l’IP di navigazione, anche se si utilizza un servizio VPN. Non è così anscarsa conoscenza delle parole chiave di Google, puoi trovare più informazioni di quanto tu abbia mai immaginato.onimo come si pensa.</p>
<p>Molte vulnerabilità vengono cercate da <strong>script kiddies</strong> proprio tramite Google. Un’attenta query infatti cerca per messaggi di errori, file di configurazione o altro che potrebbero in qualche modo esporre all’esterno versione del software o dati riservati.</p>
<h3 id="alcune-dorks-di-esempio">Alcune dorks di esempio</h3>
<table>
<thead>
<tr>
<th>Nome dorks</th>
<th>Descrizione</th>
<th>Esempio</th>
</tr>
</thead>
<tbody>
<tr>
<td>site:<em>domain</em></td>
<td>i risultati saranno file e pagine presenti nel dominio domain</td>
<td>site:w3school.com</td>
</tr>
<tr>
<td>intitle:<em>parola</em></td>
<td>i risultati conterranno nel titolo la parola dopo la dork “intitle”</td>
<td>intitle:hi</td>
</tr>
<tr>
<td>inurl:<em>parola</em></td>
<td>i risultati conterranno nel titolo la parola dopo la dork “inurl”</td>
<td>inurl:gallery</td>
</tr>
<tr>
<td>intext:<em>testo</em></td>
<td>i risultati conterranno pagine con il &ldquo;testo&rdquo; ricercato</td>
<td>intext:&ldquo;Index of&rdquo;</td>
</tr>
<tr>
<td>ext:<em>estensione</em></td>
<td>i risultati conterranno files con l&rsquo;estensione richiesta</td>
<td>ext:jpg</td>
</tr>
<tr>
<td>filetype:<em>type</em></td>
<td>i risultati conterranno file della estensione specificata da type</td>
<td>filetype:pdf</td>
</tr>
<tr>
<td>cache:<em>url</em></td>
<td>reindirizza l’utente alla cache Google dell’url specificato</td>
<td>cache:cyberhood.eu</td>
</tr>
<tr>
<td>info:<em>root_domain</em></td>
<td>il risultato conterrà il dominio principale (root domain) e tutte le informazioni relative</td>
<td>info:amazon.com</td>
</tr>
</tbody>
</table>
<p>Va detto che le dorks possono essere concatenate in modo da affinare ulteriormente la nostra ricerca, come ad esempio <code>ext:ini intext:env.ini</code> oppure <code>ext:mdb inurl:*.mdb inurl:fpdb shop.mdb</code> .</p>
<h2 id="google-dorks-per-gli-scada">Google Dorks per gli SCADA</h2>
<p>Va detto che non esiste una singola dork di Google che rivelerà ogni interfaccia SCADA esistente in rete, questo perchè dipende molto dal produttore e dai prodotti utilizzati. Ogni azienda crea i propri sistemi embedded con caratteristiche proprietarie. Condividono protocolli e procedure comuni, ma in generale sono oggetti unici.</p>
<p>Alcuni dei principali produttori sono: Siemens, Schneider Electric, Rockwell Automation, GE. Oltre a questo, va considerato che ognuna di queste aziende produce più prodotti appartenenti alla stessa famiglia, per cui la ricerca richiede che vengano sviluppate delle Google Dorks specifiche per ciascuno di essi. Di seguito una breve sintesi di alcune delle principali marche e relative queries.</p>
<p><img src="/uploads/2021/dorks_1.png" alt=""></p>
<h3 id="uso-delle-google-dorks">Uso delle Google Dorks</h3>
<p>Ora che abbiamo le idee un po' più chiare, almeno lo spero, proviamo ad eseguire alcune dorks per trovare specifici sistemi SCADA. Cominciamo con uno dei prodotti più diffusi in Italia negli impianti di automazione: il PLC della serie S7 di Siemens. Come nota, ti ricordo che è la stessa famiglia di controller che sono stati il bersaglio del famigerato attacco Stuxnet contro la centrale nucleare iraniana di Natanz nel 2010, probabilmente il più sofisticato attacco SCADA al momento  mai realizzato.</p>
<p>La nostra Google Dork è composta in questo modo: <code>inurl:/Portal/Portal.mwsl</code></p>
<p>Quando la utilizziamo in una ricerca di Google, otteniamo i risultati visualizzati di seguito.</p>
<p><img src="/uploads/2021/dorks_2.png" alt=""></p>
<p>Se selezioniamo la prima voce dell&rsquo;elenco (Siemens S7-1200_1) accediamo alla pagina seguente:</p>
<p><img src="/uploads/2021/dorks_3.png" alt=""></p>
<p>Questo sembra essere il portale di amministrazione del PLC Siemens S7 da qualche parte nel mondo. Per proseguire la nostra ricerca, inseriamo l&rsquo;indirizzo IP che Google ci ha fornito (78.218.196.95) in Shodan per vedere dove si trovi. E' a Bruyères in Francia.</p>
<p><img src="/uploads/2021/shodan_siemens_1.png" alt=""></p>
<p>Quando si fa clic sulla scheda &ldquo;<strong>Identification</strong>&rdquo; a sinistra, il PLC si identifica come una stazione S7-1200_1/PLC_1. Inoltre ci fornisce il numero di serie e la versione del firmware (così ci semplifica un eventuale attacco).</p>
<p><img src="/uploads/2021/shodan_siemens_2.png" alt=""></p>
<p>La stessa cosa succede se selezioniamo la voce &ldquo;<strong>Communication</strong>&rdquo; sempre dal menù a sinistra.</p>
<p><img src="/uploads/2021/shodan_siemens_3.png" alt=""></p>
<p>Come possiamo vedere, la sicurezza dei sistemi ICS è ancora agli inizi, basandosi principalmente sulla sicurezza per oscurità. Queste semplici Google Dorks espongono in modo fin troppo facile degli impianti spesso critici senza il minimo criterio di sicurezza. Anche un hacker con abilità rudimentali può accedere ai sistemi di controllo e provocare il caos.</p>
<h2 id="nota-importante"><strong>Nota importante</strong></h2>
<p>Lo scopo di questo articolo è unicamente didattico e informativo. <strong>Ogni azione non autorizzata</strong> verso qualunque sistema di controllo presente su una rete pubblica o privata <strong>è illegale</strong>! Le informazioni contenute in questo ed altri articoli hanno lo scopo di far comprendere quanto sia necessario migliorare i sistemi di difesa, e non di fornire strumenti per effettuarne l&rsquo;attacco. Violare un sistema informatico è perseguibile penalmente e può causare gravi danni a cose e persone, in modo particolare se si parla di ICS. Tutti i test che vengono illustrati nei tutorials sono stati effettuati in laboratori isolati, sicuri, o autorizzati dal produttore.</p>
<p>Stay safe, stay free.</p>
]]></content>
        </item>
        
        <item>
            <title>La sicurezza industriale</title>
            <link>https://www.omarmorando.com/posts/2021/07/la-sicurezza-industriale/</link>
            <pubDate>Fri, 02 Jul 2021 15:09:35 +0200</pubDate>
            
            <guid>https://www.omarmorando.com/posts/2021/07/la-sicurezza-industriale/</guid>
            <description>La sicurezza informatica industriale è sempre stata una sfida. Per quanto già complessa in sè, la pandemia che stiamo affrontando nel 2020 complicato ulteriomente le cose. Secondo il recente rapporto dell&amp;rsquo;ARC Advisory Group, il numero di lavoratori remoti tra le organizzazioni industriali è aumentato del 53%, creando attività aggiuntive per i professionisti IT e OT. Allo stesso tempo, solo circa un quarto delle società industriali ha sviluppato un piano strategico di risposta agli incidenti.</description>
            <content type="html"><![CDATA[<p><img src="/uploads/2021/sicurezza_ot_1.png" alt=""></p>
<p>La sicurezza informatica industriale è sempre stata una sfida. Per quanto già complessa in sè, la pandemia che stiamo affrontando nel 2020 complicato ulteriomente le cose. Secondo il recente rapporto dell&rsquo;ARC Advisory Group, il numero di lavoratori remoti tra le organizzazioni industriali è aumentato del 53%, creando attività aggiuntive per i professionisti IT e OT. Allo stesso tempo, solo circa un quarto delle società industriali ha sviluppato un piano strategico di risposta agli incidenti.</p>
<p><img src="/uploads/2021/sicurezza_ot_2.png" alt=""></p>
<p>Mentre alcune delle grandi imprese industriali possono avere budget sufficienti e professionisti competenti per affrontare in modo efficacie un progetto di sicurezza OT, altre sperimentano la mancanza di risorse. Secondo lo stesso rapporto, il 24% delle organizzazioni industriali ha riscontrato una riduzione del budget ICS. Il paradosso è che crescono le esigenze di accesso, che richiedono la visibilità da remoto delle aree più critiche delle loro infrastrutture industriali.</p>
<p><img src="/uploads/2021/sicurezza_ot_3.png" alt=""></p>
<h2 id="approccio-strutturato-alla-sicurezza-ot">Approccio strutturato alla sicurezza OT</h2>
<p>Ci sono buone notizie per le aziende, che stanno pensando a come affrontare il loro programma di sicurezza OT. Seguendo i 5 passaggi universali descritti di seguito, qualsiasi organizzazione industriale può riconoscere, strutturare e assegnare priorità alle proprie reali esigenze di sicurezza. Inoltre, può identificare le azioni più richieste con i budget e le risorse disponibili.</p>
<p><img src="/uploads/2021/sicurezza_ot_4.png" alt=""></p>
<h3 id="fase-1-conduzione-dellaudit-di-sicurezza">FASE 1. Conduzione dell&rsquo;audit di sicurezza</h3>
<p>Le aziende spesso sottovalutano l&rsquo;importanza della diagnostica della sicurezza informatica. Tuttavia, questo passaggio è fondamentale per le reti OT sensibili, poiché consente di ottenere visibilità attraverso i processi di sicurezza esistenti. Aiuta anche a identificare i problemi, impostare obiettivi di sicurezza adeguati e pianificare i passaggi successivi con fiducia. Acquisendo la comprensione di quali tecnologie sono realmente necessarie, è possibile spendere saggiamente il budget disponibile.</p>
<h3 id="fase-2-trovare-le-tecnologie-per-la-sicurezza">FASE 2. Trovare le tecnologie per la sicurezza</h3>
<p>Con l&rsquo;elevata diversità degli ambienti OT su più verticali industriali, potrebbe essere difficile trovare una singola tecnologia o un fornitore in grado di soddisfare tutti i requisiti di sicurezza OT del cliente. È più comune trovare una combinazione di tecnologie compatibili scalabili per le esigenze dell&rsquo;organizzazione industriale. Se non è disponibile una soluzione adeguata sul mercato, l&rsquo;opzione migliore può essere quella di cercare una tecnologia adatta tra grandi o piccoli fornitori di sicurezza o persino svilupparla da zero.</p>
<h3 id="fase-3-implementare-in-modo-adeguato-la-sicurezza">FASE 3. Implementare in modo adeguato la sicurezza</h3>
<p>La continuità dei processi industriali e la sicurezza umana e ambientale sono le massime priorità per le reti OT. Pertanto, le soluzioni di sicurezza OT devono essere attentamente implementate e configurate secondo gli standard di conformità locali e internazionali, che includono ISO/IEC 27001, NIST SP, ISA/IEC 62443, NERC CIP e altri standard di riferimento.</p>
<h3 id="fase-4-gestione-professionale-della-sicurezza">FASE 4. Gestione professionale della sicurezza</h3>
<p>La gestione della sicurezza OT può essere complessa, poiché copre più aree e richiede competenze di gestione della sicurezza diverse. Inoltre, l&rsquo;approccio alla sicurezza informatica delle reti IT e OT è diverso, portando alla carenza di professionisti della sicurezza tra le organizzazioni industriali. Le imprese industriali possono superare questa sfida ricoprendo ruoli di gestione della sicurezza e governando i progetti di sicurezza, internamente o con i servizi SOC in outsourcing. Il monitoraggio costante della sicurezza aiuta a riconoscere i modelli sospetti e rilevare incidenti di sicurezza e attacchi informatici nelle loro fasi iniziali.</p>
<h3 id="fase-5-formazione-continua-sulla-sicurezza">FASE 5. Formazione continua sulla sicurezza</h3>
<p>La sicurezza informatica è un&rsquo;area in costante sviluppo, che richiede il contributo di ogni dipendente all&rsquo;interno di un&rsquo;organizzazione industriale. La formazione sulla consapevolezza della sicurezza comune viene utilizzata per sviluppare capacità di sicurezza e sane abitudini quotidiane tra i team non IT e i manager di livello C. Allo stesso tempo, la formazione avanzata, che include la sicurezza OT dedicata, la Threat Intelligence e altri corsi avanzati, viene utilizzata per migliorare le competenze dei professionisti IT e della sicurezza OT, responsabili della protezione delle infrastrutture OT contro gli attacchi informatici.</p>
<p>Stay safe, stay free.</p>
]]></content>
        </item>
        
        <item>
            <title>Differenze tra IT e OT</title>
            <link>https://www.omarmorando.com/posts/2021/07/differenze-tra-it-e-ot/</link>
            <pubDate>Thu, 01 Jul 2021 15:09:35 +0200</pubDate>
            
            <guid>https://www.omarmorando.com/posts/2021/07/differenze-tra-it-e-ot/</guid>
            <description>Per coloro che provengono dal mondo IT la sicurezza informatica dei sistemi ICS può rappresentare un ostacolo inizialmente frustrante. Questo perchè le loro conoscenze sulle tecnologie e sulle modalità di lavoro sono molto diverse nei sistemi OT, a partire dagli obiettivi che questi due settori hanno.
Protezione dei dati vs. Protezione del processo Quando lavoriamo per proteggere i sistemi IT ci poniamo come obiettivo quello di proteggere i dati. Questi includono la proprietà intellettuale (IP), i numeri di carta di credito, le e-mail e le informazioni di identificazione personale (PII).</description>
            <content type="html"><![CDATA[<p>Per coloro che provengono dal mondo IT la sicurezza informatica dei sistemi ICS può rappresentare un ostacolo inizialmente frustrante. Questo perchè le loro conoscenze sulle tecnologie e sulle modalità di lavoro sono molto diverse nei sistemi OT, a partire dagli obiettivi che questi due settori hanno.</p>
<h3 id="protezione-dei-dati-vs-protezione-del-processo">Protezione dei dati vs. Protezione del processo</h3>
<p>Quando lavoriamo per proteggere i sistemi IT ci poniamo come obiettivo quello di proteggere i dati. Questi includono la proprietà intellettuale (IP), i numeri di carta di credito, le e-mail e le informazioni di identificazione personale (PII). Stiamo cercando di impedire all&rsquo;hacker di avere accesso a quello che, per un&rsquo;azienda, può rappresentare gran parte del proprio patrimonio.</p>
<p>Ciò contrasta nettamente con i sistemi ICS in cui il principale obiettivo è <strong>proteggere il processo</strong>. Essi sono concepiti per un&rsquo;elaborazione continua del ciclo di lavorazione, e non è solo per una questione economica. In alcuni casi, un arresto non previsto di un&rsquo;impianto può richiedere giorni, settimane o addirittura mesi per il suo riavvio, causando ingenti danni.</p>
<p>Basti pensare, ad esempio, a un sistema ICS che controlla la generazione e la distribuzione elettrica o agli impianti di acqua potabile e reflue, la cui interruzione può causare gravi problemi. Oltre al grande disagio si può incorrere in situazioni che mettono in pericolo la salute delle persone, sottolineando la necessità di proteggere il processo.</p>
<p><img src="/uploads/2021/differenze_1.jpg" alt=""></p>
<h3 id="tecnologie">Tecnologie</h3>
<p>Nei sistemi IT tradizionali siamo abituati a lavorare con protocolli come TCP, IP, UDP, DNS, DHCP, ecc. La maggior parte dei sistemi ICS utilizza uno degli oltre 100 protocolli dedicati, di cui alcuni proprietari. I più diffusi sul mercato sono Modbus, DNP3, ProfiNet/Profibus, OPC e altri ancora.</p>
<p>Un sistema ICS basa il proprio funzionamento operativo sul <em>Controllore a Logica Programmabile</em> o PLC. Questi sono utilizzati per quasi ogni tipo di sistema di controllo industriale, sia che si tratti di produzione, raffinazione del petrolio, trasmissione di elettricità, trattamento delle acque, ecc. I PLC sono comparabili a computer industriali, con un loro Sistema Operativo proprietario. Utilizzano linguaggi di programmazione che derivano dal mondo della logica elettromeccanica, come il Ladder Logic, per controllare sensori, attuatori, valvole, allarmi e altri dispositivi. L&rsquo;hacking dei sistemi ICS richiede spesso una conoscenza della programmazione di questi PLC.</p>
<p><img src="/uploads/2021/differenze_2.png" alt="PLC Schneider Electric serie compatta"></p>
<h3 id="requisiti-di-disponibilità">Requisiti di disponibilità</h3>
<p>Sebbene la <strong>disponibilità</strong> (CIA) sia un componente chiave della sicurezza IT tradizionale, i sistemi ICS la portano ad un altro livello. Come accennato in precedenza, stiamo proteggendo il processo, piuttosto che i dati. Ciò significa che spesso l&rsquo;opzione di applicare una patch software e riavviare il sistema potrebbe NON essere un&rsquo;opzione se non a intervalli discreti, quali arresti di manutenzione annuali o trimestrali. Ciò può significare che il sistema operativo e le applicazioni possono rimanere privi di patch con vulnerabilità note per mesi, se non addirittura per anni. L&rsquo;ingegnere dei sistemi SCADA o PLC deve spesso optare per controlli compensativi per prevenire intrusioni, rispetto ad un approccio molto più rapido di un amministratore della sicurezza IT che sarebbe in grado di applicare delle patch a intervalli molto più rapidi.</p>
<h3 id="accesso-ai-componenti">Accesso ai componenti</h3>
<p>Con alcune eccezioni, nel tradizionale campo della sicurezza IT il tecnico della sicurezza ha accesso fisico diretto ai componenti del sistema. Nei sistemi ICS i componenti del sistema possono essere distribuiti su centinaia o migliaia di metri (es. condutture, rete elettrica, ecc.). Ciò può rendere difficile l&rsquo;implementazione dei controlli di sicurezza. Le stazioni remote in campo possono diventare un punto di accesso per l&rsquo;hacker all&rsquo;intero sistema ICS.</p>
<h3 id="sicurezza-attraverso-loscurità">Sicurezza attraverso l&rsquo;oscurità</h3>
<p>Negli ultimi tempi, e di recente col concetto di Industria 4.0, molti dei sistemi ICS sono stati progressivamente collegati a Internet tramite una connessione TCP/IP diretta. Sebbene la comunicazione interna possa essere ancora gestita con reti proprietarie, l&rsquo;accesso remoto consente un monitoraggio continuo da parte dei responsabili degli impianti. Rimangono comunque delle eccezioni, come ad esempio alcune dighe e altri sistemi di infrastrutture pubbliche che rimangono off-line per proteggerli dagli aggressori.</p>
<p><img src="/uploads/2021/differenze_3.png" alt="Sicurezza ottenuta tramite una protezione &ldquo;air gap&rdquo;"></p>
<p>Per anni questi sistemi hanno beneficiato della <strong>sicurezza attraverso l&rsquo;oscurità</strong>. In altre parole, erano al sicuro perché poche persone sapevano della loro esistenza e ancora meno capivano le loro tecnologie. I protocolli utilizzati erano noti solo a tecnici del settore, a chi aveva avuto modo di acquisire esperienza diretta lavorando a stretto contatto con SCADA, PLC e terminali HMI.</p>
<p>Questo sta diventando il loro punto debole, perchè oggi sono esposti in rete senza che siano state implementate le misure di sicurezza più elementari. Un esempio è ciò che è accaduto nel 2016 ad opera del ricercatore indipendente Karn Ganeshen che è riuscito a entrare in un sistema di <a href="https://download.schneider-electric.com/files?p_Doc_Ref=SEVD-2016-025-01">Building Automation di Schneider Electric</a> sfruttando una vulnerabilità 0-day e ottenendo un accesso <strong>root</strong> al server.</p>
<p>Con l&rsquo;avvento di strumenti come <a href="https://www.shodan.io/">Shodan</a> e di altri strumenti di ricognizione questi sistemi non possono più fare affidamento sulla sicurezza attraverso l&rsquo;oscurità. L&rsquo;industria sta iniziando solo ora ad attuare misure di sicurezza modeste. Una delle sfide più grandi è che molti prodotti di sicurezza standard IT non garantisco lo stesso livello di protezione con i protocolli industriali. Nella maggior parte dei casi occorre personalizzare i firewall e gli IDS per renderli compatibili ed applicabili all&rsquo;OT.</p>
<p>Di fronte alla minaccia del cyber terrorismo e della guerra cibernetica la protezione dei sistemi ICS è cruciale. A partire dal 2010 sono diventati i primi bersagli presi di mira non solo da hacker criminali ma anche da governi, come nel caso di <a href="https://it.wikipedia.org/wiki/Stuxnet">Stuxnet</a> o del targeting Russo del sistema elettrico Ucraino durante il loro conflitto.</p>
<p>Stay safe, stay free.</p>
]]></content>
        </item>
        
        <item>
            <title>Création d&#39;un nouveau thème</title>
            <link>https://www.omarmorando.com/posts/2014/09/cr%C3%A9ation-dun-nouveau-th%C3%A8me/</link>
            <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
            
            <guid>https://www.omarmorando.com/posts/2014/09/cr%C3%A9ation-dun-nouveau-th%C3%A8me/</guid>
            <description>Introduction Ce tutoriel vous montrera comment créer un thème simple pour Hugo. Je suppose que vous êtes familier avec HTML, la ligne de commande bash, et que vous êtes à l&amp;rsquo;aise avec Markdown pour formater le contenu. Je vais expliquer comment Hugo utilise des modèles et comment vous pouvez organiser vos modèles pour créer un thème. Je ne couvrirai pas l&amp;rsquo;utilisation de CSS pour styliser votre thème.
Nous allons commencer par créer un nouveau site avec un modèle très basique.</description>
            <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Ce tutoriel vous montrera comment créer un thème simple pour Hugo. Je suppose que vous êtes familier avec HTML, la ligne de commande bash, et que vous êtes à l&rsquo;aise avec Markdown pour formater le contenu. Je vais expliquer comment Hugo utilise des modèles et comment vous pouvez organiser vos modèles pour créer un thème. Je ne couvrirai pas l&rsquo;utilisation de CSS pour styliser votre thème.</p>
<p>Nous allons commencer par créer un nouveau site avec un modèle très basique. Ensuite, nous ajouterons quelques pages et des publications. Avec de petites variations, vous pourrez créer de nombreux types de sites web.</p>
<p>Dans ce tutoriel, les commandes que vous entrez commenceront par l&rsquo;invite &ldquo;$&rdquo;. La sortie suivra. Les lignes qui commencent par &ldquo;#&rdquo; sont des commentaires que j&rsquo;ai ajoutés pour expliquer un point. Lorsque je montre les mises à jour d&rsquo;un fichier, le &ldquo;:wq&rdquo; sur la dernière ligne signifie qu&rsquo;il faut sauvegarder le fichier.</p>
<p>Voici un exemple :</p>
<pre tabindex="0"><code>## Ceci est un commentaire
$ echo ceci est une commande
ceci est une commande

## édition d'un fichier
$vi foo.md
+++
date = &quot;2014-09-28&quot;
title = &quot;Création d'un nouveau thème&quot;
+++

Contenu du fichier
:wq

## L'afficher
$ cat foo.md
+++
date = &quot;2014-09-28&quot;
title = &quot;Création d'un nouveau thème&quot;
+++

Contenu du fichier
$
</code></pre><h2 id="quelques-définitions">Quelques définitions</h2>
<p>Il y a quelques concepts que vous devez comprendre avant de créer un thème.</p>
<h3 id="skins">Skins</h3>
<p>Les skins sont les fichiers responsables de l&rsquo;apparence de votre site. C&rsquo;est le CSS qui contrôle les couleurs et les polices, c&rsquo;est le Javascript qui détermine les actions et les réactions. Ce sont aussi les règles que Hugo utilise pour transformer votre contenu en HTML que le site montrera aux visiteurs.</p>
<p>Vous avez deux façons de créer un skin. Le moyen le plus simple est de le créer dans le répertoire <code>layouts/</code>. Si vous le faites, vous n&rsquo;avez pas à vous soucier de configurer Hugo pour le reconnaître. Le premier endroit où Hugo recherchera pour les règles et les fichiers se trouve dans le répertoire <code>layouts/</code> afin de trouver toujours le skin.</p>
<p>Votre deuxième choix est de le créer dans un sous-répertoire du répertoire <code>themes/</code>. Si vous le faites, vous devez toujours indiquer à Hugo où chercher le skin. C&rsquo;est un travail supplémentaire, cependant, alors, pourquoi s&rsquo;embêter avec ça?</p>
<p>La différence entre la création d&rsquo;un skin dans <code>layouts/</code> et la création dans <code>themes/</code> est très subtile. Un skin dans <code>layouts/</code> ne peut pas être personnalisé sans mettre à jour les modèles et les fichiers statiques sur lesquels il est construit. Un skin créé dans <code>themes/</code>, d&rsquo;autre part, peut être et facilite son utilisation par d&rsquo;autres personnes.</p>
<p>Le reste de ce tutoriel appellera un skin créé dans le répertoire <code>thèmes/</code>, un thème.</p>
<p>Notez que vous pouvez utiliser ce tutoriel pour créer un skin dans le répertoire <code>layouts/</code> si vous le souhaitez. La principale différence sera que vous n&rsquo;aurez pas besoin de mettre à jour le fichier de configuration du site pour utiliser un thème.</p>
<h3 id="la-page-daccueil">La page d&rsquo;accueil</h3>
<p>La page d&rsquo;accueil, ou la page de destination, est la première page que beaucoup de visiteurs d&rsquo;un site voient. C&rsquo;est le fichier index.html dans le répertoire racine du site Web. Puisque Hugo écrit des fichiers dans le répertoire public/, notre page d&rsquo;accueil est public/index.html.</p>
<h3 id="fichier-de-configuration-du-site">Fichier de configuration du site</h3>
<p>Lorsque Hugo s&rsquo;exécute, il recherche un fichier de configuration qui contient des paramètres qui remplacent les valeurs par défaut pour l&rsquo;ensemble du site. Le fichier peut utiliser TOML, YAML ou JSON. Je préfère utiliser TOML pour mes fichiers de configuration. Si vous préférez utiliser JSON ou YAML, vous devrez traduire mes exemples. Vous devrez également modifier le nom du fichier puisque Hugo utilise l&rsquo;extension pour déterminer comment le traiter.</p>
<p>Hugo traduit les fichiers Markdown en HTML. Par défaut, Hugo s&rsquo;attend à trouver des fichiers Markdown dans votre répertoire <code>content/</code> and les modèles dans le répertoire <code>themes/</code>. Il créera les fichiers HTML dans votre répertoire <code>public/</code>. Vous pouvez le modifier en spécifiant d&rsquo;autres emplacements dans le fichier de configuration.</p>
<h3 id="le-contenu">Le contenu</h3>
<p>Le contenu est stocké dans des fichiers texte contenant deux sections. La première section est la &ldquo;section liminaire&rdquo;, qui contient les méta-informations sur le contenu. La deuxième section contient le Markdown qui sera converti en HTML.</p>
<h4 id="section-liminaire">Section liminaire</h4>
<p>La section liminaire est une information sur le contenu. Comme le fichier de configuration, il peut être écrit en TOML, YAML ou JSON. Contrairement au fichier de configuration, Hugo n&rsquo;utilise pas l&rsquo;extension du fichier pour connaître le format. Il recherche des marqueurs pour signaler le type. TOML est entouré de &ldquo;<code>+++</code>&rdquo;, YAML par &ldquo;<code>---</code>&rdquo;, et JSON est enfermé dans des accolades. Je préfère utiliser TOML, donc vous devrez traduire mes exemples si vous préférez YAML ou JSON.</p>
<p>L&rsquo;information dans la section liminaire est transmise au modèle avant que le contenu ne soit rendu en HTML.</p>
<h4 id="markdown">Markdown</h4>
<p>Le contenu est écrit dans Markdown qui facilite la création du contenu. Hugo exécute le contenu via un moteur Markdown pour créer le code HTML qui sera écrit dans le fichier de sortie.</p>
<h3 id="modèles">Modèles</h3>
<p>Hugo utilise des modèles pour rendre le contenu en HTML. Les modèles sont un pont entre le contenu et la présentation. Les règles du modèle définissent quel contenu est publié, où il est publié et comment il sera rendu au fichier HTML. Le modèle guide la présentation en spécifiant le style à utiliser.</p>
<p>Il existe trois types de modèles: simple, liste et partiel. Chaque type prend un peu de contenu comme entrée et le transforme en fonction des commandes du modèle.</p>
<p>Hugo utilise sa connaissance du contenu pour trouver le modèle a utiliser pour rendre le contenu. S&rsquo;il ne peut pas trouver un modèle qui correspond exactement au contenu, il changera de niveau et recherchera à partir de là. Il continuera à le faire jusqu&rsquo;à ce qu&rsquo;il trouve un modèle correspondant ou ne dispose plus de modèles à essayer. S&rsquo;il ne peut pas trouver un modèle, il utilisera le modèle par défaut pour le site.</p>
<p>Veuillez noter que vous pouvez utiliser la section liminaire pour influencer le choix de modèles de Hugo.</p>
<h4 id="modèle-simple">Modèle simple</h4>
<p>Un modèle simple est utilisé pour rendre un seul contenu. Par exemple, un article ou une publication serait un seul élément de contenu et utiliserait un modèle simple.</p>
<h4 id="modèle-de-liste">Modèle de liste</h4>
<p>Un modèle de liste rend un groupe de contenu connexe. Cela pourrait être un résumé des publications récentes ou de tous les articles d&rsquo;une catégorie. Les modèles de liste peuvent contenir plusieurs groupes.</p>
<p>Le modèle de la page d&rsquo;accueil est un type spécial de modèle de liste. Hugo suppose que la page d&rsquo;accueil de votre site servira de portail pour le reste du contenu sur le site.</p>
<h4 id="modèle-partiel">Modèle partiel</h4>
<p>Un modèle partiel est un modèle qui peut être inclus dans d&rsquo;autres modèles. Les modèles partiels doivent être appelés en utilisant la commande de modèle &ldquo;partial&rdquo;. Ils sont très utiles pour utiliser des comportement commun. Par exemple, votre site peut avoir une bannière que toutes les pages utilisent. Au lieu de copier le texte de la bannière dans chaque modèle simple et de liste, vous pouvez créer une partie avec la bannière. De cette façon, si vous décidez de modifier la bannière, il vous suffit de changer le modèle partiel.</p>
<h2 id="créer-un-nouveau-site">Créer un nouveau site</h2>
<p>Utilisons Hugo pour créer un nouveau site Web. Je suis un utilisateur Mac, alors je vais créer le mien dans mon répertoire personnel, dans le dossier Sites. Si vous utilisez Linux, vous devrez d&rsquo;abord créer le dossier.</p>
<p>La commande &ldquo;new site&rdquo; créera un squelette d&rsquo;un site. Il vous donnera la structure de répertoire de base et un fichier de configuration utilisable.</p>
<pre tabindex="0"><code>$ hugo new site ~/Sites/zafta
$ cd ~/Sites/zafta
$ ls -l
total 8
drwxr-xr-x  7 quoha  staff  238 Sep 29 16:49 .
drwxr-xr-x  3 quoha  staff  102 Sep 29 16:49 ..
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 archetypes
-rw-r--r--  1 quoha  staff   82 Sep 29 16:49 config.toml
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 content
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 layouts
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 static
$
</code></pre><p>Consultez le répertoire content/ pour confirmer qu&rsquo;il est vide.</p>
<p>Les autres répertoires (archetypes/, layouts/ et static/) sont utilisés lors de la personnalisation d&rsquo;un thème. C&rsquo;est un sujet pour un tutoriel différent, alors ignorez-les pour l&rsquo;instant.</p>
<h3 id="générer-le-html-pour-le-nouveau-site">Générer le HTML pour le nouveau site</h3>
<p>Éxécuter la commande <code>hugo</code> sans options permet de lire tout le contenu disponible et de générer les fichiers HTML. Il copiera également tous les fichiers statiques (tout ce qui n&rsquo;est pas du contenu). Comme nous avons un site vide, il ne fera pas grand chose, mais il le fera très rapidement.</p>
<pre tabindex="0"><code>$ hugo --verbose
INFO: 2014/09/29 Using config file: config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to
    /Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html
                                            _default/single.html]
WARN: 2014/09/29 Unable to locate layout: [404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 2 ms
$
</code></pre><p>Le drapeau &ldquo;<code>--verbose</code> &ldquo;donne des informations supplémentaires qui seront utiles lorsque nous créerons le modèle. Chaque ligne de sortie qui commence par &ldquo;INFO:&rdquo; ou &ldquo;WARN:&rdquo; est présente car nous avons utilisé ce drapeau. Les lignes qui commencent par &ldquo;WARN:&rdquo; sont des messages d&rsquo;avertissement. Nous les examinerons plus tard.</p>
<p>Nous pouvons vérifier que la commande a fonctionné en regardant de nouveau le répertoire.</p>
<pre tabindex="0"><code>$ ls -l
total 8
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 archetypes
-rw-r--r--  1 quoha  staff   82 Sep 29 16:49 config.toml
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 content
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 layouts
drwxr-xr-x  4 quoha  staff  136 Sep 29 17:02 public
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 static
$
</code></pre><p>Voyez-vous ce nouveau répertoire public/ ? Hugo y a placé tout le contenu généré. Lorsque vous êtes prêt à publier votre site Web, c&rsquo;est l&rsquo;endroit idéal pour commencer. Pour l&rsquo;instant, nous allons simplement confirmer que nous avons ce que nous attendons pour un site sans contenu.</p>
<pre tabindex="0"><code>$ ls -l public
total 16
-rw-r--r--  1 quoha  staff  416 Sep 29 17:02 index.xml
-rw-r--r--  1 quoha  staff  262 Sep 29 17:02 sitemap.xml
$
</code></pre><p>Hugo a créé deux fichiers XML, ce qui est standard, mais il n&rsquo;y a pas de fichiers HTML.</p>
<h3 id="tester-le-nouveau-site">Tester le nouveau site</h3>
<p>Vérifiez que vous pouvez exécuter le serveur Web intégré. Cela réduira considérablement votre cycle de développement si vous le faites. Commencez en exécutant la commande &ldquo;server&rdquo;. Si vous réussissez, vous verrez une sortie similaire à la suivante:</p>
<pre tabindex="0"><code>$ hugo server --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to
    /Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html
                                            _default/single.html]
WARN: 2014/09/29 Unable to locate layout: [404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 2 ms
Serving pages from /Users/quoha/Sites/zafta/public
Web Server is available at http://localhost:1313
Press Ctrl+C to stop
</code></pre><p>Connectez-vous à l&rsquo;URL répertorié (c&rsquo;est sur la ligne qui commence par &ldquo;Web Server&rdquo;). Si tout fonctionne correctement, vous devriez obtenir une page qui montre ce qui suit:</p>
<pre tabindex="0"><code>index.xml
sitemap.xml
</code></pre><p>C&rsquo;est une liste de votre répertoire public/. Hugo n&rsquo;a pas créé une page d&rsquo;accueil car notre site n&rsquo;a aucun contenu. Quand il n&rsquo;y a pas de fichier index.html dans un répertoire, le serveur répertorie les fichiers dans le répertoire, ce que vous devriez voir dans votre navigateur.</p>
<p>Revenons encore à ces avertissements.</p>
<pre tabindex="0"><code>WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html
                                            _default/single.html]
WARN: 2014/09/29 Unable to locate layout: [404.html]
</code></pre><p>Ce deuxième avertissement est plus facile à expliquer. Nous n&rsquo;avons pas créé un modèle à utiliser pour générer des &ldquo;erreurs de page non trouvées&rdquo;. Le message 404 est un sujet pour un tutoriel distinct.</p>
<p>À propos du premier avertissement. C&rsquo;est pour la page d&rsquo;accueil. Vous pouvez le dire parce que la première mise en page qu&rsquo;il recherchait était &ldquo;index.html&rdquo;. Cela n&rsquo;est utilisé que par la page d&rsquo;accueil.</p>
<p>J&rsquo;aime que le drapeau verbose demande à Hugo de lister les fichiers qu&rsquo;il recherche. Pour la page d&rsquo;accueil, ce sont index.html, _default/list.html et _default/single.html. Il y a des règles que nous aborderons plus loin qui expliquent les noms et les chemins. Pour l&rsquo;instant, n&rsquo;oubliez pas que Hugo n&rsquo;a pas pu trouver un modèle pour la page d&rsquo;accueil et il vous l&rsquo;a dit.</p>
<p>À ce stade, vous avez une installation de travail et un site sur lequel nous pouvons développer. Tout ce qui reste, c&rsquo;est d&rsquo;ajouter du contenu et un thème pour l&rsquo;afficher.</p>
<h2 id="créer-un-nouveau-thème">Créer un nouveau thème</h2>
<p>Hugo ne fournit pas de thème par défaut. Il y a quelques-uns disponibles (j&rsquo;ai compté une douzaine lorsque j&rsquo;ai installé Hugo pour la première fois) et Hugo contient une commande pour créer de nouveaux thèmes.</p>
<p>Nous allons créer un nouveau thème appelé &ldquo;zafta&rdquo;. Étant donné que le but de ce didacticiel est de vous montrer comment remplir les fichiers pour extraire votre contenu, le thème ne contiendra aucun CSS. En d&rsquo;autres termes, moche mais fonctionnel.</p>
<p>Tous les thèmes utilisent des philosophies différentes sur le contenu et la mise en page. Les philosophies fortes permettent de créer un thème facilement, mais différentes philosophies rendrons l&rsquo;utilisation du thème plus difficile. Par exemple, Zafta utilise &ldquo;post&rdquo; au lieu de &ldquo;blog&rdquo;. Lorsque vous construisez un thème, envisagez d&rsquo;utiliser les termes que d&rsquo;autres thèmes utilisent.</p>
<h3 id="créer-un-squelette">Créer un squelette</h3>
<p>Utilisez la commande &ldquo;new&rdquo; de Hugo pour créer le squelette d&rsquo;un thème. Cela crée la structure du répertoire et place les fichiers vides à remplir.</p>
<pre tabindex="0"><code>$ hugo new theme zafta

$ ls -l
total 8
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 archetypes
-rw-r--r--  1 quoha  staff   82 Sep 29 16:49 config.toml
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 content
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 layouts
drwxr-xr-x  4 quoha  staff  136 Sep 29 17:02 public
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 static
drwxr-xr-x  3 quoha  staff  102 Sep 29 17:31 themes

$ find themes -type f | xargs ls -l
-rw-r--r--  1 quoha  staff  1081 Sep 29 17:31 themes/zafta/LICENSE.md
-rw-r--r--  1 quoha  staff     0 Sep 29 17:31 themes/zafta/archetypes/default.md
-rw-r--r--  1 quoha  staff     0 Sep 29 17:31 themes/zafta/layouts/_default/
                                                list.html
-rw-r--r--  1 quoha  staff     0 Sep 29 17:31 themes/zafta/layouts/_default/
                                                single.html
-rw-r--r--  1 quoha  staff     0 Sep 29 17:31 themes/zafta/layouts/index.html
-rw-r--r--  1 quoha  staff     0 Sep 29 17:31 themes/zafta/layouts/partials/
                                                footer.html
-rw-r--r--  1 quoha  staff     0 Sep 29 17:31 themes/zafta/layouts/partials/
                                                header.html
-rw-r--r--  1 quoha  staff    93 Sep 29 17:31 themes/zafta/theme.toml
$
</code></pre><p>Le squelette comprend des modèles (les fichiers se terminant par .html), un fichier de licence, une description de votre thème (le fichier theme.toml) et un archétype vide.</p>
<p>Prenez une minute pour remplir les fichiers theme.toml et LICENSE.md. Ils sont facultatifs, mais si vous allez distribuer votre thème, il dit au monde qui féliciter (ou blâmer). Il est également agréable de déclarer la licence afin que les gens sachent comment ils peuvent utiliser le thème.</p>
<pre tabindex="0"><code>$ vi themes/zafta/theme.toml
author = &quot;michael d henderson&quot;
description = &quot;Un thème minimal fonctionnel&quot;
license = &quot;MIT&quot;
name = &quot;zafta&quot;
source_repo = &quot;&quot;
tags = [&quot;tags&quot;, &quot;categories&quot;]
:wq

## éditez également themes/zafta/LICENSE.md et changez
## l'emplacement où il est écrit &quot;YOUR_NAME_HERE&quot;
</code></pre><p>Notez que les fichiers du squelette du thème sont vides. Ne vous inquiètez pas, nous allons remédier à cela rapidement.</p>
<pre tabindex="0"><code>$ find themes/zafta -name '*.html' | xargs ls -l
-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes/zafta/layouts/_default/
                                            list.html
-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes/zafta/layouts/_default/
                                            single.html
-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes/zafta/layouts/
                                            index.html
-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes/zafta/layouts/partials/
                                            footer.html
-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes/zafta/layouts/partials/
                                            header.html
$
</code></pre><h3 id="mettre-à-jour-le-fichier-de-configuration-pour-utiliser-notre-thème">Mettre à jour le fichier de configuration pour utiliser notre thème</h3>
<p>Maintenant que nous avons un thème sur lequel travailler, il est judicieux d&rsquo;ajouter le nom du thème au fichier de configuration. Ceci est facultatif, car vous pouvez toujours ajouter &ldquo;-t zafta&rdquo; à toutes vos commandes. J&rsquo;aime mettre le fichier de configuration car j&rsquo;aime les lignes de commande plus courtes. Si vous ne le placez pas dans le fichier de configuration ou ne le spécifiez pas sur la ligne de commande, vous n&rsquo;utiliserez pas le modèle que vous attendez.</p>
<p>Modifiez le fichier pour ajouter le thème, ajoutez un titre pour le site et spécifiez que tout notre contenu utilisera le format TOML.</p>
<pre tabindex="0"><code>$ vi config.toml
theme = &quot;zafta&quot;
baseurl = &quot;&quot;
languageCode = &quot;en-us&quot;
title = &quot;zafta - totally refreshing&quot;
MetaDataFormat = &quot;toml&quot;
:wq

$
</code></pre><h3 id="générer-le-site">Générer le site</h3>
<p>Maintenant que nous avons un thème vide, générez le site à nouveau.</p>
<pre tabindex="0"><code>$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to
    /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to
    /Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 2 ms
$
</code></pre><p>Avez-vous remarqué que la sortie est différente? Le message d&rsquo;avertissement pour la page d&rsquo;accueil a disparu et nous avons une ligne d&rsquo;information supplémentaire indiquant que Hugo est en train de se synchroniser avec le répertoire du thème.</p>
<p>Vérifions le répertoire public/ pour voir ce que Hugo a généré.</p>
<pre tabindex="0"><code>$ ls -l public
total 16
drwxr-xr-x  2 quoha  staff   68 Sep 29 17:56 css
-rw-r--r--  1 quoha  staff    0 Sep 29 17:56 index.html
-rw-r--r--  1 quoha  staff  407 Sep 29 17:56 index.xml
drwxr-xr-x  2 quoha  staff   68 Sep 29 17:56 js
-rw-r--r--  1 quoha  staff  243 Sep 29 17:56 sitemap.xml
$
</code></pre><p>Notez quatre choses:</p>
<ol>
<li>Hugo a créé une page d&rsquo;accueil. C&rsquo;est le fichier public/index.html.</li>
<li>Hugo a créé un répertoire css/.</li>
<li>Hugo a créé un répertoire js/.</li>
<li>Hugo a affirmé avoir créé 0 pages. Il a créé un fichier et copié sur des fichiers statiques, mais n&rsquo;a pas créé de pages. C&rsquo;est parce qu&rsquo;il considère une «page» comme un fichier créé directement à partir d&rsquo;un fichier de contenu. Il ne compte pas les choses comme les fichiers index.html qu&rsquo;il crée automatiquement.</li>
</ol>
<h4 id="la-page-daccueil-1">La page d&rsquo;accueil</h4>
<p>Hugo prend en charge plusieurs types de modèles différents. La page d&rsquo;accueil est spéciale car elle possède son propre type de modèle et son propre fichier modèle. Le fichier, layouts/index.html, sert à générer le HTML pour la page d&rsquo;accueil. La documentation de Hugo indique que c&rsquo;est le seul modèle requis, mais cela dépend. Le message d&rsquo;avertissement d&rsquo;Hugo montre qu&rsquo;il recherche trois modèles différents:</p>
<pre tabindex="0"><code>WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html
                                            _default/single.html]
</code></pre><p>S&rsquo;il ne trouve aucun de ces derniers, il saute complètement la création de la page d&rsquo;accueil. Nous avons remarqué que lorsque nous avons construit le site sans avoir un thème installé.</p>
<p>Lorsque Hugo a créé notre thème, il a créé un modèle de page d&rsquo;accueil vide. Maintenant, lorsque nous construisons le site, Hugo trouve le modèle et l&rsquo;utilise pour générer le HTML pour la page d&rsquo;accueil. Comme le fichier modèle est vide, le fichier HTML est également vide. Si le modèle avait eu des règles, Hugo les aurait utilisé pour générer la page d&rsquo;accueil.</p>
<pre tabindex="0"><code>$ find . -name index.html | xargs ls -l
-rw-r--r--  1 quoha  staff  0 Sep 29 20:21 ./public/index.html
-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 ./themes/zafta/layouts/index.html
$
</code></pre><h4 id="la-magie-du-statique">La magie du statique</h4>
<p>Hugo fait deux choses lors de la génération du site. Il utilise des modèles pour transformer le contenu en HTML et copie des fichiers statiques dans le site. Contrairement au contenu, les fichiers statiques ne sont pas transformés. Ils sont copiés exactement comme ils sont.</p>
<p>Hugo suppose que votre site utilisera à la fois CSS et JavaScript, de sorte qu&rsquo;il crée des répertoires sur votre thème pour les retenir. Rappelez-vous les philosophies ? Eh bien, la philosophie de Hugo est que vous allez stocker votre CSS dans un répertoire nommé css/ et votre JavaScript dans un répertoire nommé js/. Si vous n&rsquo;aimez pas cela, vous pouvez modifier les noms de répertoire dans votre répertoire de thème ou même les supprimer complètement. Hugo est assez agréable pour offrir son avis, puis bien se comporter si vous êtes en désaccord.</p>
<pre tabindex="0"><code>$ find themes/zafta -type d | xargs ls -ld
drwxr-xr-x  7 quoha  staff  238 Sep 29 17:38 themes/zafta
drwxr-xr-x  3 quoha  staff  102 Sep 29 17:31 themes/zafta/archetypes
drwxr-xr-x  5 quoha  staff  170 Sep 29 17:31 themes/zafta/layouts
drwxr-xr-x  4 quoha  staff  136 Sep 29 17:31 themes/zafta/layouts/_default
drwxr-xr-x  4 quoha  staff  136 Sep 29 17:31 themes/zafta/layouts/partials
drwxr-xr-x  4 quoha  staff  136 Sep 29 17:31 themes/zafta/static
drwxr-xr-x  2 quoha  staff   68 Sep 29 17:31 themes/zafta/static/css
drwxr-xr-x  2 quoha  staff   68 Sep 29 17:31 themes/zafta/static/js
$
</code></pre><h2 id="le-cycle-de-développement-dun-site">Le cycle de développement d&rsquo;un site</h2>
<p>Lorsque vous travaillez sur un thème, vous modifiez le répertoire du thème, reconstruisez le site et vérifiez vos modifications dans le navigateur. Hugo rend cela très simple:</p>
<ol>
<li>Purgez le répertoire public/.</li>
<li>Exécutez le serveur Web intégré en mode surveillance.</li>
<li>Ouvrez votre site dans un navigateur.</li>
<li>Mettre à jour le thème.</li>
<li>Regardez la fenêtre de votre navigateur pour voir les changements.</li>
<li>Revenez à l&rsquo;étape 4.</li>
</ol>
<p>Je vais vous donner un conseil: ne jamais travailler sur un thème sur un site en production. Toujours travailler sur une copie de votre site. Effectuez des modifications sur votre thème, testez-les, puis copiez-les sur votre site. Pour plus de sécurité, utilisez un outil comme Git pour garder un historique de révision de votre contenu et de votre thème. Croyez-moi quand je dis qu&rsquo;il est trop facile de perdre vos changements.</p>
<p>Consultez le site Hugo principal pour obtenir de l&rsquo;information sur l&rsquo;utilisation de Git avec Hugo.</p>
<h3 id="purger-le-répertoire-public">Purger le répertoire public/</h3>
<p>Lors de la génération du site, Hugo va créer de nouveaux fichiers et mettre à jour les existants dans le répertoire <code>public /</code>. Il ne supprimera pas les fichiers qui ne sont plus utilisés. Par exemple, les fichiers créés dans le mauvais répertoire ou avec le mauvais titre resteront. Si vous les laissez, vous pourriez les confondre plus tard. Je recommande de nettoyer votre site avant de le générer.</p>
<p>Remarque: Si vous utilisez un SSD, vous devez ignorer cela. L&rsquo;agitation sur un SSD peut être coûteuse.</p>
<h3 id="loption-watch-de-hugo">L&rsquo;option watch de Hugo</h3>
<p>L&rsquo;option &ldquo;<code>--watch</code>&rdquo; de Hugo va surveiller les changements dans le répertoire content/ et les répertoire de vos thème afin de regénérer le site automatiquement.</p>
<h3 id="rchargement-en-direct">Rchargement en direct</h3>
<p>Le serveur web intégré de Hugo supporte les rechargements en direct. Lorsque qu&rsquo;une page est sauvegardée sur le serveur, le navigateur est amené à rafraîchir la page. Habituellement, cela se produit avant que vous puissiez dire &ldquo;Woah, c&rsquo;est incroyable.&rdquo;</p>
<h3 id="commandes-de-développement">Commandes de développement</h3>
<p>Utilisez les commandes suivantes comme base de votre workflow.</p>
<pre tabindex="0"><code>## Purger les anciens fichiers. Hugo recréera le répertoire public.
##
$ rm -rf public
##
## Lancer Hugo en mode de surveillance
##
$ hugo server --watch --verbose
</code></pre><p>L&rsquo;exemple de sortie suivant montre que Hugo detecte une modification sur le modèle de la page d&rsquo;accueil. Après l&rsquo;avoir générée, le serveur web va automatiquement recharger la page. Je l&rsquo;ai dit précédement, c&rsquo;est incroyable.</p>
<pre tabindex="0"><code>$ rm -rf public
$ hugo server --watch --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to
    /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to
    /Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 2 ms
Watching for changes in /Users/quoha/Sites/zafta/content
Serving pages from /Users/quoha/Sites/zafta/public
Web Server is available at http://localhost:1313
Press Ctrl+C to stop
INFO: 2014/09/29 File System Event: [&quot;/Users/quoha/Sites/zafta/themes/zafta/
                                        layouts/index.html&quot;: MODIFY|ATTRIB]
Change detected, rebuilding site

WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 1 ms
</code></pre><h2 id="mettre-à-jour-le-modèle-de-la-page-daccueil">Mettre à jour le modèle de la page d&rsquo;accueil</h2>
<p>La page d&rsquo;accueil est l&rsquo;une des quelques pages spéciales que Hugo crée automatiquement. Comme mentionné précédemment, il recherche l&rsquo;un des trois fichiers dans le répertoire de mise en page (layout/) du thème:</p>
<ol>
<li>index.html</li>
<li>_default/list.html</li>
<li>_default/single.html</li>
</ol>
<p>Nous pourrions mettre à jour l&rsquo;un des modèles par défaut, mais une bonne décision de conception est de mettre à jour le modèle le plus spécifique disponible. Ce n&rsquo;est pas une règle difficile et rapide (en fait, nous ne la respecterons pas plusieurs fois dans ce tutoriel), mais c&rsquo;est une bonne généralisation.</p>
<h3 id="créer-une-page-daccueil-statique">Créer une page d&rsquo;accueil statique</h3>
<p>À l&rsquo;heure actuelle, cette page est vide car nous n&rsquo;avons aucun contenu et nous n&rsquo;avons aucune logique dans le modèle. Changeons cela en ajoutant du texte au modèle.</p>
<pre tabindex="0"><code>$ vi themes/zafta/layouts/index.html
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;body&gt;
  &lt;p&gt;hugo dit bonjour!&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
:wq

$
</code></pre><p>Générez le site web et vérifiez les résultats.</p>
<pre tabindex="0"><code>$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to
    /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to
    /Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 2 ms

$ find public -type f -name '*.html' | xargs ls -l
-rw-r--r--  1 quoha  staff  78 Sep 29 21:26 public/index.html

$ cat public/index.html
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;body&gt;
  &lt;p&gt;hugo dit bonjour!&lt;/p&gt;
&lt;/html&gt;
</code></pre><h4 id="rechargement-en-direct">Rechargement en direct</h4>
<p>Note: Si vous avez lancé le serveur avec l&rsquo;option <code>--watch</code>, vous verrez un contenu différent dans le fichier :</p>
<pre tabindex="0"><code>$ cat public/index.html
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;body&gt;
  &lt;p&gt;hugo dit bonjour!&lt;/p&gt;
&lt;script&gt;document.write('&lt;script src=&quot;http://'
        + (location.host || 'localhost').split(':')[0]
    + ':1313/livereload.js?mindelay=10&quot;&gt;&lt;/'
        + 'script&gt;')&lt;/script&gt;&lt;/body&gt;
&lt;/html&gt;
</code></pre><p>Lorsque vous utilisez <code>--watch</code>, le script de rechargement automatique est ajouté par Hugo. Renseignez-vous dans la documentation avec les termes <em>live reload</em> pour voir qu&rsquo;est-ce qu&rsquo;il fait et comment le désactiver.</p>
<h3 id="créer-une-page-daccueil-dynamique">Créer une page d&rsquo;accueil &ldquo;dynamique&rdquo;</h3>
<p>&ldquo;Une page d&rsquo;accueil dynamique ?&rdquo; Hugo est un générateur de site statique, cela paraît étrange à dire. Je veux dire que la page d&rsquo;accueil reflète le contenu du site chaque fois que Hugo le regénère. Nous allons utiliser l&rsquo;itération dans le modèle pour faire cela.</p>
<h4 id="créer-un-nouvel-article">Créer un nouvel article</h4>
<p>Maintenant que nous avons la page d&rsquo;accueil générée avec un contenu statique, ajoutons du contenu au site. Nous allons lister ces articles sur la page d&rsquo;accueil et sur leurs propre page également.</p>
<p>Hugo a une commande pour générer un squelette d&rsquo;article, comme il le fait pour les sites et les thèmes.</p>
<pre tabindex="0"><code>$ hugo --verbose new post/permier.md
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 attempting to create  post/premier.md of post
INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/
                            default.md
ERROR: 2014/09/29 Unable to Cast &lt;nil&gt; to map[string]interface{}

$
</code></pre><p>C&rsquo;est pas bon, n&rsquo;est-ce pas ?</p>
<p>La commande &ldquo;new&rdquo; utilise un archétype pour créer le fichier de l&rsquo;article. Hugo crée un fichier d&rsquo;archétype vide par défault, mais cela provoque une erreur lorsqu&rsquo;il y a un thème. Pour moi, la solution était de créer un fichier d&rsquo;archétype spécifiquement pour le type article.</p>
<pre tabindex="0"><code>$ vi themes/zafta/archetypes/post.md
+++
Description = &quot;&quot;
Tags = []
Categories = []
+++
:wq

$ find themes/zafta/archetypes -type f | xargs ls -l
-rw-r--r--  1 quoha  staff   0 Sep 29 21:53 themes/zafta/archetypes/default.md
-rw-r--r--  1 quoha  staff  51 Sep 29 21:54 themes/zafta/archetypes/post.md

$ hugo --verbose new post/premier.md
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 attempting to create  post/premier.md of post
INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/
                            post.md
INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/premier.md
/Users/quoha/Sites/zafta/content/post/premier.md created

$ hugo --verbose new post/second.md
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 attempting to create  post/second.md of post
INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/
                            post.md
INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/second.md
/Users/quoha/Sites/zafta/content/post/second.md created

$ ls -l content/post
total 16
-rw-r--r--  1 quoha  staff  104 Sep 29 21:54 premier.md
-rw-r--r--  1 quoha  staff  105 Sep 29 21:57 second.md

$ cat content/post/premier.md
+++
Categories = []
Description = &quot;&quot;
Tags = []
date = &quot;2014-09-29T21:54:53-05:00&quot;
title = &quot;premier&quot;

+++
Mon permier article

$ cat content/post/second.md
+++
Categories = []
Description = &quot;&quot;
Tags = []
date = &quot;2014-09-29T21:57:09-05:00&quot;
title = &quot;second&quot;

+++
Mon second article

$
</code></pre><p>Générez le site web et vérifiez le résultat.</p>
<pre tabindex="0"><code>$ rm -rf public
$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to
    /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to
    /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 found taxonomies: map[string]string{&quot;category&quot;:&quot;categories&quot;,
                                                    &quot;tag&quot;:&quot;tags&quot;}
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
2 pages created
0 tags created
0 categories created
in 4 ms
$
</code></pre><p>La sortie annonce qu&rsquo;il a créé 2 pages. Ce sont nos nouveaux articles:</p>
<pre tabindex="0"><code>$ find public -type f -name '*.html' | xargs ls -l
-rw-r--r--  1 quoha  staff  78 Sep 29 22:13 public/index.html
-rw-r--r--  1 quoha  staff   0 Sep 29 22:13 public/post/premier/index.html
-rw-r--r--  1 quoha  staff   0 Sep 29 22:13 public/post/index.html
-rw-r--r--  1 quoha  staff   0 Sep 29 22:13 public/post/second/index.html
$
</code></pre><p>Les nouveaux fichiers sont vides parce que les modèles utilisé pour générer le contenu sont vides. La page d&rsquo;accueil n&rsquo;affiche pas non plus le nouveau contenu. Nous devons modifier les modèles pour ajouter les articles.</p>
<h3 id="modèles-de-liste-et-simples">Modèles de liste et simples</h3>
<p>Avec Hugo, nous avons trois principaux types de modèles. Il y a le modèle de page d&rsquo;accueil que nous avons édité précédement. Il est utilisé seulement pour la page d&rsquo;accueil. Nous avons également le modèles simple qui sont utilisés pour générer du contenu simple. Et nous avons les modèles de liste qui sont utilisés pour grouper plusieurs contenus.</p>
<p>D&rsquo;une manière générale, les modèles de liste sont nommés &ldquo;list.html&rdquo; et les modèles simples sont nommés &ldquo;single.html&rdquo;.</p>
<h3 id="ajouter-du-contenu-sur-la-page-daccueil">Ajouter du contenu sur la page d&rsquo;accueil</h3>
<p>La page d&rsquo;accueil contiendra une liste d&rsquo;articles. Modifions son modèle pour ajouter les articles que nous venons de créer. La logique dans le modèle s&rsquo;éxecutera chaque fois que nous génèrerons notre site.</p>
<pre tabindex="0"><code>$ vi themes/zafta/layouts/index.html
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;body&gt;
  {{ range first 10 .Data.Pages }}
    &lt;h1&gt;{{ .Title }}&lt;/h1&gt;
  {{ end }}
&lt;/body&gt;
&lt;/html&gt;
:wq

$
</code></pre><p>Hugo utilise le moteur de modèle de Go. Ce moteur analyse les fichiers de modèle pour y trouver des commandes qui sont spécifiées entre &ldquo;{{&rdquo; et &ldquo;}}&rdquo;. Dans notre modèle, les commandes sont:</p>
<ol>
<li>range</li>
<li>.Title</li>
<li>end</li>
</ol>
<p>La commande &ldquo;range&rdquo; est un itérateur. Nous allons l&rsquo;utiliser pour parcourir les dix premières pages. Chaque fichier HTML que Hugo crée est traité comme une page. Donc, boucler autour de la liste des pages examinera chaque fichier qui a été crée.</p>
<p>La commande &ldquo;.Title&rdquo; affiche la valeur de la variable &ldquo;title&rdquo;. Hugo la récupère depuis la section liminaire dans la fichier Markdown.</p>
<p>La commande &ldquo;end&rdquo; signale la fin de l&rsquo;itération. Le moteur retourne en haut de l&rsquo;itération lorsque qu&rsquo;il trouve &ldquo;end&rdquo;. Tout ce qui est entre &ldquo;range&rdquo; et &ldquo;end&rdquo; est évalué chaque fois que le moteur passe par l&rsquo;itération. Dans ce fichier, cela va afficher le titre des dix premières pages dans la sortie comme titre de niveau 1.</p>
<p>Il est utile de se rappeler de quelques variables, comme .Data, sont créées avant tout fichier de sortie. Hugo charge tout les fichiers de contenu dans la variable et donne une chance au modèle de procèder avant de créer les fichiers HTML.</p>
<p>Générez le site web et vérifiez le résultat.</p>
<pre tabindex="0"><code>$ rm -rf public
$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to
    /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to
    /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 found taxonomies: map[string]string{&quot;tag&quot;:&quot;tags&quot;,
                                                    &quot;category&quot;:&quot;categories&quot;}
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
2 pages created
0 tags created
0 categories created
in 4 ms
$ find public -type f -name '*.html' | xargs ls -l
-rw-r--r--  1 quoha  staff  94 Sep 29 22:23 public/index.html
-rw-r--r--  1 quoha  staff   0 Sep 29 22:23 public/post/premier/index.html
-rw-r--r--  1 quoha  staff   0 Sep 29 22:23 public/post/index.html
-rw-r--r--  1 quoha  staff   0 Sep 29 22:23 public/post/second/index.html
$ cat public/index.html
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;body&gt;

    &lt;h1&gt;second&lt;/h1&gt;

    &lt;h1&gt;premier&lt;/h1&gt;

&lt;/body&gt;
&lt;/html&gt;
$
</code></pre><p>Félicitation, la page d&rsquo;accueil affiche le titre des deux articles. Les articles eux-même sont toujours vide, mais prenez un moment pour apprécier ce que nous avons effectué. Votre modèle génère maintenant des sorties dynamiquement. Croyez-le ou non, en insérant la commande &ldquo;range&rdquo; à l&rsquo;intérieur de ces accolades, vous avez appris tout ce que vous devez savoir pour créer un thème. Tout ce qu&rsquo;il reste vraiment est de comprendre quel modèle va être utilisé pour générer chaque fichier de contenu et de devenir familier avec les commandes du moteur de modèles.</p>
<p>Et, si c&rsquo;est entièrement vrai, ce tutoriel devrai être plus court. Il y a quelques choses à savoir qui rendrons la création de nouveaux thèmes plus facile. Ne vous inquiétez pas, ca va bien se passer.</p>
<h3 id="ajouter-du-contenu-à-larticle">Ajouter du contenu à l&rsquo;article</h3>
<p>Nous travaillons avec des articles, qui sont stockés dans le répertoire content/post/. Cela signifie que leur section est &ldquo;post&rdquo; (et si nous n&rsquo;avons rien fait de travers, leur type est également &ldquo;post&rdquo;).</p>
<p>Hugo utilise la section et le type pour définir le modèle pour chaque partie du contenu. Hugo va d&rsquo;abord chercher un modèle qui correspond à la section ou au type. S&rsquo;il n&rsquo;arrive pas à en trouver un, il va alors chercher dans le répertoire _default/. Il y a quelques cas que nous allons couvrir lorsque nous travaillerons avec les catégories et les tags, mais pour le moment, nous supposerons que Hugo va essayer post/single.html, puis _default/single.html.</p>
<p>Maintenant que nous connaissons la règle de rechercher, regardons ce qui est mis à notre disposition actuellement:</p>
<pre tabindex="0"><code>$ find themes/zafta -name single.html | xargs ls -l
-rw-r--r--  1 quoha  staff  132 Sep 29 17:31 themes/zafta/layouts/_default/
                                                single.html
</code></pre><p>Nous pourrions créer un nouveau modèle, post/single.html, ou modifier le modèle par défaut. Comme nous n&rsquo;utilisons actuellement aucun autre type de contenu, commençons par mettre à jour le modèle par défaut.</p>
<p>Sovenez-vous, tout contenu pour lequel nous n&rsquo;avons pas créé de modèle utilisera ce modèle. Cela peut être bien ou mauvais. Mauvais parce que je sais que nous allons ajouter d&rsquo;autres types de contenu et nous allons devoir annuler certaines des modifications que nous avons effectuées. Mais c&rsquo;est bien parce que nous allons pouvoir voir directement les résultats. C&rsquo;est également bien de démarrer ici car nous pouvons commencer à faire la mise en place basique du site. Comme nous ajouterons plus de contenu, nous remanierons ce fichier et déplacerons la logique ailleur. Hugo fait cela plutôt bien, donc nous accepterons le coût et procèderons.</p>
<h4 id="mise-à-jour-du-modèle">Mise à jour du modèle</h4>
<pre tabindex="0"><code>$ vi themes/zafta/layouts/_default/single.html
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;{{ .Title }}&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;h1&gt;{{ .Title }}&lt;/h1&gt;
  {{ .Content }}
&lt;/body&gt;
&lt;/html&gt;
:wq

$
</code></pre><p>Générez le site web et vérifiez le résultat.</p>
<pre tabindex="0"><code>$ rm -rf public
$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to
    /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to
    /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 found taxonomies: map[string]string{&quot;tag&quot;:&quot;tags&quot;,
                                                    &quot;category&quot;:&quot;categories&quot;}
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
2 pages created
0 tags created
0 categories created
in 4 ms

$ find public -type f -name '*.html' | xargs ls -l
-rw-r--r--  1 quoha  staff   94 Sep 29 22:40 public/index.html
-rw-r--r--  1 quoha  staff  125 Sep 29 22:40 public/post/premier/index.html
-rw-r--r--  1 quoha  staff    0 Sep 29 22:40 public/post/index.html
-rw-r--r--  1 quoha  staff  128 Sep 29 22:40 public/post/second/index.html

$ cat public/post/premier/index.html
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;premier&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;h1&gt;premier&lt;/h1&gt;
  &lt;p&gt;Mon premier article&lt;/p&gt;

&lt;/body&gt;
&lt;/html&gt;

$ cat public/post/second/index.html
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;second&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;h1&gt;second&lt;/h1&gt;
  &lt;p&gt;Mon second article&lt;/p&gt;

&lt;/body&gt;
&lt;/html&gt;
$
</code></pre><p>Notez que les articles ont maintenant un contenu. Vous pouvez aller sur localhost:1313/post/premier pour vérifier.</p>
<h3 id="lier-du-contenu">Lier du contenu</h3>
<p>Les articles sont sur la page d&rsquo;accueil. Ajoutons un lien d&rsquo;ici vers l&rsquo;article. Comme cela se trouve sur la page d&rsquo;accueil, nous allons mettre à jour le modèle.</p>
<pre tabindex="0"><code>$ vi themes/zafta/layouts/index.html
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;body&gt;
  {{ range first 10 .Data.Pages }}
    &lt;h1&gt;&lt;a href=&quot;{{ .Permalink }}&quot;&gt;{{ .Title }}&lt;/a&gt;&lt;/h1&gt;
  {{ end }}
&lt;/body&gt;
&lt;/html&gt;
</code></pre><p>Générez le site web et vérifiez le résultat.</p>
<pre tabindex="0"><code>$ rm -rf public
$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to
    /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to
    /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 found taxonomies: map[string]string{&quot;tag&quot;:&quot;tags&quot;,
                                                    &quot;category&quot;:&quot;categories&quot;}
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
2 pages created
0 tags created
0 categories created
in 4 ms

$ find public -type f -name '*.html' | xargs ls -l
-rw-r--r--  1 quoha  staff  149 Sep 29 22:44 public/index.html
-rw-r--r--  1 quoha  staff  125 Sep 29 22:44 public/post/premier/index.html
-rw-r--r--  1 quoha  staff    0 Sep 29 22:44 public/post/index.html
-rw-r--r--  1 quoha  staff  128 Sep 29 22:44 public/post/second/index.html

$ cat public/index.html
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;body&gt;

    &lt;h1&gt;&lt;a href=&quot;/post/second/&quot;&gt;second&lt;/a&gt;&lt;/h1&gt;

    &lt;h1&gt;&lt;a href=&quot;/post/premier/&quot;&gt;premier&lt;/a&gt;&lt;/h1&gt;

&lt;/body&gt;
&lt;/html&gt;

$
</code></pre><h3 id="créer-une-liste-darticles">Créer une liste d&rsquo;articles</h3>
<p>Nous avons les articles affichés sur la page d&rsquo;accueil et sur leur propre page. Nous avons également un fichier public/post/index.html qui est vide. Faisons en sorte qu&rsquo;il liste tous les articles (pas seulement les dix premiers).</p>
<p>Nous devons décider quel modèle mettre à jour. Nous allons faire une liste, donc, cela doit être un modèle de liste. Regardons quels modèles de liste sont disponibles.</p>
<pre tabindex="0"><code>$ find themes/zafta -name list.html | xargs ls -l
-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes/zafta/layouts/_default/
                                            list.html
</code></pre><p>Comme pour l&rsquo;article seul, nous devons décider d&rsquo;éditer _default/list.html ou de créer post/list.html. Nous n&rsquo;avons toujours pas plusieurs types de contenu, alors restons cohérant et éditons le modèle de liste par défaut.</p>
<h2 id="création-dune-page-de-haut-niveau">Création d&rsquo;une page de haut niveau</h2>
<p>Ajoutons une page &ldquo;à propos&rdquo; et affichons la au plus haut niveau (à l&rsquo;opposé d&rsquo;un sous-niveau comme nous avons fait pour les articles).</p>
<p>La valeur par défaut de Hugo consiste à utiliser la structure du répertoire content/ pour guider l&rsquo;emplacement du HTML généré dans le répertoire public/. Vérifions cela en créant une page &ldquo;à propos&rdquo; (about dans l&rsquo;exemple) au plus haut niveau:</p>
<pre tabindex="0"><code>$ vi content/about.md
+++
title = &quot;about&quot;
description = &quot;about this site&quot;
date = &quot;2014-09-27&quot;
slug = &quot;about time&quot;
+++

## about us

i'm speechless
:wq
</code></pre><p>Générez le site web et vérifiez le résultat.</p>
<pre tabindex="0"><code>$ find public -name '*.html' | xargs ls -l
-rw-rw-r--  1 mdhender  staff   334 Sep 27 15:08 public/about-time/index.html
-rw-rw-r--  1 mdhender  staff   527 Sep 27 15:08 public/index.html
-rw-rw-r--  1 mdhender  staff   358 Sep 27 15:08 public/post/premier-post/
                                                    index.html
-rw-rw-r--  1 mdhender  staff     0 Sep 27 15:08 public/post/index.html
-rw-rw-r--  1 mdhender  staff   342 Sep 27 15:08 public/post/second-post/
                                                    index.html
</code></pre><p>Notez que la page n&rsquo;a pas été crée au plus haut niveau. Ça a créé un sous répertoire nommé &lsquo;about-time&rsquo;. Ce nom vient de notre slug. Hugo va l&rsquo;utiliser pour nommer les contenu générés.</p>
<p>Autre chose : regardez la page d&rsquo;accueil.</p>
<pre tabindex="0"><code>$ cat public/index.html
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;body&gt;
    &lt;h1&gt;&lt;a href=&quot;http://localhost:1313/post/theme/&quot;&gt;
        creating a new theme&lt;/a&gt;&lt;/h1&gt;
    &lt;h1&gt;&lt;a href=&quot;http://localhost:1313/about-time/&quot;&gt;about&lt;/a&gt;&lt;/h1&gt;
    &lt;h1&gt;&lt;a href=&quot;http://localhost:1313/post/second-post/&quot;&gt;second&lt;/a&gt;&lt;/h1&gt;
    &lt;h1&gt;&lt;a href=&quot;http://localhost:1313/post/premier-post/&quot;&gt;first&lt;/a&gt;&lt;/h1&gt;
&lt;script&gt;document.write('&lt;script src=&quot;http://'
        + (location.host || 'localhost').split(':')[0]
		+ ':1313/livereload.js?mindelay=10&quot;&gt;&lt;/'
        + 'script&gt;')&lt;/script&gt;&lt;/body&gt;
&lt;/html&gt;
</code></pre><p>Notez que le liens vers &ldquo;about&rdquo; est listé avec les articles. Ce n&rsquo;était l&rsquo;effet désire, corrigeons donc cela d&rsquo;abord.</p>
<pre tabindex="0"><code>$ vi themes/zafta/layouts/index.html
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;body&gt;
  &lt;h1&gt;articles&lt;/h1&gt;
  {{ range first 10 .Data.Pages }}
    {{ if eq .Type &quot;post&quot;}}
      &lt;h2&gt;&lt;a href=&quot;{{ .Permalink }}&quot;&gt;{{ .Title }}&lt;/a&gt;&lt;/h2&gt;
    {{ end }}
  {{ end }}

  &lt;h1&gt;pages&lt;/h1&gt;
  {{ range .Data.Pages }}
    {{ if eq .Type &quot;page&quot; }}
      &lt;h2&gt;&lt;a href=&quot;{{ .Permalink }}&quot;&gt;{{ .Title }}&lt;/a&gt;&lt;/h2&gt;
    {{ end }}
  {{ end }}
&lt;/body&gt;
&lt;/html&gt;
:wq
</code></pre><p>Générez le site web et vérifiez le résultat. La page d&rsquo;accueil a deux sections, articles et pages, et chaque section contient le bon ensemble de lien</p>
<p>Mais la page &ldquo;à propos&rdquo; est toujours rendue dans about-time/index.html.</p>
<pre tabindex="0"><code>$ find public -name '*.html' | xargs ls -l
-rw-rw-r--  1 mdhender  staff    334 Sep 27 15:33 public/about-time/index.html
-rw-rw-r--  1 mdhender  staff    645 Sep 27 15:33 public/index.html
-rw-rw-r--  1 mdhender  staff    358 Sep 27 15:33 public/post/premier-post/
                                                    index.html
-rw-rw-r--  1 mdhender  staff      0 Sep 27 15:33 public/post/index.html
-rw-rw-r--  1 mdhender  staff    342 Sep 27 15:33 public/post/second-post/
                                                    index.html
</code></pre><p>Sachant que Hugo utilise le slug pour générer les noms des fichiers, la solution la plus simple serait de changer le slug. Utilisons la manière forte et changeons le lien permanent dans la configuration.</p>
<pre tabindex="0"><code>$ vi config.toml
[permalinks]
	page = &quot;/:title/&quot;
	about = &quot;/:filename/&quot;
</code></pre><p>Générez le site web et vérifiez que cela ne fonctionne pas. Hugo laisse le slug ou l&rsquo;URL outrepasser l&rsquo;option des liens permanents dans le fichier de configuration. Commentez le slug dans content/about.md, puis générez le site web pour qu&rsquo;elle soit générée au bon endroit.</p>
<h2 id="partager-des-modèles">Partager des modèles</h2>
<p>Si vous avez suivi, vous avez sûrement remarqué que les articles ont un titre dans le navigateur et pas la page d&rsquo;accueil. C&rsquo;est parce que nous n&rsquo;avons pas mis de titre dans le modèle de la page d&rsquo;accueil (layout/index.html). C&rsquo;est quelque chose de facile, mais utilisons une option différente.</p>
<p>Nous pouvons placer les parties communes dans un modèle partagé qui sera stocké dans le répertoire themes/zafta/layouts/partials/.</p>
<h3 id="création-du-modèle-partiel-de-lentête-et-du-pied-de-page">Création du modèle partiel de l&rsquo;entête et du pied de page</h3>
<p>Avec Hugo, un modèle partiel est un modèle embelli. Normalement, un modèle fait référence à un chemin spécifique. Les modèles partiels sont différents. Hugo les recherche le long d&rsquo;un chemin de recherche défini. Cela permet aux utilisateurs finaux de remplacer plus facilement la présentation du thème.</p>
<pre tabindex="0"><code>$ vi themes/zafta/layouts/partials/header.html
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
	&lt;title&gt;{{ .Title }}&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
:wq

$ vi themes/zafta/layouts/partials/footer.html
&lt;/body&gt;
&lt;/html&gt;
:wq
</code></pre><h3 id="modification-du-modèle-de-page-daccueil-pour-utiliser-les-modèles-partiels">Modification du modèle de page d&rsquo;accueil pour utiliser les modèles partiels</h3>
<p>La différence notable entre un appel d&rsquo;un modèle et celui d&rsquo;un modèle partiel est le manque de chemin:</p>
<pre tabindex="0"><code>{{ template &quot;theme/partials/header.html&quot; . }}
</code></pre><p>versus</p>
<pre tabindex="0"><code>{{ partial &quot;header.html&quot; . }}
</code></pre><p>Les deux passent dans le contexte.</p>
<p>Changeons le modèle de la page d&rsquo;accueil pour utiliser ces nouveaux modèles partiels.</p>
<pre tabindex="0"><code>$ vi themes/zafta/layouts/index.html
{{ partial &quot;header.html&quot; . }}

  &lt;h1&gt;articles&lt;/h1&gt;
  {{ range first 10 .Data.Pages }}
    {{ if eq .Type &quot;post&quot;}}
      &lt;h2&gt;&lt;a href=&quot;{{ .Permalink }}&quot;&gt;{{ .Title }}&lt;/a&gt;&lt;/h2&gt;
    {{ end }}
  {{ end }}

  &lt;h1&gt;pages&lt;/h1&gt;
  {{ range .Data.Pages }}
    {{ if or (eq .Type &quot;page&quot;) (eq .Type &quot;about&quot;) }}
      &lt;h2&gt;&lt;a href=&quot;{{ .Permalink }}&quot;&gt;{{ .Type }} -
        {{ .Title }} - {{ .RelPermalink }}&lt;/a&gt;&lt;/h2&gt;
    {{ end }}
  {{ end }}

{{ partial &quot;footer.html&quot; . }}
:wq
</code></pre><p>Générez le site web et vérifiez le résultat. Le titre sur la page d&rsquo;accueil est maintenant &ldquo;your title here&rdquo;, qui de la variable &ldquo;title&rdquo; dans la fichier config.toml.</p>
<h3 id="modification-du-modèle-simple-par-défaut-pour-utiliser-les-modèles-partiels">Modification du modèle simple par défaut pour utiliser les modèles partiels</h3>
<pre tabindex="0"><code>$ vi themes/zafta/layouts/_default/single.html
{{ partial &quot;header.html&quot; . }}

  &lt;h1&gt;{{ .Title }}&lt;/h1&gt;
  {{ .Content }}

{{ partial &quot;footer.html&quot; . }}
:wq
</code></pre><p>Générez le site web et vérifiez le résultat. Le titre sur les articles et la page &ldquo;a propos&rdquo; devrait tout les deux refléter la valeur présente dans le fichier markdown.</p>
<h2 id="ajouter-la-date-de-publication-des-articles">Ajouter la &ldquo;Date de publication&rdquo; des articles</h2>
<p>Il est commun de voir la date à laquelle un article a été écrit ou publié, donc ajoutons cela. La section liminaire de notre article possède une variable nommée &ldquo;date&rdquo;. C&rsquo;est généralement la date de la création du contenu, mais supposons que c&rsquo;est la valeur que nous souhaitons afficher.</p>
<h3 id="ajouter-la-date-de-publication-au-modèle">Ajouter la &ldquo;Date de publication&rdquo; au modèle</h3>
<p>Nous allons commencer par modifier le modèle utilisé pour rendre les articles. Le code du modèle ressemblera à cela:</p>
<pre tabindex="0"><code>{{ .Date.Format &quot;Mon, Jan 2, 2006&quot; }}
</code></pre><p>Les articles utilisent le modèle simple par défaut, donc nous modifierons ce fichier.</p>
<pre tabindex="0"><code>$ vi themes/zafta/layouts/_default/single.html
{{ partial &quot;header.html&quot; . }}

  &lt;h1&gt;{{ .Title }}&lt;/h1&gt;
  &lt;h2&gt;{{ .Date.Format &quot;Mon, Jan 2, 2006&quot; }}&lt;/h2&gt;
  {{ .Content }}

{{ partial &quot;footer.html&quot; . }}
:wq
</code></pre><p>Générez le site web et vérifiez le résultat. Les articles ont maintenant la date affiché. Mais il y a un problème, la page &ldquo;a propos&rdquo; a également la date d&rsquo;affichée.</p>
<p>Comme d&rsquo;habiture, il y a différent moyens d&rsquo;afficher la date seulement sur les articles. Nous pourrions utiliser un &ldquo;if&rdquo; comme nous l&rsquo;avons fait sur la page d&rsquo;accueil. Une autre méthode serait de créer un modèle séparer pour les articles.</p>
<p>La solution du &ldquo;if&rdquo; fonctionne pour les site n&rsquo;ayant que quelques types de contenu. Il s&rsquo;harmonise avec le principe du &ldquo;code pour aujourd&rsquo;hui&rdquo;, aussi.</p>
<p>Admettons que nous avons rendu notre site tellement complexe que nous estimons qu&rsquo;il faut créer un nouveau type de modèle. En langage Hugo, nous allons créer un modèle de section.</p>
<p>Restaurons le modèle simple par défaut avant d&rsquo;oublier.</p>
<pre tabindex="0"><code>$ mkdir themes/zafta/layouts/post
$ vi themes/zafta/layouts/_default/single.html
{{ partial &quot;header.html&quot; . }}

  &lt;h1&gt;{{ .Title }}&lt;/h1&gt;
  {{ .Content }}

{{ partial &quot;footer.html&quot; . }}
:wq
</code></pre><p>Maintenant, nous allons modifier le modèle simple des articles. Si vous vous souvenez des règles d&rsquo;Hugo, le moteur de modèles va utiliser cette version à la place de celle par défaut.</p>
<pre tabindex="0"><code>$ vi themes/zafta/layouts/post/single.html
{{ partial &quot;header.html&quot; . }}

  &lt;h1&gt;{{ .Title }}&lt;/h1&gt;
  &lt;h2&gt;{{ .Date.Format &quot;Mon, Jan 2, 2006&quot; }}&lt;/h2&gt;
  {{ .Content }}

{{ partial &quot;footer.html&quot; . }}
:wq

</code></pre><p>Notez que nous retirons la logique de la date dans le modèle par défaut et que nous la plaçons dans le modèle des articles. Générez le site web et vérifiez le résultat. Les articles ont leur dates et la page &ldquo;a propos&rdquo; non.</p>
<h3 id="ne-répètez-pas-cela-vous-même">Ne répètez pas cela vous-même</h3>
<p>DRY (Don&rsquo;t Repeat Yourself) est un bon objectif de conception et Hugo fait du bon boulot pour supporter cette idée. Une partie de l&rsquo;art du bon modèle est de savoir quand il faut ajouter un nouveau modèle ou quand il faut modifier un existant. Avant de saisir complétement ce principe, faites vous à l&rsquo;idée que vous allez devoir faire de la refactorisation. Hugo rend cela facile et rapide, il est donc préférable de diviser un modèle.</p>
]]></content>
        </item>
        
        <item>
            <title>(Hu)go Template Primer</title>
            <link>https://www.omarmorando.com/posts/2014/04/hugo-template-primer/</link>
            <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
            
            <guid>https://www.omarmorando.com/posts/2014/04/hugo-template-primer/</guid>
            <description>Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.
This document is a brief primer on using Go templates.</description>
            <content type="html"><![CDATA[<p>Hugo uses the excellent <a href="https://golang.org/">Go</a> <a href="https://golang.org/pkg/html/template/">html/template</a> library for
its template engine. It is an extremely lightweight engine that provides a very
small amount of logic. In our experience that it is just the right amount of
logic to be able to create a good static website. If you have used other
template systems from different languages or frameworks you will find a lot of
similarities in Go templates.</p>
<p>This document is a brief primer on using Go templates. The <a href="https://golang.org/pkg/html/template/">Go docs</a>
provide more details.</p>
<h2 id="introduction-to-go-templates">Introduction to Go Templates</h2>
<p>Go templates provide an extremely simple template language. It adheres to the
belief that only the most basic of logic belongs in the template or view layer.
One consequence of this simplicity is that Go templates parse very quickly.</p>
<p>A unique characteristic of Go templates is they are content aware. Variables and
content will be sanitized depending on the context of where they are used. More
details can be found in the <a href="https://golang.org/pkg/html/template/">Go docs</a>.</p>
<h2 id="basic-syntax">Basic Syntax</h2>
<p>Golang templates are HTML files with the addition of variables and
functions.</p>
<p><strong>Go variables and functions are accessible within {{ }}</strong></p>
<p>Accessing a predefined variable &ldquo;foo&rdquo;:</p>
<pre><code>{{ foo }}
</code></pre>
<p><strong>Parameters are separated using spaces</strong></p>
<p>Calling the add function with input of 1, 2:</p>
<pre><code>{{ add 1 2 }}
</code></pre>
<p><strong>Methods and fields are accessed via dot notation</strong></p>
<p>Accessing the Page Parameter &ldquo;bar&rdquo;</p>
<pre><code>{{ .Params.bar }}
</code></pre>
<p><strong>Parentheses can be used to group items together</strong></p>
<pre><code>{{ if or (isset .Params &quot;alt&quot;) (isset .Params &quot;caption&quot;) }} Caption {{ end }}
</code></pre>
<h2 id="variables">Variables</h2>
<p>Each Go template has a struct (object) made available to it. In hugo each
template is passed either a page or a node struct depending on which type of
page you are rendering. More details are available on the
<a href="/layout/variables">variables</a> page.</p>
<p>A variable is accessed by referencing the variable name.</p>
<pre><code>&lt;title&gt;{{ .Title }}&lt;/title&gt;
</code></pre>
<p>Variables can also be defined and referenced.</p>
<pre><code>{{ $address := &quot;123 Main St.&quot;}}
{{ $address }}
</code></pre>
<h2 id="functions">Functions</h2>
<p>Go template ship with a few functions which provide basic functionality. The Go
template system also provides a mechanism for applications to extend the
available functions with their own. <a href="/layout/functions">Hugo template
functions</a> provide some additional functionality we believe
are useful for building websites. Functions are called by using their name
followed by the required parameters separated by spaces. Template
functions cannot be added without recompiling hugo.</p>
<p><strong>Example:</strong></p>
<pre><code>{{ add 1 2 }}
</code></pre>
<h2 id="includes">Includes</h2>
<p>When including another template you will pass to it the data it will be
able to access. To pass along the current context please remember to
include a trailing dot. The templates location will always be starting at
the /layout/ directory within Hugo.</p>
<p><strong>Example:</strong></p>
<pre><code>{{ template &quot;chrome/header.html&quot; . }}
</code></pre>
<h2 id="logic">Logic</h2>
<p>Go templates provide the most basic iteration and conditional logic.</p>
<h3 id="iteration">Iteration</h3>
<p>Just like in Go, the Go templates make heavy use of range to iterate over
a map, array or slice. The following are different examples of how to use
range.</p>
<p><strong>Example 1: Using Context</strong></p>
<pre><code>{{ range array }}
    {{ . }}
{{ end }}
</code></pre>
<p><strong>Example 2: Declaring value variable name</strong></p>
<pre><code>{{range $element := array}}
    {{ $element }}
{{ end }}
</code></pre>
<p><strong>Example 2: Declaring key and value variable name</strong></p>
<pre><code>{{range $index, $element := array}}
    {{ $index }}
    {{ $element }}
{{ end }}
</code></pre>
<h3 id="conditionals">Conditionals</h3>
<p>If, else, with, or, &amp; and provide the framework for handling conditional
logic in Go Templates. Like range, each statement is closed with <code>end</code>.</p>
<p>Go Templates treat the following values as false:</p>
<ul>
<li>false</li>
<li>0</li>
<li>any array, slice, map, or string of length zero</li>
</ul>
<p><strong>Example 1: If</strong></p>
<pre><code>{{ if isset .Params &quot;title&quot; }}&lt;h4&gt;{{ index .Params &quot;title&quot; }}&lt;/h4&gt;{{ end }}
</code></pre>
<p><strong>Example 2: If -&gt; Else</strong></p>
<pre><code>{{ if isset .Params &quot;alt&quot; }}
    {{ index .Params &quot;alt&quot; }}
{{else}}
    {{ index .Params &quot;caption&quot; }}
{{ end }}
</code></pre>
<p><strong>Example 3: And &amp; Or</strong></p>
<pre><code>{{ if and (or (isset .Params &quot;title&quot;) (isset .Params &quot;caption&quot;)) (isset .Params &quot;attr&quot;)}}
</code></pre>
<p><strong>Example 4: With</strong></p>
<p>An alternative way of writing &ldquo;if&rdquo; and then referencing the same value
is to use &ldquo;with&rdquo; instead. With rebinds the context <code>.</code> within its scope,
and skips the block if the variable is absent.</p>
<p>The first example above could be simplified as:</p>
<pre><code>{{ with .Params.title }}&lt;h4&gt;{{ . }}&lt;/h4&gt;{{ end }}
</code></pre>
<p><strong>Example 5: If -&gt; Else If</strong></p>
<pre><code>{{ if isset .Params &quot;alt&quot; }}
    {{ index .Params &quot;alt&quot; }}
{{ else if isset .Params &quot;caption&quot; }}
    {{ index .Params &quot;caption&quot; }}
{{ end }}
</code></pre>
<h2 id="pipes">Pipes</h2>
<p>One of the most powerful components of Go templates is the ability to
stack actions one after another. This is done by using pipes. Borrowed
from unix pipes, the concept is simple, each pipeline&rsquo;s output becomes the
input of the following pipe.</p>
<p>Because of the very simple syntax of Go templates, the pipe is essential
to being able to chain together function calls. One limitation of the
pipes is that they only can work with a single value and that value
becomes the last parameter of the next pipeline.</p>
<p>A few simple examples should help convey how to use the pipe.</p>
<p><strong>Example 1 :</strong></p>
<pre><code>{{ if eq 1 1 }} Same {{ end }}
</code></pre>
<p>is the same as</p>
<pre><code>{{ eq 1 1 | if }} Same {{ end }}
</code></pre>
<p>It does look odd to place the if at the end, but it does provide a good
illustration of how to use the pipes.</p>
<p><strong>Example 2 :</strong></p>
<pre><code>{{ index .Params &quot;disqus_url&quot; | html }}
</code></pre>
<p>Access the page parameter called &ldquo;disqus_url&rdquo; and escape the HTML.</p>
<p><strong>Example 3 :</strong></p>
<pre><code>{{ if or (or (isset .Params &quot;title&quot;) (isset .Params &quot;caption&quot;)) (isset .Params &quot;attr&quot;)}}
Stuff Here
{{ end }}
</code></pre>
<p>Could be rewritten as</p>
<pre><code>{{  isset .Params &quot;caption&quot; | or isset .Params &quot;title&quot; | or isset .Params &quot;attr&quot; | if }}
Stuff Here
{{ end }}
</code></pre>
<h2 id="context-aka-the-dot">Context (aka. the dot)</h2>
<p>The most easily overlooked concept to understand about Go templates is that {{ . }}
always refers to the current context. In the top level of your template this
will be the data set made available to it. Inside of a iteration it will have
the value of the current item. When inside of a loop the context has changed. .
will no longer refer to the data available to the entire page. If you need to
access this from within the loop you will likely want to set it to a variable
instead of depending on the context.</p>
<p><strong>Example:</strong></p>
<pre><code>  {{ $title := .Site.Title }}
  {{ range .Params.tags }}
    &lt;li&gt; &lt;a href=&quot;{{ $baseurl }}/tags/{{ . | urlize }}&quot;&gt;{{ . }}&lt;/a&gt; - {{ $title }} &lt;/li&gt;
  {{ end }}
</code></pre>
<p>Notice how once we have entered the loop the value of {{ . }} has changed. We
have defined a variable outside of the loop so we have access to it from within
the loop.</p>
<h1 id="hugo-parameters">Hugo Parameters</h1>
<p>Hugo provides the option of passing values to the template language
through the site configuration (for sitewide values), or through the meta
data of each specific piece of content. You can define any values of any
type (supported by your front matter/config format) and use them however
you want to inside of your templates.</p>
<h2 id="using-content-page-parameters">Using Content (page) Parameters</h2>
<p>In each piece of content you can provide variables to be used by the
templates. This happens in the <a href="/content/front-matter">front matter</a>.</p>
<p>An example of this is used in this documentation site. Most of the pages
benefit from having the table of contents provided. Sometimes the TOC just
doesn&rsquo;t make a lot of sense. We&rsquo;ve defined a variable in our front matter
of some pages to turn off the TOC from being displayed.</p>
<p>Here is the example front matter:</p>
<pre tabindex="0"><code>---
title: &quot;Permalinks&quot;
date: &quot;2013-11-18&quot;
aliases:
  - &quot;/doc/permalinks/&quot;
groups: [&quot;extras&quot;]
groups_weight: 30
notoc: true
---
</code></pre><p>Here is the corresponding code inside of the template:</p>
<pre><code>  {{ if not .Params.notoc }}
    &lt;div id=&quot;toc&quot; class=&quot;well col-md-4 col-sm-6&quot;&gt;
    {{ .TableOfContents }}
    &lt;/div&gt;
  {{ end }}
</code></pre>
<h2 id="using-site-config-parameters">Using Site (config) Parameters</h2>
<p>In your top-level configuration file (eg, <code>config.yaml</code>) you can define site
parameters, which are values which will be available to you in chrome.</p>
<p>For instance, you might declare:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#f92672">params</span>:
  <span style="color:#f92672">CopyrightHTML</span>: <span style="color:#e6db74">&#34;Copyright &amp;#xA9; 2013 John Doe. All Rights Reserved.&#34;</span>
  <span style="color:#f92672">TwitterUser</span>: <span style="color:#e6db74">&#34;spf13&#34;</span>
  <span style="color:#f92672">SidebarRecentLimit</span>: <span style="color:#ae81ff">5</span>
</code></pre></div><p>Within a footer layout, you might then declare a <code>&lt;footer&gt;</code> which is only
provided if the <code>CopyrightHTML</code> parameter is provided, and if it is given,
you would declare it to be HTML-safe, so that the HTML entity is not escaped
again.  This would let you easily update just your top-level config file each
January 1st, instead of hunting through your templates.</p>
<pre tabindex="0"><code>{{if .Site.Params.CopyrightHTML}}&lt;footer&gt;
&lt;div class=&quot;text-center&quot;&gt;{{.Site.Params.CopyrightHTML | safeHtml}}&lt;/div&gt;
&lt;/footer&gt;{{end}}
</code></pre><p>An alternative way of writing the &ldquo;if&rdquo; and then referencing the same value
is to use &ldquo;with&rdquo; instead. With rebinds the context <code>.</code> within its scope,
and skips the block if the variable is absent:</p>
<pre tabindex="0"><code>{{with .Site.Params.TwitterUser}}&lt;span class=&quot;twitter&quot;&gt;
&lt;a href=&quot;https://twitter.com/{{.}}&quot; rel=&quot;author&quot;&gt;
&lt;img src=&quot;/images/twitter.png&quot; width=&quot;48&quot; height=&quot;48&quot; title=&quot;Twitter: {{.}}&quot;
 alt=&quot;Twitter&quot;&gt;&lt;/a&gt;
&lt;/span&gt;{{end}}
</code></pre><p>Finally, if you want to pull &ldquo;magic constants&rdquo; out of your layouts, you can do
so, such as in this example:</p>
<pre tabindex="0"><code>&lt;nav class=&quot;recent&quot;&gt;
  &lt;h1&gt;Recent Posts&lt;/h1&gt;
  &lt;ul&gt;{{range first .Site.Params.SidebarRecentLimit .Site.Recent}}
    &lt;li&gt;&lt;a href=&quot;{{.RelPermalink}}&quot;&gt;{{.Title}}&lt;/a&gt;&lt;/li&gt;
  {{end}}&lt;/ul&gt;
&lt;/nav&gt;
</code></pre>]]></content>
        </item>
        
        <item>
            <title>Débuter avec Hugo</title>
            <link>https://www.omarmorando.com/posts/2014/04/d%C3%A9buter-avec-hugo/</link>
            <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
            
            <guid>https://www.omarmorando.com/posts/2014/04/d%C3%A9buter-avec-hugo/</guid>
            <description>&lt;h2 id=&#34;étape-1-installer-hugo&#34;&gt;Étape 1. Installer Hugo&lt;/h2&gt;
&lt;p&gt;Allez sur la page de téléchargements de
&lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;hugo&lt;/a&gt; et téléchargez la version
appropriée à votre système d&amp;rsquo;exploitation et votre architecture.&lt;/p&gt;
&lt;p&gt;Sauvegardez le fichier téléchargé à un endroit précis, afin de l&amp;rsquo;utiliser dans
l&amp;rsquo;étape suivante.&lt;/p&gt;
&lt;p&gt;Des informations plus complètes sont disponibles sur la page
&lt;a href=&#34;https://www.omarmorando.com/overview/installing/&#34;&gt;installing hugo&lt;/a&gt;&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="étape-1-installer-hugo">Étape 1. Installer Hugo</h2>
<p>Allez sur la page de téléchargements de
<a href="https://github.com/spf13/hugo/releases">hugo</a> et téléchargez la version
appropriée à votre système d&rsquo;exploitation et votre architecture.</p>
<p>Sauvegardez le fichier téléchargé à un endroit précis, afin de l&rsquo;utiliser dans
l&rsquo;étape suivante.</p>
<p>Des informations plus complètes sont disponibles sur la page
<a href="/overview/installing/">installing hugo</a></p>
<h2 id="étape-2-compilez-la-documentation">Étape 2. Compilez la documentation</h2>
<p>Hugo possède son propre site d&rsquo;exemple qui se trouve être également le site que
vous lisez actuellement.</p>
<p>Suivez les instructions suivante :</p>
<ol>
<li>Clonez le <a href="http://github.com/spf13/hugo">dépôt de hugo</a></li>
<li>Allez dans ce dépôt</li>
<li>Lancez Hugo en mode serveur et compilez la documentation</li>
<li>Ouvrez votre navigateur sur http://localhost:1313</li>
</ol>
<p>Voici les commandes génériques correspondantes :</p>
<pre><code>git clone https://github.com/spf13/hugo
cd hugo
/chemin/ou/vous/avez/installe/hugo server --source=./docs
&gt; 29 pages created
&gt; 0 tags index created
&gt; in 27 ms
&gt; Web Server is available at http://localhost:1313
&gt; Press ctrl+c to stop
</code></pre>
<p>Lorsque vous avez cela, continuez le reste de ce guide sur votre version locale.</p>
<h2 id="étape-3-changer-le-site-de-documentation">Étape 3. Changer le site de documentation</h2>
<p>Arrêtez le processus de Hugo en pressant ctrl+c.</p>
<p>Maintenant, nous allons relancer hugo, mais cette fois avec Hugo en mode de
surveillance.</p>
<pre><code>/chemin/vers/hugo/de/l-etape/1/hugo server --source=./docs --watch
&gt; 29 pages created
&gt; 0 tags index created
&gt; in 27 ms
&gt; Web Server is available at http://localhost:1313
&gt; Watching for changes in /Users/spf13/Code/hugo/docs/content
&gt; Press ctrl+c to stop
</code></pre>
<p>Ouvrez votre <a href="https://vim.spf13.com">éditeur favori</a> et changer l&rsquo;une des
sources des pages de contenu.
Open your <a href="http://vim.spf13.com">favorite editor</a> and change one of the source
content pages. Que diriez-vous de modifier ce fichier pour <em>résoudre une faute
de typo</em>.</p>
<p>Les fichiers de contenu peuvent être trouvés dans <code>docs/content/</code>. Sauf
indication contraire, les fichiers sont situés au même emplacement relatif que
l&rsquo;URL, dans notre cas <code>docs/content/overview/quickstart.md</code>.</p>
<p>Modifiez et sauvegardez ce fichier. Notez ce qu&rsquo;il se passe dans le terminal.</p>
<pre><code>&gt; Change detected, rebuilding site

&gt; 29 pages created
&gt; 0 tags index created
&gt; in 26 ms
</code></pre>
<p>Rechargez la page dans votre navigateur et voyez que le problème de typo est
maintenant résolu.</p>
<p>Notez à quel point cela a été rapide. Essayez de recharger le site avant qu&rsquo;il
soit fini de compiler.
Notice how quick that was. Try to refresh the site before it&rsquo;s finished
building. Je paris que vous n&rsquo;y arrivez pas.
Le fait d&rsquo;avoir des réactions presque instantanées vous permet d&rsquo;avoir votre
créativité fluide sans avoir à attendre de longues compilations.</p>
<h2 id="step-4-amusez-vous">Step 4. Amusez-vous</h2>
<p>Le meilleur moyen d&rsquo;apprendre quelque chose est de s&rsquo;amuser avec.</p>]]></content>
        </item>
        
        <item>
            <title>Getting Started with Hugo</title>
            <link>https://www.omarmorando.com/posts/2014/04/getting-started-with-hugo/</link>
            <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
            
            <guid>https://www.omarmorando.com/posts/2014/04/getting-started-with-hugo/</guid>
            <description>Step 1. Install Hugo Go to Hugo releases and download the appropriate version for your OS and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at Install Hugo
Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:
 Clone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:</description>
            <content type="html"><![CDATA[<h2 id="step-1-install-hugo">Step 1. Install Hugo</h2>
<p>Go to <a href="https://github.com/spf13/hugo/releases">Hugo releases</a> and download the
appropriate version for your OS and architecture.</p>
<p>Save it somewhere specific as we will be using it in the next step.</p>
<p>More complete instructions are available at <a href="https://gohugo.io/getting-started/installing/">Install Hugo</a></p>
<h2 id="step-2-build-the-docs">Step 2. Build the Docs</h2>
<p>Hugo has its own example site which happens to also be the documentation site
you are reading right now.</p>
<p>Follow the following steps:</p>
<ol>
<li>Clone the <a href="http://github.com/spf13/hugo">Hugo repository</a></li>
<li>Go into the repo</li>
<li>Run hugo in server mode and build the docs</li>
<li>Open your browser to http://localhost:1313</li>
</ol>
<p>Corresponding pseudo commands:</p>
<pre><code>git clone https://github.com/spf13/hugo
cd hugo
/path/to/where/you/installed/hugo server --source=./docs
&gt; 29 pages created
&gt; 0 tags index created
&gt; in 27 ms
&gt; Web Server is available at http://localhost:1313
&gt; Press ctrl+c to stop
</code></pre>
<p>Once you&rsquo;ve gotten here, follow along the rest of this page on your local build.</p>
<h2 id="step-3-change-the-docs-site">Step 3. Change the docs site</h2>
<p>Stop the Hugo process by hitting Ctrl+C.</p>
<p>Now we are going to run hugo again, but this time with hugo in watch mode.</p>
<pre><code>/path/to/hugo/from/step/1/hugo server --source=./docs --watch
&gt; 29 pages created
&gt; 0 tags index created
&gt; in 27 ms
&gt; Web Server is available at http://localhost:1313
&gt; Watching for changes in /Users/spf13/Code/hugo/docs/content
&gt; Press ctrl+c to stop
</code></pre>
<p>Open your <a href="http://vim.spf13.com">favorite editor</a> and change one of the source
content pages. How about changing this very file to <em>fix the typo</em>. How about changing this very file to <em>fix the typo</em>.</p>
<p>Content files are found in <code>docs/content/</code>. Unless otherwise specified, files
are located at the same relative location as the url, in our case
<code>docs/content/overview/quickstart.md</code>.</p>
<p>Change and save this file.. Notice what happened in your terminal.</p>
<pre><code>&gt; Change detected, rebuilding site

&gt; 29 pages created
&gt; 0 tags index created
&gt; in 26 ms
</code></pre>
<p>Refresh the browser and observe that the typo is now fixed.</p>
<p>Notice how quick that was. Try to refresh the site before it&rsquo;s finished building. I double dare you.
Having nearly instant feedback enables you to have your creativity flow without waiting for long builds.</p>
<h2 id="step-4-have-fun">Step 4. Have fun</h2>
<p>The best way to learn something is to play with it.</p>
]]></content>
        </item>
        
        <item>
            <title>Introduction aux modèles (Hu)go</title>
            <link>https://www.omarmorando.com/posts/2014/04/introduction-aux-mod%C3%A8les-hugo/</link>
            <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
            
            <guid>https://www.omarmorando.com/posts/2014/04/introduction-aux-mod%C3%A8les-hugo/</guid>
            <description>Hugo utilise l&amp;rsquo;excellente librairie go html/template pour son moteur de modèles. c&amp;rsquo;est un moteur extrêmement léger qui offre un très petit nombre de fonctions logiques. À notre expérience, c&amp;rsquo;est juste ce qu&amp;rsquo;il faut pour créer un bon site web statique. Si vous avez déjà utilisé d&amp;rsquo;autre moteurs de modèles pour différents langages ou frameworks, vous allez retrouver beaucoup de similitudes avec les modèles go.
Ce document est une introduction sur l&amp;rsquo;utilisation de Go templates.</description>
            <content type="html"><![CDATA[<p>Hugo utilise l&rsquo;excellente librairie <a href="http://golang.org/">go</a> <a href="http://golang.org/pkg/html/template/">html/template</a> pour
son moteur de modèles. c&rsquo;est un moteur extrêmement léger qui offre un très petit
nombre de fonctions logiques. À notre expérience, c&rsquo;est juste ce qu&rsquo;il faut pour
créer un bon site web statique. Si vous avez déjà utilisé d&rsquo;autre moteurs de
modèles pour différents langages ou frameworks, vous allez retrouver beaucoup de
similitudes avec les modèles go.</p>
<p>Ce document est une introduction sur l&rsquo;utilisation de Go templates. La
<a href="http://golang.org/pkg/html/template/">documentation go</a> fourni plus de détails.</p>
<h2 id="introduction-aux-modèles-go">Introduction aux modèles Go</h2>
<p>Go templates fournit un langage de modèles très simple. Il adhère à la
conviction que les modèles ou les vues doivent avoir une logique des plus
élémentaires. L&rsquo;une des conséquences de cette simplicité est que les modèles
seront plus rapides a être analysés.</p>
<p>Une caractéristique unique de Go templates est qu&rsquo;il est conscient du contenu.
Les variables et le contenu va être nettoyé suivant le contexte d&rsquo;utilisation.
Plus de détails sont disponibles dans la <a href="http://golang.org/pkg/html/template/">documentation go</a>.</p>
<h2 id="syntaxe-basique">Syntaxe basique</h2>
<p>Les modèles en langage Go sont des fichiers HTML avec l&rsquo;ajout de variables et
fonctions.</p>
<p><strong>Les variables Go et les fonctions sont accessibles avec {{ }}</strong></p>
<p>Accès à une variable prédéfinie &ldquo;foo&rdquo;:</p>
<pre><code>{{ foo }}
</code></pre>
<p><strong>Les paramètres sont séparés par des espaces</strong></p>
<p>Appel de la fonction add avec 1 et 2 en argument**</p>
<pre><code>{{ add 1 2 }}
</code></pre>
<p><strong>Les méthodes et les champs sont accessibles par un point</strong></p>
<p>Accès au paramètre de la page &ldquo;bar&rdquo;</p>
<pre><code>{{ .Params.bar }}
</code></pre>
<p><strong>Les parenthèses peuvent être utilisées pour grouper des éléments ensemble</strong></p>
<pre tabindex="0"><code>{{ if or (isset .Params &quot;alt&quot;) (isset .Params &quot;caption&quot;) }} Caption {{ end }}
</code></pre><h2 id="variables">Variables</h2>
<p>Chaque modèle go a une structure (objet) mis à sa disposition. Avec Hugo, à
chaque modèle est passé soit une page, soit une structure de nœud, suivant quel
type de page vous rendez. Plus de détails sont disponibles sur la page des
<a href="/layout/variables">variables</a>.</p>
<p>Une variable est accessible par son nom.</p>
<pre><code>&lt;title&gt;{{ .Title }}&lt;/title&gt;
</code></pre>
<p>Les variables peuvent également être définies et appelées.</p>
<pre><code>{{ $address := &quot;123 Main St.&quot;}}
{{ $address }}
</code></pre>
<h2 id="functions">Functions</h2>
<p>Go templace est livré avec quelques fonctions qui fournissent des
fonctionnalités basiques. Le système de Go template fourni également un
mécanisme permettant aux applications d&rsquo;étendre les fonctions disponible. Les
<a href="/layout/functions">fonctions de modèle Hugo</a> fourni quelques fonctionnalités
supplémentaires que nous espérons qu&rsquo;elles seront utiles pour vos sites web.
Les functions sont appelées en utilisant leur nom suivi par les paramètres
requis séparés par des espaces. Des fonctions de modèles ne peuvent pas être
ajoutées sans recompiler Hugo.</p>
<p><strong>Exemple:</strong></p>
<pre><code>{{ add 1 2 }}
</code></pre>
<h2 id="inclusions">Inclusions</h2>
<p>Lorsque vous incluez un autre modèle, vous devez y passer les données qu&rsquo;il sera
en mesure d&rsquo;accèder. Pour passer le contexte actuel, pensez à ajouter un point.
La localisation du modèle sera toujours à partir du répertoire /layout/ dans
Hugo.</p>
<p><strong>Exemple:</strong></p>
<pre><code>{{ template &quot;chrome/header.html&quot; . }}
</code></pre>
<h2 id="logique">Logique</h2>
<p>Go templates fourni les itérations et la logique conditionnèle des plus basique.</p>
<h3 id="itération">Itération</h3>
<p>Comme en go, les modèles go utilisent fortement <em>range</em> pour itérer dans une
map, un array ou un slice. Les exemples suivant montre différentes façons
d&rsquo;utiliser <em>range</em></p>
<p><strong>Exemple 1: En utilisant le context</strong></p>
<pre><code>{{ range array }}
    {{ . }}
{{ end }}
</code></pre>
<p><strong>Exemple 2: En déclarant un nom de variable</strong></p>
<pre><code>{{range $element := array}}
    {{ $element }}
{{ end }}
</code></pre>
<p><strong>Exemple 2: En déclarant un nom de varialbe pour la clé et la valeur</strong></p>
<pre><code>{{range $index, $element := array}}
    {{ $index }}
    {{ $element }}
{{ end }}
</code></pre>
<h3 id="conditions">Conditions</h3>
<p><em>If</em>, <em>else</em>, <em>with</em>, <em>or</em>, <em>&amp;</em>, <em>and</em> fournissent la base pour la logique
conditionnelle avec Go templates. Comme <em>range</em>, chaque déclaration est fermé
avec <code>end</code>.</p>
<p>Go templates considère les valeurs suivante comme <em>false</em> :</p>
<ul>
<li>false</li>
<li>0</li>
<li>tout array, slice, map ou chaine d&rsquo;une longueur de zéro</li>
</ul>
<p><strong>Exemple 1: If</strong></p>
<pre><code>{{ if isset .Params &quot;title&quot; }}&lt;h4&gt;{{ index .Params &quot;title&quot; }}&lt;/h4&gt;{{ end }}
</code></pre>
<p><strong>Exemple 2: If -&gt; Else</strong></p>
<pre><code>{{ if isset .Params &quot;alt&quot; }}
    {{ index .Params &quot;alt&quot; }}
{{else}}
    {{ index .Params &quot;caption&quot; }}
{{ end }}
</code></pre>
<p><strong>Exemple 3: And &amp; Or</strong></p>
<pre tabindex="0"><code>{{ if and (or (isset .Params &quot;title&quot;) (isset .Params &quot;caption&quot;))
    (isset .Params &quot;attr&quot;)}}
</code></pre><p><strong>Exemple 4: With</strong></p>
<p>Une manière alternative d&rsquo;écrire un &ldquo;if&rdquo; et de référencer cette même valeur est
d&rsquo;utiliser &ldquo;with&rdquo;. Cela permet de remplacer le contexte <code>.</code> par cet valeur et
saute le bloc si la variable est absente.</p>
<p>Le premier exemple peut être simplifié à ceci :</p>
<pre><code>{{ with .Params.title }}&lt;h4&gt;{{ . }}&lt;/h4&gt;{{ end }}
</code></pre>
<p><strong>Exemple 5: If -&gt; Else If</strong></p>
<pre><code>{{ if isset .Params &quot;alt&quot; }}
    {{ index .Params &quot;alt&quot; }}
{{ else if isset .Params &quot;caption&quot; }}
    {{ index .Params &quot;caption&quot; }}
{{ end }}
</code></pre>
<h2 id="pipes"><em>Pipes</em></h2>
<p>L&rsquo;un des composants le plus puissant de Go templates est la capacité d&rsquo;empiler
les action l&rsquo;une après l&rsquo;autre. Cela est fait en utilisant les <em>pipes</em>.
Empruntés aux <em>pipes</em> unix, le concept est simple. Chaque sortie de <em>pipeline</em>
devient l&rsquo;entrée du <em>pipe</em> suivant.</p>
<p>À cause de la syntaxe très simple de Go templates, le <em>pipe</em> est essentiel pour
être capable d&rsquo;enchainer les appels de fonctions. Une limitation des <em>pipes</em>
est qu&rsquo;il ne peuvent fonctionner seulement avec une seule valeur et cette valeur
devient le dernier paramètre du prochain <em>pipeline</em>.</p>
<p>Quelques exemples simple devrait vous aider à comprendre comment utiliser les
<em>pipes</em>.</p>
<p><strong>Exemple 1 :</strong></p>
<pre><code>{{ if eq 1 1 }} Same {{ end }}
</code></pre>
<p>est identique à</p>
<pre><code>{{ eq 1 1 | if }} Same {{ end }}
</code></pre>
<p>Il semble étrange de placer le <em>if</em> à la fin, mais il fournit une bonne
illustration de la façon d&rsquo;utiliser les tuyaux.</p>
<p><strong>Exemple 2 :</strong></p>
<pre><code>{{ index .Params &quot;disqus_url&quot; | html }}
</code></pre>
<p>Accès au paramètre de page nommé &ldquo;disqus_url&rdquo; et échappement du HTML</p>
<p><strong>Exemple 3 :</strong></p>
<pre tabindex="0"><code>{{ if or (or (isset .Params &quot;title&quot;) (isset .Params &quot;caption&quot;))
    (isset .Params &quot;attr&quot;)}}
Stuff Here
{{ end }}
</code></pre><p>Peut être réécrit en</p>
<pre tabindex="0"><code>{{  isset .Params &quot;caption&quot; | or isset .Params &quot;title&quot; |
    or isset .Params &quot;attr&quot; | if }}
Stuff Here
{{ end }}
</code></pre><h2 id="contexte-alias-le-point">Contexte (alias. le point)</h2>
<p>Le concept le plus facilement négligé pour comprendre les modèles go est que
{{ . }} fait toujours référence au contexte actuel. Dans le plus haut niveau de
votre modèle, ce sera l&rsquo;ensemble des données mis à votre disposition. Dans une
itération, ce sera la valeur de l&rsquo;élément actuel. Enfin, dans une boucle, le
contexte change. . ne fera plus référence aux données disponibles dans la page
entière. Si vous avez besoin y d&rsquo;accèder depuis l&rsquo;intérieur d&rsquo;une boucle, il est
judicieux d&rsquo;y définir comme variable au lieu de dépendre du contexte.</p>
<p><strong>Exemple:</strong></p>
<pre tabindex="0"><code>{{ $title := .Site.Title }}
{{ range .Params.tags }}
&lt;li&gt; &lt;a href=&quot;{{ $baseurl }}/tags/{{ . | urlize }}&quot;&gt;
    {{ . }}&lt;/a&gt; - {{ $title }} &lt;/li&gt;
{{ end }}
</code></pre><p>Notez que, une fois que nous sommes entrés dans la boucle, la valeur de
{{ . }} a changée. Nous avons défini une variable en dehors de la boucle, afin
d&rsquo;y avoir accès dans la boucle.</p>
<h1 id="les-paramètres-dhugo">Les Paramètres d&rsquo;Hugo</h1>
<p>Hugo fournit l&rsquo;option de passer des valeurs au modèle depuis la configuration du
site, ou depuis les métadonnées de chaque partie du contenu. Vous pouvez définir
n&rsquo;importe quelle valeur de n&rsquo;importe quel type (supporté par votre section
liminaire / format de configuration) et les utiliser comme vous le souhaitez
dans votre modèle.</p>
<h2 id="utiliser-les-paramètres-de-contenu-page">Utiliser les paramètres de contenu (page)</h2>
<p>Dans chaque partie du contenu, vous pouvez fournir des variables pour être
utilisées par le modèle. Cela se passe dans la
<a href="/content/front-matter">section liminaire</a>.</p>
<p>Un exemple de cela est utilisé par ce site de documentation. La plupart des
pages bénéficient de la présentation de la table des matières. Quelques fois,
la table des matières n&rsquo;a pas beaucoup de sens. Nous avons défini une variable
dans notre section liminaire de quelques pages pour désactiver la table des
matières.</p>
<p>Ceci est un exemple de section liminaire :</p>
<pre tabindex="0"><code>---
title: &quot;Permalinks&quot;
date: &quot;2013-11-18&quot;
aliases:
  - &quot;/doc/permalinks/&quot;
groups: [&quot;extras&quot;]
groups_weight: 30
notoc: true
---
</code></pre><p>Ceci est le code correspondant dans le modèle :</p>
<pre><code>  {{ if not .Params.notoc }}
    &lt;div id=&quot;toc&quot; class=&quot;well col-md-4 col-sm-6&quot;&gt;
    {{ .TableOfContents }}
    &lt;/div&gt;
  {{ end }}
</code></pre>
<h2 id="utiliser-les-paramètres-de-site-config">Utiliser les paramètres de site (config)</h2>
<p>Dans votre configuration de plus haut niveau (ex <code>config.yaml</code>), vous pouvez
définir des paramètres de site, dont les valeurs vous seront accessibles.</p>
<p>Pour les instances, vous pourriez délarer :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#f92672">params</span>:
  <span style="color:#f92672">CopyrightHTML</span>: <span style="color:#e6db74">&#34;Copyright &amp;#xA9; 2013 John Doe. All Rights Reserved.&#34;</span>
  <span style="color:#f92672">TwitterUser</span>: <span style="color:#e6db74">&#34;spf13&#34;</span>
  <span style="color:#f92672">SidebarRecentLimit</span>: <span style="color:#ae81ff">5</span>
</code></pre></div><p>Avec un pied de page, vous devriez déclarer un <code>&lt;footer&gt;</code> qui est affiché
seulement si le paramètre <code>CopyrightHTML</code> est déclaré, et si il l&rsquo;est, vous
devriez le déclarer comme HTML-safe, afin d&rsquo;éviter d&rsquo;échapper les entités HTML.
Cela vous permettra de le modifier facilement dans votre configuration au lieu
de le chercher dans votre modèle.</p>
<pre tabindex="0"><code>{{if .Site.Params.CopyrightHTML}}&lt;footer&gt;
&lt;div class=&quot;text-center&quot;&gt;{{.Site.Params.CopyrightHTML | safeHtml}}&lt;/div&gt;
&lt;/footer&gt;{{end}}
</code></pre><p>Une alternative au &ldquo;if&rdquo; et d&rsquo;appeler la même valeur est d&rsquo;utiliser &ldquo;with&rdquo;. Cela
modifiera le contexte et passera le bloc si la variable est absente :</p>
<pre tabindex="0"><code>{{with .Site.Params.TwitterUser}}&lt;span class=&quot;twitter&quot;&gt;
&lt;a href=&quot;https://twitter.com/{{.}}&quot; rel=&quot;author&quot;&gt;
&lt;img src=&quot;/images/twitter.png&quot; width=&quot;48&quot; height=&quot;48&quot; title=&quot;Twitter: {{.}}&quot;
 alt=&quot;Twitter&quot;&gt;&lt;/a&gt;
&lt;/span&gt;{{end}}
</code></pre><p>Enfin, si vous souhaitez extraire des &ldquo;constantes magiques&rdquo; de vos mises en
page, vous pouvez le faire comme dans l&rsquo;exemple suivant :</p>
<pre tabindex="0"><code>&lt;nav class=&quot;recent&quot;&gt;
  &lt;h1&gt;Recent Posts&lt;/h1&gt;
  &lt;ul&gt;{{range first .Site.Params.SidebarRecentLimit .Site.Recent}}
    &lt;li&gt;&lt;a href=&quot;{{.RelPermalink}}&quot;&gt;{{.Title}}&lt;/a&gt;&lt;/li&gt;
  {{end}}&lt;/ul&gt;
&lt;/nav&gt;
</code></pre>]]></content>
        </item>
        
        <item>
            <title>Migrer vers Hugo depuis Jekyll</title>
            <link>https://www.omarmorando.com/posts/2014/03/migrer-vers-hugo-depuis-jekyll/</link>
            <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
            
            <guid>https://www.omarmorando.com/posts/2014/03/migrer-vers-hugo-depuis-jekyll/</guid>
            <description>&lt;h2 id=&#34;déplacez-le-contenu-statique-vers-static&#34;&gt;Déplacez le contenu statique vers &lt;code&gt;static&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Jekyll a une règle comme quoi tout répertoire qui ne commence pas par &lt;code&gt;_&lt;/code&gt; sera
copié tel-quel dans le répertoire &lt;code&gt;_site&lt;/code&gt;. Hugo garde tout le contenu statique
dans le répertoire &lt;code&gt;static&lt;/code&gt;. Vous devez donc déplacer tout ce type de contenu
là-dedans. Avec Jekylll, l&amp;rsquo;arborescence ressemblant à ceci :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;▾ &amp;lt;root&amp;gt;/
    ▾ images/
        logo.png
&lt;/code&gt;&lt;/pre&gt;</description>
            <content type="html"><![CDATA[<h2 id="déplacez-le-contenu-statique-vers-static">Déplacez le contenu statique vers <code>static</code></h2>
<p>Jekyll a une règle comme quoi tout répertoire qui ne commence pas par <code>_</code> sera
copié tel-quel dans le répertoire <code>_site</code>. Hugo garde tout le contenu statique
dans le répertoire <code>static</code>. Vous devez donc déplacer tout ce type de contenu
là-dedans. Avec Jekylll, l&rsquo;arborescence ressemblant à ceci :</p>
<pre><code>▾ &lt;root&gt;/
    ▾ images/
        logo.png
</code></pre>
<p>doit devenir</p>
<pre><code>▾ &lt;root&gt;/
    ▾ static/
        ▾ images/
            logo.png
</code></pre>
<p>En outre, vous allez devoir déplacer tous les fichiers présents à la racine vers
le répertoire <code>static</code>.</p>
<h2 id="créez-votre-configuration-hugo">Créez votre configuration Hugo</h2>
<p>Hugo peut lire votre fichier de configuration au format JSON, YAML et TOML. Hugo
supporte également les paramètres de configuration. Plus d&rsquo;informations sur la
<a href="/overview/configuration/">documentation de configuration Hugo</a></p>
<h2 id="définiez-votre-répertoire-de-publication-sur-_site">Définiez votre répertoire de publication sur <code>_site</code></h2>
<p>La valeur par défaut pour Jekyll est d&rsquo;utiliser le répertoire <code>_site</code> pour
publier le contenu. Pour Hugo, le répertoire de publication est <code>public</code>. Si,
comme moi, vous avez [lié <code>_site</code> vers un sous-module git sur la branche
<code>gh-pages</code>](<a href="http://blog.blindgaenger.net/generate_github_pages_in_a_submodule.ht">http://blog.blindgaenger.net/generate_github_pages_in_a_submodule.ht</a>
ml), vous allez vouloir avoir quelques alternatives :</p>
<ol>
<li>
<p>Changez votre lien du sous-module <code>gh-pages</code> pour pointer sur public au lieu
de <code>_site</code> (recommendé).</p>
<pre><code> git submodule deinit _site
 git rm _site
 git submodule add -b gh-pages
     git@github.com:your-username/your-repo.git public
</code></pre>
</li>
<li>
<p>Ou modifiez la configuration de Hugo pour utiliser le répertoire <code>_site</code> au
lieu de <code>public</code>.</p>
<pre><code> {
     ..
     &quot;publishdir&quot;: &quot;_site&quot;,
     ..
 }
</code></pre>
</li>
</ol>
<h2 id="convertir-un-thème-jekyll-pour-hugo">Convertir un thème Jekyll pour Hugo</h2>
<p>C&rsquo;est la majeure partie du travail. La documentation est votre ami.
Vous devriez vous référer à [la documentation des thèmes de Jekyll]
(<a href="http://jekyllrb.com/docs/templates/">http://jekyllrb.com/docs/templates/</a>) si vous devez vous rafraîchir la mémoire
sur la façon dont vous avez construit votre blog et [les thèmes de Hugo]
(/layout/templates/) pour apprendre la manière de faire sur Hugo.</p>
<p>Pour vous donner un point de référence, la conversion du thème pour
<a href="http://heyitsalex.net/">heyitsalex.net</a> ne m&rsquo;a pris que quelques heures.</p>
<h2 id="convertir-les-extensions-jekyll-vers-des-shortcodes-hugo">Convertir les extensions Jekyll vers des shortcodes Hugo</h2>
<p>Jekyll support les <a href="http://jekyllrb.com/docs/plugins/">extensions</a>; Hugo lui a
les <a href="/doc/shortcodes/">shortcodes</a>. C&rsquo;est assez banal les porter.</p>
<h3 id="implémentation">Implémentation</h3>
<p>Comme exemple, j&rsquo;utilise une extension pour avoir un [<code>image_tag</code>](https://githu
b.com/alexandre-normand/alexandre-normand/blob/74bb12036a71334fdb7dba84e073382fc
06908ec/_plugins/image_tag.rb) presonnalisé pour générer les images avec une
légende sur Jekyll. J&rsquo;ai vu que Hugo implémente un shortcode qui fait exactement
la même chose.</p>
<p>Extension Jekyll :</p>
<pre tabindex="0"><code>module Jekyll
  class ImageTag &lt; Liquid::Tag
    @url = nil
    @caption = nil
    @class = nil
    @link = nil
    // Patterns
    IMAGE_URL_WITH_CLASS_AND_CAPTION =
    IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK =
        /(\w+)(\s+)((https?:\/\/|\/)(\S+))(\s+)&quot;(.*?)&quot;(\s+)-&gt;
        ((https?:\/\/|\/)(\S+))(\s*)/i
    IMAGE_URL_WITH_CAPTION = /((https?:\/\/|\/)(\S+))(\s+)&quot;(.*?)&quot;/i
    IMAGE_URL_WITH_CLASS = /(\w+)(\s+)((https?:\/\/|\/)(\S+))/i
    IMAGE_URL = /((https?:\/\/|\/)(\S+))/i
    def initialize(tag_name, markup, tokens)
      super
      if markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK
        @class   = $1
        @url     = $3
        @caption = $7
        @link = $9
      elsif markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION
        @class   = $1
        @url     = $3
        @caption = $7
      elsif markup =~ IMAGE_URL_WITH_CAPTION
        @url     = $1
        @caption = $5
      elsif markup =~ IMAGE_URL_WITH_CLASS
        @class = $1
        @url   = $3
      elsif markup =~ IMAGE_URL
        @url = $1
      end
    end
    def render(context)
      if @class
        source = &quot;&lt;figure class='#{@class}'&gt;&quot;
      else
        source = &quot;&lt;figure&gt;&quot;
      end
      if @link
        source += &quot;&lt;a href=\&quot;#{@link}\&quot;&gt;&quot;
      end
      source += &quot;&lt;img src=\&quot;#{@url}\&quot;&gt;&quot;
      if @link
        source += &quot;&lt;/a&gt;&quot;
      end
      source += &quot;&lt;figcaption&gt;#{@caption}&lt;/figcaption&gt;&quot; if @caption
      source += &quot;&lt;/figure&gt;&quot;
      source
    end
  end
end
Liquid::Template.register_tag('image', Jekyll::ImageTag)
</code></pre><p>Écrite en tant que shortcode Hugo:</p>
<pre tabindex="0"><code>&lt;!-- image --&gt;
&lt;figure {{ with .Get &quot;class&quot; }}class=&quot;{{.}}&quot;{{ end }}&gt;
    {{ with .Get &quot;link&quot;}}&lt;a href=&quot;{{.}}&quot;&gt;{{ end }}
        &lt;img src=&quot;{{ .Get &quot;src&quot; }}&quot;
            {{ if or (.Get &quot;alt&quot;) (.Get &quot;caption&quot;) }}
                alt=&quot;{{ with .Get &quot;alt&quot;}}
                        {{.}}
                     {{else}}
                        {{ .Get &quot;caption&quot; }}
                     {{ end }}&quot;
               {{ end }} /&gt;
    {{ if .Get &quot;link&quot;}}&lt;/a&gt;{{ end }}
    {{ if or (or (.Get &quot;title&quot;) (.Get &quot;caption&quot;)) (.Get &quot;attr&quot;)}}
    &lt;figcaption&gt;{{ if isset .Params &quot;title&quot; }}
        {{ .Get &quot;title&quot; }}{{ end }}
        {{ if or (.Get &quot;caption&quot;) (.Get &quot;attr&quot;)}}&lt;p&gt;
        {{ .Get &quot;caption&quot; }}
        {{ with .Get &quot;attrlink&quot;}}&lt;a href=&quot;{{.}}&quot;&gt; {{ end }}
            {{ .Get &quot;attr&quot; }}
        {{ if .Get &quot;attrlink&quot;}}&lt;/a&gt; {{ end }}
        &lt;/p&gt; {{ end }}
    &lt;/figcaption&gt;
    {{ end }}
&lt;/figure&gt;
&lt;!-- image --&gt;
</code></pre><h3 id="utilisation">Utilisation</h3>
<p>J&rsquo;ai simplement changé :</p>
<pre tabindex="0"><code>{% image
    full http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg
    &quot;One of my favorite touristy-type photos. I secretly waited for the
    good light while we were &quot;having fun&quot; and took this. Only regret: a
    stupid pole in the top-left corner of the frame I had to clumsily get
    rid of at post-processing.&quot;
    -&gt;http://www.flickr.com/photos/alexnormand/4829260124/in/
        set-72157624547713078/ %}
</code></pre><p>pour cela (cet exemple utilise une version légèrement étendue nommée <code>fig</code>,
différente de la <code>figure</code> intégrée) :</p>
<pre tabindex="0"><code>{{% fig class=&quot;full&quot;
    src=&quot;http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg&quot;
    title=&quot;One of my favorite touristy-type photos. I secretly waited for the
    good light while we were having fun and took this. Only regret: a stupid
    pole in the top-left corner of the frame I had to clumsily get rid of at
    post-processing.&quot;
    link=&quot;http://www.flickr.com/photos/alexnormand/4829260124/in/
            set-72157624547713078/&quot; %}}
</code></pre><p>Comme bonus, les paramètres nommés des shortcodes sont plus lisibles.</p>
<h2 id="touches-finales">Touches finales</h2>
<h3 id="corriger-le-contenu">Corriger le contenu</h3>
<p>Suivant le nombre de modifications que vous avez effectué sur chaque articles
avec Jekyll, cette étape requierra plus ou moins d&rsquo;efforts. Il n&rsquo;y a pas de
règles rigoureuses ici, si ce n&rsquo;est que <code>hugo server --watch</code> est votre ami.
Testez vos modifications et corrigez les erreurs au besoin.</p>
<h3 id="nettoyez-le-tout">Nettoyez le tout</h3>
<p>Vous voudrez sûrement supprimer votre configuration Jekyll maintenant que tout
est fini. Exact, pensez à supprimer tout ce qui est inutilisé.</p>
<h2 id="un-exemple-pratique">Un exemple pratique</h2>
<p><a href="http://heyitsalex.net/">Hey, it&rsquo;s Alex</a> a été migré de Jekyll vers Hugo en
moins de temps qu&rsquo;une journée père enfant. Vous pouvez trouver toutes les
modification en regardant ce [diff](<a href="https://github.com/alexandre-normand/alexand">https://github.com/alexandre-normand/alexand</a>
re-normand/compare/869d69435bd2665c3fbf5b5c78d4c22759d7613a&hellip;b7f6605b1265e83b4b
81495423294208cc74d610).</p>]]></content>
        </item>
        
    </channel>
</rss>
